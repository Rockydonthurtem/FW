'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    let myArr = [];
    await readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      myArr.push(res);
      setRand5(res);
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    // console.log("^^^^^^^^^^^^^^^^^^^",typeof(rand5))
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    }

    console.log(`!!!!!!!!!!!!!!!!!! ${parsedData}`);
  };

  if (name) {
    myFunc(name); // console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQTtBQUFELElBQWFELE9BQU8sQ0FBQyxPQUFELENBQTFCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRyxFQUFBQTtBQUFELElBQVNILE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTUssRUFBRSxHQUFHTCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVNLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUCxPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVEsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlYsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7O0FBRUEsTUFBSVcsTUFBTSxHQUFHLE1BQU9ILElBQVAsSUFBZ0I7QUFDNUIsUUFBSUksS0FBSyxHQUFHLEVBQVo7QUFDQSxVQUFNUCxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNMSyxJQURLLENBQ0NDLEdBQUQsSUFBUztBQUNkO0FBQ0FGLE1BQUFBLEtBQUssQ0FBQ0csSUFBTixDQUFXRCxHQUFYO0FBQ0FKLE1BQUFBLFFBQVEsQ0FBQ0ksR0FBRCxDQUFSO0FBQ0EsS0FMSyxFQU1MRCxJQU5LLENBTUEsTUFBTTtBQUNYRyxNQUFBQSxHQUFHO0FBQ0gsS0FSSyxDQUFOO0FBU0EsR0FYRDs7QUFZQSxRQUFNQSxHQUFHLEdBQUcsWUFBWTtBQUN2QjtBQUNBO0FBQ0EsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlVCxLQUFmLEVBQXFCO0FBQ3BCUSxNQUFBQSxVQUFVLENBQUNGLElBQVgsQ0FBZ0JHLEdBQWhCO0FBQ0E7O0FBQ0RDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLHNCQUFxQkgsVUFBVyxFQUE3QztBQUNBLEdBUkQ7O0FBU0EsTUFBR1QsSUFBSCxFQUFRO0FBQ1BHLElBQUFBLE1BQU0sQ0FBQ0gsSUFBRCxDQUFOLENBRE8sQ0FFUDtBQUNBOztBQUNELHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQWpDRDs7QUFtQ0FhLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGV9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdGxldCBteUZ1bmMgPSBhc3luYyAobmFtZSkgPT4ge1xuXHRcdGxldCBteUFyciA9IFtdXG5cdFx0YXdhaXQgcmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdFx0XHRteUFyci5wdXNoKHJlcylcblx0XHRcdHNldFJhbmQ1KHJlcylcblx0XHR9KVxuXHRcdC50aGVuKCgpID0+IHtcblx0XHRcdGZ1bigpXG5cdFx0fSlcblx0fVxuXHRjb25zdCBmdW4gPSBhc3luYyAoKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0XHQvLyBjb25zb2xlLmxvZyhcIl5eXl5eXl5eXl5eXl5eXl5eXl5cIix0eXBlb2YocmFuZDUpKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHRjb25zb2xlLmxvZyhgISEhISEhISEhISEhISEhISEhICR7cGFyc2VkRGF0YX1gKVxuXHR9XG5cdGlmKG5hbWUpe1xuXHRcdG15RnVuYyhuYW1lKVxuXHRcdC8vIGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCl9YClcblx0fVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19