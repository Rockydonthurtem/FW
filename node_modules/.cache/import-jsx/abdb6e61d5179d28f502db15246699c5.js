'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [parsedData, setParsedData] = useState(); // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
        fun(res);
      }); // .then(() => {
      // 	fun()
      // })
    };

    myFunc();
  }, []);

  const fun = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      pick12.push(res[Math.floor(Math.random() * res.length)]);
      setParsedData(pick12);
    }
  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }
  // myFunc()


  console.table(`parsed ${JSON.stringify(pick12)}`);

  const Basic = () => /*#__PURE__*/React.createElement(Table, {
    data: parsedData
  });

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJjc3YiLCJmcyIsInJlYWRDaGFyaXRpZXMiLCJyZWFkUHJvZmlsZSIsIkFwcCIsIm5hbWUiLCJyYW5kNSIsInNldFJhbmQ1IiwicGFyc2VkRGF0YSIsInNldFBhcnNlZERhdGEiLCJteUZ1bmMiLCJ0aGVuIiwicmVzIiwiZnVuIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJjb25zb2xlIiwidGFibGUiLCJKU09OIiwic3RyaW5naWZ5IiwiQmFzaWMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRSxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JILE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQTtBQUFELElBQVNMLE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1NLEdBQUcsR0FBR04sT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTU8sRUFBRSxHQUFHUCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVRLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDVCxPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVUsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlgsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFDQSxRQUFNLENBQUNZLFVBQUQsRUFBYUMsYUFBYixJQUE4QmIsUUFBUSxFQUE1QyxDQU5vQyxDQU9wQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQUMsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFFZixRQUFJYSxNQUFNLEdBQUcsTUFBTTtBQUNsQlIsTUFBQUEsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDQ00sSUFERCxDQUNPQyxHQUFELElBQVM7QUFDZDtBQUNBTCxRQUFBQSxRQUFRLENBQUNLLEdBQUQsQ0FBUjtBQUNBQyxRQUFBQSxHQUFHLENBQUNELEdBQUQsQ0FBSDtBQUNBLE9BTEQsRUFEa0IsQ0FPbEI7QUFDQTtBQUNBO0FBQ0EsS0FWRDs7QUFXQUYsSUFBQUEsTUFBTTtBQUNOLEdBZFEsRUFjTixFQWRNLENBQVQ7O0FBZUEsUUFBTUcsR0FBRyxHQUFJRCxHQUFELElBQVM7QUFDcEI7QUFDQSxVQUFNSixVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJTSxHQUFSLElBQWVGLEdBQWYsRUFBbUI7QUFDbEJKLE1BQUFBLFVBQVUsQ0FBQ08sSUFBWCxDQUFnQkQsR0FBaEI7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJELE1BQUFBLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZSCxHQUFHLENBQUNNLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JSLEdBQUcsQ0FBQ1MsTUFBL0IsQ0FBRCxDQUFmO0FBQ0FaLE1BQUFBLGFBQWEsQ0FBQ08sTUFBRCxDQUFiO0FBQ0E7QUFFRCxHQVpELENBaENvQyxDQTZDcEM7QUFDQztBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FNLEVBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFlLFVBQVNDLElBQUksQ0FBQ0MsU0FBTCxDQUFlVCxNQUFmLENBQXVCLEVBQS9DOztBQUNELFFBQU1VLEtBQUssR0FBRyxtQkFBTSxvQkFBQyxLQUFEO0FBQU8sSUFBQSxJQUFJLEVBQUVsQjtBQUFiLElBQXBCOztBQUNBLHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQXJERDs7QUF1REFtQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnaW5rLXRhYmxlJylcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGNvbnN0IFtwYXJzZWREYXRhLCBzZXRQYXJzZWREYXRhXSA9IHVzZVN0YXRlKClcblx0Ly8gbGV0IG15RnVuYyA9ICgpID0+IHtcblx0Ly8gXHRyZWFkQ2hhcml0aWVzKG5hbWUpXG5cdC8vIFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0Ly8gXHRcdHNldFJhbmQ1KHJlcylcblx0Ly8gXHR9KVxuXHQvLyBcdC50aGVuKCgpID0+IHtcblx0Ly8gXHRcdGZ1bigpXG5cdC8vIFx0fSlcblx0Ly8gfVxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXG5cdFx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0XHRcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0XHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0XHRcdFx0c2V0UmFuZDUocmVzKVxuXHRcdFx0XHRmdW4ocmVzKVxuXHRcdFx0fSlcblx0XHRcdC8vIC50aGVuKCgpID0+IHtcblx0XHRcdC8vIFx0ZnVuKClcblx0XHRcdC8vIH0pXG5cdFx0fVxuXHRcdG15RnVuYygpXG5cdH0sIFtdKVxuXHRjb25zdCBmdW4gPSAocmVzKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmVzKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0cGljazEyLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHRcdHNldFBhcnNlZERhdGEocGljazEyKVxuXHRcdH1cblx0XHRcblx0fVxuXHQvLyBpZihuYW1lKXtcblx0XHQvLyBcdGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke25hbWV9YClcblx0XHQvLyBcdG15RnVuYyhuYW1lKVxuXHRcdC8vIH1cblx0XHQvLyBteUZ1bmMoKVxuXHRcdGNvbnNvbGUudGFibGUoYHBhcnNlZCAke0pTT04uc3RyaW5naWZ5KHBpY2sxMil9YClcblx0Y29uc3QgQmFzaWMgPSAoKSA9PiA8VGFibGUgZGF0YT17cGFyc2VkRGF0YX0gLz5cblx0cmV0dXJuIDxUZXh0PkhFUkUgPC9UZXh0PlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==