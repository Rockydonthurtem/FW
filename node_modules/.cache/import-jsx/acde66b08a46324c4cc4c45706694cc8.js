'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    let myArr = [];
    await readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      myArr.push(res);
      setRand5(res);
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    console.log("^^^^^^^^^^^^^^^^^^^", typeof rand5);
    const parsedData = [];

    for (let row of rand5) {
      const rowItems = row;
      parsedData.push(rowItems[0] + rowItems[1]);
      console.log(`row ${row}`);
      console.log(`rowItems ${rowItems}`);
      console.log(`parsedData ${parsedData}`);
    }
  };

  if (name) {
    myFunc(name); // console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJjb25zb2xlIiwibG9nIiwicGFyc2VkRGF0YSIsInJvdyIsInJvd0l0ZW1zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBO0FBQUQsSUFBYUQsT0FBTyxDQUFDLE9BQUQsQ0FBMUI7O0FBQ0EsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNHLEVBQUFBO0FBQUQsSUFBU0gsT0FBTyxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTUksR0FBRyxHQUFHSixPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNSyxFQUFFLEdBQUdMLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRU0sRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNQLE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNUSxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxJQUFJLEdBQUc7QUFBUixDQUFELEtBQXlCO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CVixRQUFRLENBQUMsRUFBRCxDQUFsQzs7QUFFQSxNQUFJVyxNQUFNLEdBQUcsTUFBT0gsSUFBUCxJQUFnQjtBQUM1QixRQUFJSSxLQUFLLEdBQUcsRUFBWjtBQUNBLFVBQU1QLGFBQWEsQ0FBQ0csSUFBRCxDQUFiLENBQ0xLLElBREssQ0FDQ0MsR0FBRCxJQUFTO0FBQ2Q7QUFDQUYsTUFBQUEsS0FBSyxDQUFDRyxJQUFOLENBQVdELEdBQVg7QUFDQUosTUFBQUEsUUFBUSxDQUFDSSxHQUFELENBQVI7QUFDQSxLQUxLLEVBTUxELElBTkssQ0FNQSxNQUFNO0FBQ1hHLE1BQUFBLEdBQUc7QUFDSCxLQVJLLENBQU47QUFTQSxHQVhEOztBQVlBLFFBQU1BLEdBQUcsR0FBRyxZQUFZO0FBQ3ZCO0FBQ0FDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHFCQUFaLEVBQWtDLE9BQU9ULEtBQXpDO0FBQ0EsVUFBTVUsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlWCxLQUFmLEVBQXFCO0FBQ3BCLFlBQU1ZLFFBQVEsR0FBR0QsR0FBakI7QUFDQUQsTUFBQUEsVUFBVSxDQUFDSixJQUFYLENBQWdCTSxRQUFRLENBQUMsQ0FBRCxDQUFSLEdBQWNBLFFBQVEsQ0FBQyxDQUFELENBQXRDO0FBQ0FKLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLE9BQU1FLEdBQUksRUFBdkI7QUFDQUgsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsWUFBV0csUUFBUyxFQUFqQztBQUNBSixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxjQUFhQyxVQUFXLEVBQXJDO0FBQ0E7QUFDRCxHQVhEOztBQVlBLE1BQUdYLElBQUgsRUFBUTtBQUNQRyxJQUFBQSxNQUFNLENBQUNILElBQUQsQ0FBTixDQURPLENBRVA7QUFDQTs7QUFDRCxzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0FwQ0Q7O0FBc0NBYyxNQUFNLENBQUNDLE9BQVAsR0FBaUJoQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZX0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0bGV0IG15RnVuYyA9IGFzeW5jIChuYW1lKSA9PiB7XG5cdFx0bGV0IG15QXJyID0gW11cblx0XHRhd2FpdCByZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0XHRcdG15QXJyLnB1c2gocmVzKVxuXHRcdFx0c2V0UmFuZDUocmVzKVxuXHRcdH0pXG5cdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0ZnVuKClcblx0XHR9KVxuXHR9XG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnNvbGUubG9nKFwiXl5eXl5eXl5eXl5eXl5eXl5eXlwiLHR5cGVvZihyYW5kNSkpXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJhbmQ1KXtcblx0XHRcdGNvbnN0IHJvd0l0ZW1zID0gcm93O1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zWzBdICsgcm93SXRlbXNbMV0pO1xuXHRcdFx0Y29uc29sZS5sb2coYHJvdyAke3Jvd31gKVxuXHRcdFx0Y29uc29sZS5sb2coYHJvd0l0ZW1zICR7cm93SXRlbXN9YClcblx0XHRcdGNvbnNvbGUubG9nKGBwYXJzZWREYXRhICR7cGFyc2VkRGF0YX1gKVxuXHRcdH1cblx0fVxuXHRpZihuYW1lKXtcblx0XHRteUZ1bmMobmFtZSlcblx0XHQvLyBjb25zb2xlLmxvZyhgY2hlY2tpbmcgc3RhdGUgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpfWApXG5cdH1cblx0cmV0dXJuIDxUZXh0PkhFUkUgPC9UZXh0PlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==