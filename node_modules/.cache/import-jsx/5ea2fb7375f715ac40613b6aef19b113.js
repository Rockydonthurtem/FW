'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  console.log("*****************************", charities, profileInfo);
  useEffect(() => {
    let myFunc = () => {
      readCharities(charities).then(res => {
        handleCharity(res);
      });
      readProfile(profileInfo);
    };

    myFunc();
  }, []);

  const handleCharity = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsInJhbmRvbUNoYXJpdGllcyIsInNldFJhbmRvbUNoYXJpdGllcyIsInR3ZWx2ZVJhbmRvbUNoYXJpdGllcyIsImNvbnNvbGUiLCJsb2ciLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJoYW5kbGVDaGFyaXR5IiwicGFyc2VkRGF0YSIsInJvdyIsInB1c2giLCJwaWNrMTIiLCJpIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwidGVzdCIsIm1hcCIsImNoYXJpdHkiLCJpZCIsInN0YXRlIiwiY2F0ZWdvcnkiLCJmZWF0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7QUFDQSxNQUFNTyxHQUFHLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1RLEVBQUUsR0FBR1IsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFUyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1YsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1XLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JaLFFBQVEsQ0FBQyxFQUFELENBQWxDO0FBQ0EsUUFBTSxDQUFDYSxlQUFELEVBQWtCQyxrQkFBbEIsSUFBd0NkLFFBQVEsQ0FBQyxFQUFELENBQXREO0FBQ0EsTUFBSWUscUJBQXFCLEdBQUcsRUFBNUI7QUFFQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksK0JBQVosRUFBNENDLFNBQTVDLEVBQXVEQyxXQUF2RDtBQUNBbEIsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFDZixRQUFJbUIsTUFBTSxHQUFHLE1BQU07QUFDakJiLE1BQUFBLGFBQWEsQ0FBQ1csU0FBRCxDQUFiLENBQ0NHLElBREQsQ0FDT0MsR0FBRCxJQUFTO0FBQ2RDLFFBQUFBLGFBQWEsQ0FBQ0QsR0FBRCxDQUFiO0FBQ0EsT0FIRDtBQUtEZCxNQUFBQSxXQUFXLENBQUNXLFdBQUQsQ0FBWDtBQUNBLEtBUEQ7O0FBUUFDLElBQUFBLE1BQU07QUFDTixHQVZRLEVBVU4sRUFWTSxDQUFUOztBQVdBLFFBQU1HLGFBQWEsR0FBSUQsR0FBRCxJQUFTO0FBQzlCO0FBQ0EsVUFBTUUsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlSCxHQUFmLEVBQW1CO0FBQ2xCRSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0E7O0FBQ0QsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCYixNQUFBQSxxQkFBcUIsQ0FBQ1csSUFBdEIsQ0FBMkJKLEdBQUcsQ0FBQ08sSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQlQsR0FBRyxDQUFDVSxNQUEvQixDQUFELENBQTlCO0FBQ0E7O0FBQ0RsQixJQUFBQSxrQkFBa0IsQ0FBQ0MscUJBQUQsQ0FBbEI7QUFDQSxHQVhEOztBQVlDLE1BQUlrQixJQUFJLEdBQUdwQixlQUFlLENBQUNxQixHQUFoQixDQUFvQixDQUFDQyxPQUFELEVBQVNQLENBQVQsa0JBQzlCLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEdBQUcsRUFBRUE7QUFBWCxLQUNFTyxPQUFPLENBQUNDLEVBRFYsT0FDZUQsT0FBTyxDQUFDekIsSUFEdkIsT0FDOEJ5QixPQUFPLENBQUNFLEtBRHRDLE9BQzhDRixPQUFPLENBQUNHLFFBRHRELE9BQ2lFSCxPQUFPLENBQUNJLE9BRHpFLGVBRUMsb0JBQUMsT0FBRCxPQUZELENBRFUsQ0FBWDtBQU9ELHNCQUFRLG9CQUFDLElBQUQsUUFBT04sSUFBUCxDQUFSO0FBQ0EsQ0F6Q0Q7O0FBMkNBTyxNQUFNLENBQUNDLE9BQVAsR0FBaUJoQyxHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnaW5rLXRhYmxlJylcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dCwgTmV3bGluZX0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGNvbnN0IFtyYW5kb21DaGFyaXRpZXMsIHNldFJhbmRvbUNoYXJpdGllc10gPSB1c2VTdGF0ZShbXSlcblx0bGV0IHR3ZWx2ZVJhbmRvbUNoYXJpdGllcyA9IFtdXG5cblx0Y29uc29sZS5sb2coXCIqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlwiLGNoYXJpdGllcywgcHJvZmlsZUluZm8pXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0XHRcdCByZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0XHRcdCAudGhlbigocmVzKSA9PiB7XG5cdFx0XHRcdCBoYW5kbGVDaGFyaXR5KHJlcylcblx0XHRcdCB9KVxuXG5cdFx0XHRyZWFkUHJvZmlsZShwcm9maWxlSW5mbylcblx0XHR9XG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cdGNvbnN0IGhhbmRsZUNoYXJpdHkgPSAocmVzKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmVzKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0dHdlbHZlUmFuZG9tQ2hhcml0aWVzLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHR9XG5cdFx0c2V0UmFuZG9tQ2hhcml0aWVzKHR3ZWx2ZVJhbmRvbUNoYXJpdGllcylcblx0fVxuXHRcdGxldCB0ZXN0ID0gcmFuZG9tQ2hhcml0aWVzLm1hcCgoY2hhcml0eSxpKSA9PiAoXG5cdFx0XHQ8VGV4dCBrZXk9e2l9PlxuXHRcdFx0XHR7Y2hhcml0eS5pZH0ge2NoYXJpdHkubmFtZX0ge2NoYXJpdHkuc3RhdGV9IHtjaGFyaXR5LmNhdGVnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9UZXh0PlxuXHRcdCkpXG5cdFx0XG5cdHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=