'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    await readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      setRand5(JSON.stringify(res));
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {
      console.log(row);
      const rowItems = row.split(",");
      parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    } // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }

  };

  if (name) {
    myFunc(name); // console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZnVuIiwicGFyc2VkRGF0YSIsInJvdyIsImNvbnNvbGUiLCJsb2ciLCJyb3dJdGVtcyIsInNwbGl0IiwicHVzaCIsInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBO0FBQUQsSUFBYUQsT0FBTyxDQUFDLE9BQUQsQ0FBMUI7O0FBQ0EsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNHLEVBQUFBO0FBQUQsSUFBU0gsT0FBTyxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTUksR0FBRyxHQUFHSixPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNSyxFQUFFLEdBQUdMLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRU0sRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNQLE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNUSxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxJQUFJLEdBQUc7QUFBUixDQUFELEtBQXlCO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CVixRQUFRLENBQUMsRUFBRCxDQUFsQzs7QUFFQSxNQUFJVyxNQUFNLEdBQUcsTUFBT0gsSUFBUCxJQUFnQjtBQUM1QixVQUFNSCxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNMSSxJQURLLENBQ0NDLEdBQUQsSUFBUztBQUNkO0FBQ0FILE1BQUFBLFFBQVEsQ0FBQ0ksSUFBSSxDQUFDQyxTQUFMLENBQWVGLEdBQWYsQ0FBRCxDQUFSO0FBQ0FHLE1BQUFBLEdBQUc7QUFDSCxLQUxLLENBQU47QUFNQSxHQVBEOztBQVFBLFFBQU1BLEdBQUcsR0FBRyxZQUFZO0FBQ3ZCO0FBQ0EsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlVCxLQUFmLEVBQXFCO0FBQ3BCVSxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsR0FBWjtBQUNBLFlBQU1HLFFBQVEsR0FBR0gsR0FBRyxDQUFDSSxLQUFKLENBQVUsR0FBVixDQUFqQjtBQUNBTCxNQUFBQSxVQUFVLENBQUNNLElBQVgsQ0FBZ0JGLFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWUcsUUFBWixLQUF5QkgsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZRyxRQUFaLEVBQXpDO0FBQ0EsS0FQc0IsQ0FRdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FiRDs7QUFjQSxNQUFHaEIsSUFBSCxFQUFRO0FBQ1BHLElBQUFBLE1BQU0sQ0FBQ0gsSUFBRCxDQUFOLENBRE8sQ0FFUDtBQUNBOztBQUNELHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQWxDRDs7QUFvQ0FpQixNQUFNLENBQUNDLE9BQVAsR0FBaUJuQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZX0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0bGV0IG15RnVuYyA9IGFzeW5jIChuYW1lKSA9PiB7XG5cdFx0YXdhaXQgcmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdFx0XHRzZXRSYW5kNShKU09OLnN0cmluZ2lmeShyZXMpKVxuXHRcdFx0ZnVuKClcblx0XHR9KVxuXHR9XG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHRjb25zb2xlLmxvZyhyb3cpXG5cdFx0XHRjb25zdCByb3dJdGVtcyA9IHJvdy5zcGxpdChcIixcIik7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93SXRlbXNbMF0udG9TdHJpbmcoKSArIHJvd0l0ZW1zWzFdLnRvU3RyaW5nKCkpO1xuXHRcdH1cblx0XHQvLyBmb3IobGV0IHJvdyBvZiB0ZXh0Q29udGVudC5zcGxpdChcIlxcblwiKSl7XG5cdFx0Ly8gXHRjb25zdCByb3dJdGVtcyA9IHJvdy5zcGxpdChcIixcIik7XG5cdFx0Ly8gXHRwYXJzZWREYXRhLnB1c2gocm93SXRlbXNbMF0udG9TdHJpbmcoKSArIHJvd0l0ZW1zWzFdLnRvU3RyaW5nKCkpO1xuXHRcdC8vIH1cblx0XHRcblx0fVxuXHRpZihuYW1lKXtcblx0XHRteUZ1bmMobmFtZSlcblx0XHQvLyBjb25zb2xlLmxvZyhgY2hlY2tpbmcgc3RhdGUgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpfWApXG5cdH1cblx0cmV0dXJuIDxUZXh0PkhFUkUgPC9UZXh0PlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==