'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  // const [rand5, setRand5] = useState([])
  // let myFunc = async (name) => {
  // 	await readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(JSON.stringify(res))
  // 		fun()
  // 	})
  // }
  // const fun = async () => {
  // 	// console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
  // 	console.log("@@@@@@@@@@", JSON.stringify(rand5[50]))
  // }
  // if(name){
  // 	myFunc(name)
  // 	// console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  // }
  const N_TOTAL = 12;
  const N_MAX_STATE = 5;

  function pickCharities(charities, profile) {
    // TODO
    return [];
  }

  async function main() {
    // Input argiments
    const [,, charitiesPath, profilePath] = process.argv;
    const charities = await readCharities(charitiesPath);
    const profile = await readProfile(profilePath); // console.log(`charities ${charities}`)

    const charitiesToFeature = pickCharities(charities, profile); // Output result to standard out, one per line

    console.log(charitiesToFeature.join("\n"));
  }

  main();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwiTl9UT1RBTCIsIk5fTUFYX1NUQVRFIiwicGlja0NoYXJpdGllcyIsImNoYXJpdGllcyIsInByb2ZpbGUiLCJtYWluIiwiY2hhcml0aWVzUGF0aCIsInByb2ZpbGVQYXRoIiwicHJvY2VzcyIsImFyZ3YiLCJjaGFyaXRpZXNUb0ZlYXR1cmUiLCJjb25zb2xlIiwibG9nIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQTtBQUFELElBQWFELE9BQU8sQ0FBQyxPQUFELENBQTFCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRyxFQUFBQTtBQUFELElBQVNILE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTUssRUFBRSxHQUFHTCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVNLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUCxPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVEsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsUUFBTUMsT0FBTyxHQUFHLEVBQWhCO0FBQ0EsUUFBTUMsV0FBVyxHQUFHLENBQXBCOztBQUVBLFdBQVNDLGFBQVQsQ0FBdUJDLFNBQXZCLEVBQWtDQyxPQUFsQyxFQUEyQztBQUMzQztBQUNBLFdBQU8sRUFBUDtBQUNBOztBQUVELGlCQUFlQyxJQUFmLEdBQXNCO0FBQ3JCO0FBQ0EsVUFBTSxJQUFLQyxhQUFMLEVBQW9CQyxXQUFwQixJQUFtQ0MsT0FBTyxDQUFDQyxJQUFqRDtBQUVBLFVBQU1OLFNBQVMsR0FBRyxNQUFNUCxhQUFhLENBQUNVLGFBQUQsQ0FBckM7QUFDQSxVQUFNRixPQUFPLEdBQUcsTUFBTVAsV0FBVyxDQUFDVSxXQUFELENBQWpDLENBTHFCLENBTXJCOztBQUVBLFVBQU1HLGtCQUFrQixHQUFHUixhQUFhLENBQUNDLFNBQUQsRUFBWUMsT0FBWixDQUF4QyxDQVJxQixDQVVyQjs7QUFDQU8sSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlGLGtCQUFrQixDQUFDRyxJQUFuQixDQUF3QixJQUF4QixDQUFaO0FBQ0M7O0FBQ0RSLEVBQUFBLElBQUk7QUFDSixzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0EvQ0Q7O0FBaURBUyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZX0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHQvLyBjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0Ly8gbGV0IG15RnVuYyA9IGFzeW5jIChuYW1lKSA9PiB7XG5cdC8vIFx0YXdhaXQgcmVhZENoYXJpdGllcyhuYW1lKVxuXHQvLyBcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdC8vIFx0XHRzZXRSYW5kNShKU09OLnN0cmluZ2lmeShyZXMpKVxuXHQvLyBcdFx0ZnVuKClcblx0Ly8gXHR9KVxuXHQvLyB9XG5cdC8vIGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0Ly8gXHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHQvLyBcdGNvbnNvbGUubG9nKFwiQEBAQEBAQEBAQFwiLCBKU09OLnN0cmluZ2lmeShyYW5kNVs1MF0pKVxuXHQvLyB9XG5cdC8vIGlmKG5hbWUpe1xuXHQvLyBcdG15RnVuYyhuYW1lKVxuXHQvLyBcdC8vIGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCl9YClcblx0Ly8gfVxuXHRcblx0Y29uc3QgTl9UT1RBTCA9IDEyO1xuXHRjb25zdCBOX01BWF9TVEFURSA9IDU7XG5cblx0ZnVuY3Rpb24gcGlja0NoYXJpdGllcyhjaGFyaXRpZXMsIHByb2ZpbGUpIHtcblx0Ly8gVE9ET1xuXHRyZXR1cm4gW107XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG5cdC8vIElucHV0IGFyZ2ltZW50c1xuXHRjb25zdCBbLCAsIGNoYXJpdGllc1BhdGgsIHByb2ZpbGVQYXRoXSA9IHByb2Nlc3MuYXJndjtcblx0XG5cdGNvbnN0IGNoYXJpdGllcyA9IGF3YWl0IHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzUGF0aCk7XG5cdGNvbnN0IHByb2ZpbGUgPSBhd2FpdCByZWFkUHJvZmlsZShwcm9maWxlUGF0aCk7XG5cdC8vIGNvbnNvbGUubG9nKGBjaGFyaXRpZXMgJHtjaGFyaXRpZXN9YClcblxuXHRjb25zdCBjaGFyaXRpZXNUb0ZlYXR1cmUgPSBwaWNrQ2hhcml0aWVzKGNoYXJpdGllcywgcHJvZmlsZSk7XG5cblx0Ly8gT3V0cHV0IHJlc3VsdCB0byBzdGFuZGFyZCBvdXQsIG9uZSBwZXIgbGluZVxuXHRjb25zb2xlLmxvZyhjaGFyaXRpZXNUb0ZlYXR1cmUuam9pbihcIlxcblwiKSk7XG5cdH1cblx0bWFpbigpO1xuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19