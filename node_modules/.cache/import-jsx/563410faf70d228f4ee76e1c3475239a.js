'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    let myArr = [];
    await readCharities(name).then(res => {
      myArr.push(res);
      setRand5(res);
      fun();
    });
  };

  const fun = () => {
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    }

    twelve(); // console.log(`!!!!!!!!!!!!!!!!!! ${JSON.stringify(parsedData)}`)
    // console.log(`checking state ${Math.floor(Math.random() * parsedData.length)}`)
  };

  const twelve = parsedData => {
    for (let i = 0; i < 12; i++) {
      // let ind = Math.floor(Math.random() * parsedData.length)
      console.log(`looping ${i}`);
    }
  };

  if (name) {
    myFunc(name);
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwidHdlbHZlIiwiaSIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUE7QUFBRCxJQUFhRCxPQUFPLENBQUMsT0FBRCxDQUExQjs7QUFDQSxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0csRUFBQUE7QUFBRCxJQUFTSCxPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1LLEVBQUUsR0FBR0wsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1AsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1RLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JWLFFBQVEsQ0FBQyxFQUFELENBQWxDOztBQUVBLE1BQUlXLE1BQU0sR0FBRyxNQUFPSCxJQUFQLElBQWdCO0FBQzVCLFFBQUlJLEtBQUssR0FBRyxFQUFaO0FBQ0EsVUFBTVAsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDTEssSUFESyxDQUNDQyxHQUFELElBQVM7QUFDZEYsTUFBQUEsS0FBSyxDQUFDRyxJQUFOLENBQVdELEdBQVg7QUFDQUosTUFBQUEsUUFBUSxDQUFDSSxHQUFELENBQVI7QUFDQUUsTUFBQUEsR0FBRztBQUNILEtBTEssQ0FBTjtBQU1BLEdBUkQ7O0FBVUEsUUFBTUEsR0FBRyxHQUFHLE1BQU07QUFDakIsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlVCxLQUFmLEVBQXFCO0FBQ3BCUSxNQUFBQSxVQUFVLENBQUNGLElBQVgsQ0FBZ0JHLEdBQWhCO0FBQ0E7O0FBQ0RDLElBQUFBLE1BQU0sR0FMVyxDQU1qQjtBQUNBO0FBQ0EsR0FSRDs7QUFVQSxRQUFNQSxNQUFNLEdBQUlGLFVBQUQsSUFBZTtBQUM3QixTQUFLLElBQUlHLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUI7QUFDQUMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsV0FBVUYsQ0FBRSxFQUF6QjtBQUVBO0FBQ0QsR0FORDs7QUFPQSxNQUFHWixJQUFILEVBQVE7QUFDUEcsSUFBQUEsTUFBTSxDQUFDSCxJQUFELENBQU47QUFDQTs7QUFDRCxzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0F0Q0Q7O0FBd0NBZSxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZX0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0bGV0IG15RnVuYyA9IGFzeW5jIChuYW1lKSA9PiB7XG5cdFx0bGV0IG15QXJyID0gW11cblx0XHRhd2FpdCByZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0bXlBcnIucHVzaChyZXMpXG5cdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0XHRmdW4oKVxuXHRcdH0pXG5cdH1cblxuXHRjb25zdCBmdW4gPSAoKSA9PiB7XG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJhbmQ1KXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdHR3ZWx2ZSgpXG5cdFx0Ly8gY29uc29sZS5sb2coYCEhISEhISEhISEhISEhISEhISAke0pTT04uc3RyaW5naWZ5KHBhcnNlZERhdGEpfWApXG5cdFx0Ly8gY29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFyc2VkRGF0YS5sZW5ndGgpfWApXG5cdH1cblxuXHRjb25zdCB0d2VsdmUgPSAocGFyc2VkRGF0YSkgPT57XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHQvLyBsZXQgaW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFyc2VkRGF0YS5sZW5ndGgpXG5cdFx0XHRjb25zb2xlLmxvZyhgbG9vcGluZyAke2l9YClcblx0XHRcdFxuXHRcdH1cblx0fSBcblx0aWYobmFtZSl7XG5cdFx0bXlGdW5jKG5hbWUpXG5cdH1cblx0cmV0dXJuIDxUZXh0PkhFUkUgPC9UZXh0PlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==