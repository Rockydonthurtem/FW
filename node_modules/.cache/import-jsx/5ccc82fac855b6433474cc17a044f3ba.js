'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const N_TOTAL = 12;
  const N_MAX_STATE = 5;

  function pickCharities(charities, profile) {
    console.log(`charities ${charities}`);
    console.log(`profile ${profile}`);
    return [];
  }

  async function main() {
    // Input argiments
    const [,, charitiesPath, profilePath] = process.argv;
    const charities = await readCharities(charitiesPath);
    const profile = await readProfile(profilePath);
    const charitiesToFeature = pickCharities(charities, profile); // Output result to standard out, one per line

    console.log(charitiesToFeature.join("\n"));
  }

  main(); // const fun = () => {
  // 	const parsedData = [];
  // 	for(let row of rand5){
  // 		parsedData.push(row)
  // 	}
  // 	console.log(`looping`)
  // 	// for (let i = 0; i < 12; i++) {
  // 	// 	let ind = Math.floor(Math.random() * parsedData.length)
  // 	// }
  // }

  if (name) {
    myFunc(name);
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIk5fVE9UQUwiLCJOX01BWF9TVEFURSIsInBpY2tDaGFyaXRpZXMiLCJjaGFyaXRpZXMiLCJwcm9maWxlIiwiY29uc29sZSIsImxvZyIsIm1haW4iLCJjaGFyaXRpZXNQYXRoIiwicHJvZmlsZVBhdGgiLCJwcm9jZXNzIiwiYXJndiIsImNoYXJpdGllc1RvRmVhdHVyZSIsImpvaW4iLCJteUZ1bmMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUE7QUFBRCxJQUFhRCxPQUFPLENBQUMsT0FBRCxDQUExQjs7QUFDQSxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0csRUFBQUE7QUFBRCxJQUFTSCxPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1LLEVBQUUsR0FBR0wsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1AsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1RLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JWLFFBQVEsQ0FBQyxFQUFELENBQWxDO0FBRUEsUUFBTVcsT0FBTyxHQUFHLEVBQWhCO0FBQ0EsUUFBTUMsV0FBVyxHQUFHLENBQXBCOztBQUVBLFdBQVNDLGFBQVQsQ0FBdUJDLFNBQXZCLEVBQWtDQyxPQUFsQyxFQUEyQztBQUMxQ0MsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsYUFBWUgsU0FBVSxFQUFuQztBQUNBRSxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxXQUFVRixPQUFRLEVBQS9CO0FBQ0QsV0FBTyxFQUFQO0FBQ0M7O0FBQ0QsaUJBQWVHLElBQWYsR0FBc0I7QUFDckI7QUFDQSxVQUFNLElBQUtDLGFBQUwsRUFBb0JDLFdBQXBCLElBQW1DQyxPQUFPLENBQUNDLElBQWpEO0FBRUEsVUFBTVIsU0FBUyxHQUFHLE1BQU1ULGFBQWEsQ0FBQ2MsYUFBRCxDQUFyQztBQUNBLFVBQU1KLE9BQU8sR0FBRyxNQUFNVCxXQUFXLENBQUNjLFdBQUQsQ0FBakM7QUFFQSxVQUFNRyxrQkFBa0IsR0FBR1YsYUFBYSxDQUFDQyxTQUFELEVBQVlDLE9BQVosQ0FBeEMsQ0FQcUIsQ0FTckI7O0FBQ0FDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTSxrQkFBa0IsQ0FBQ0MsSUFBbkIsQ0FBd0IsSUFBeEIsQ0FBWjtBQUNFOztBQUNETixFQUFBQSxJQUFJLEdBM0I4QixDQTRCcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBR1YsSUFBSCxFQUFRO0FBQ1BpQixJQUFBQSxNQUFNLENBQUNqQixJQUFELENBQU47QUFDQTs7QUFDRCxzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0E1Q0Q7O0FBOENBa0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGV9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdGNvbnN0IE5fVE9UQUwgPSAxMjtcblx0Y29uc3QgTl9NQVhfU1RBVEUgPSA1O1xuXG5cdGZ1bmN0aW9uIHBpY2tDaGFyaXRpZXMoY2hhcml0aWVzLCBwcm9maWxlKSB7XG5cdFx0Y29uc29sZS5sb2coYGNoYXJpdGllcyAke2NoYXJpdGllc31gKVxuXHRcdGNvbnNvbGUubG9nKGBwcm9maWxlICR7cHJvZmlsZX1gKVxuXHRyZXR1cm4gW107XG5cdH1cblx0YXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcblx0XHQvLyBJbnB1dCBhcmdpbWVudHNcblx0XHRjb25zdCBbLCAsIGNoYXJpdGllc1BhdGgsIHByb2ZpbGVQYXRoXSA9IHByb2Nlc3MuYXJndjtcblx0ICBcblx0XHRjb25zdCBjaGFyaXRpZXMgPSBhd2FpdCByZWFkQ2hhcml0aWVzKGNoYXJpdGllc1BhdGgpO1xuXHRcdGNvbnN0IHByb2ZpbGUgPSBhd2FpdCByZWFkUHJvZmlsZShwcm9maWxlUGF0aCk7XG5cdCAgXG5cdFx0Y29uc3QgY2hhcml0aWVzVG9GZWF0dXJlID0gcGlja0NoYXJpdGllcyhjaGFyaXRpZXMsIHByb2ZpbGUpO1xuXHQgIFxuXHRcdC8vIE91dHB1dCByZXN1bHQgdG8gc3RhbmRhcmQgb3V0LCBvbmUgcGVyIGxpbmVcblx0XHRjb25zb2xlLmxvZyhjaGFyaXRpZXNUb0ZlYXR1cmUuam9pbihcIlxcblwiKSk7XG5cdCAgfVxuXHQgIG1haW4oKTtcblx0Ly8gY29uc3QgZnVuID0gKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0Ly8gXHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdC8vIFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHQvLyBcdH1cblx0Ly8gXHRjb25zb2xlLmxvZyhgbG9vcGluZ2ApXG5cblx0Ly8gXHQvLyBmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcblx0Ly8gXHQvLyBcdGxldCBpbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXJzZWREYXRhLmxlbmd0aClcblx0Ly8gXHQvLyB9XG5cdC8vIH1cblxuXHRpZihuYW1lKXtcblx0XHRteUZ1bmMobmFtZSlcblx0fVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19