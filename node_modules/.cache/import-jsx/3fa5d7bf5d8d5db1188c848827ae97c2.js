'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    let myArr = [];
    await readCharities(name).then(res => {
      myArr.push(res);
      setRand5(res);
    }).then(() => {
      fun();
    });
  };

  const fun = () => {
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    } // console.log(`!!!!!!!!!!!!!!!!!! ${JSON.stringify(parsedData)}`)
    // console.log(`checking state ${Math.floor(Math.random() * parsedData.length)}`)


    for (let i = 0; i < 11; i++) {
      let ind = Math.floor(Math.random() * parsedData.length);
      console.log(`looping ${i}`);
    }
  };

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwiaSIsImluZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUE7QUFBRCxJQUFhRCxPQUFPLENBQUMsT0FBRCxDQUExQjs7QUFDQSxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0csRUFBQUE7QUFBRCxJQUFTSCxPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1LLEVBQUUsR0FBR0wsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1AsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1RLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JWLFFBQVEsQ0FBQyxFQUFELENBQWxDOztBQUVBLE1BQUlXLE1BQU0sR0FBRyxNQUFPSCxJQUFQLElBQWdCO0FBQzVCLFFBQUlJLEtBQUssR0FBRyxFQUFaO0FBQ0EsVUFBTVAsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDTEssSUFESyxDQUNDQyxHQUFELElBQVM7QUFDZEYsTUFBQUEsS0FBSyxDQUFDRyxJQUFOLENBQVdELEdBQVg7QUFDQUosTUFBQUEsUUFBUSxDQUFDSSxHQUFELENBQVI7QUFDQSxLQUpLLEVBS0xELElBTEssQ0FLQSxNQUFNO0FBQ1hHLE1BQUFBLEdBQUc7QUFDSCxLQVBLLENBQU47QUFRQSxHQVZEOztBQVlBLFFBQU1BLEdBQUcsR0FBRyxNQUFNO0FBQ2pCLFVBQU1DLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZVQsS0FBZixFQUFxQjtBQUNwQlEsTUFBQUEsVUFBVSxDQUFDRixJQUFYLENBQWdCRyxHQUFoQjtBQUNBLEtBSmdCLENBS2pCO0FBQ0E7OztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUM1QixVQUFJQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JOLFVBQVUsQ0FBQ08sTUFBdEMsQ0FBVjtBQUNBQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxXQUFVUCxDQUFFLEVBQXpCO0FBRUE7QUFDRCxHQVpEOztBQWVBLHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQW5DRDs7QUFxQ0FRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlfSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHRsZXQgbXlGdW5jID0gYXN5bmMgKG5hbWUpID0+IHtcblx0XHRsZXQgbXlBcnIgPSBbXVxuXHRcdGF3YWl0IHJlYWRDaGFyaXRpZXMobmFtZSlcblx0XHQudGhlbigocmVzKSA9PiB7XG5cdFx0XHRteUFyci5wdXNoKHJlcylcblx0XHRcdHNldFJhbmQ1KHJlcylcblx0XHR9KVxuXHRcdC50aGVuKCgpID0+IHtcblx0XHRcdGZ1bigpXG5cdFx0fSlcblx0fVxuXG5cdGNvbnN0IGZ1biA9ICgpID0+IHtcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmFuZDUpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0Ly8gY29uc29sZS5sb2coYCEhISEhISEhISEhISEhISEhISAke0pTT04uc3RyaW5naWZ5KHBhcnNlZERhdGEpfWApXG5cdFx0Ly8gY29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFyc2VkRGF0YS5sZW5ndGgpfWApXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMTsgaSsrKSB7XG5cdFx0XHRsZXQgaW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFyc2VkRGF0YS5sZW5ndGgpXG5cdFx0XHRjb25zb2xlLmxvZyhgbG9vcGluZyAke2l9YClcblx0XHRcdFxuXHRcdH1cblx0fVxuXG5cdFxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19