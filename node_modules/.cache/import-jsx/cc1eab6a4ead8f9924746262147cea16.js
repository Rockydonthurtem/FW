'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = []; // useEffect(() => {
  // 	// let allCharities = []
  // 	// let getProfile = []
  // 	let myFunc = () => {
  // 		readCharities(charities)
  // 		.then((res) => {
  // 			allCharities.push(res)
  // 		})
  // 		readProfile(profileInfo)
  // 		.then((res) => {
  // 			getProfile.push(res)
  // 			console.log(`first${JSON.stringify(getProfile)}`)
  // 		})
  // 	}
  // 	myFunc()
  // }, [])

  let allCharities = [];
  let getProfile = [];
  const promise1 = readCharities(charities).then(res => {
    allCharities.push(res);
  });
  const promise2 = readProfile(profileInfo).then(res => {
    getProfile.push(res);
  });
  Promise.all([promise1, promise2]).then(values => {
    handleCharity(charityGroup, profileGroup);
  });

  const handleCharity = (charityGroup, profileGroup) => {
    console.log(`1 and 2 ${profileGroup}`);
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test); // return (<Text>HERE</Text>)
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJhbGxDaGFyaXRpZXMiLCJnZXRQcm9maWxlIiwicHJvbWlzZTEiLCJ0aGVuIiwicmVzIiwicHVzaCIsInByb21pc2UyIiwiUHJvbWlzZSIsImFsbCIsInZhbHVlcyIsImhhbmRsZUNoYXJpdHkiLCJjaGFyaXR5R3JvdXAiLCJwcm9maWxlR3JvdXAiLCJjb25zb2xlIiwibG9nIiwicGFyc2VkRGF0YSIsInJvdyIsInBpY2sxMiIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ0ZXN0IiwibWFwIiwiY2hhcml0eSIsImlkIiwibmFtZSIsInN0YXRlIiwiY2F0ZWdvcnkiLCJmZWF0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7QUFDQSxNQUFNTyxHQUFHLEdBQUdQLE9BQU8s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c0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgVGFibGUgPSByZXF1aXJlKCdpbmstdGFibGUnKVxuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0LCBOZXdsaW5lfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtjaGFyaXRpZXMsIHByb2ZpbGVJbmZvfSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0Y29uc3QgW3JhbmRvbUNoYXJpdGllcywgc2V0UmFuZG9tQ2hhcml0aWVzXSA9IHVzZVN0YXRlKFtdKVxuXHRsZXQgdHdlbHZlUmFuZG9tQ2hhcml0aWVzID0gW11cblxuXHQvLyB1c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdC8vIGxldCBhbGxDaGFyaXRpZXMgPSBbXVxuXHQvLyBcdC8vIGxldCBnZXRQcm9maWxlID0gW11cblx0Ly8gXHRsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHQvLyBcdFx0cmVhZENoYXJpdGllcyhjaGFyaXRpZXMpXG5cdC8vIFx0XHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHRcdGFsbENoYXJpdGllcy5wdXNoKHJlcylcblx0Ly8gXHRcdH0pXG5cdFx0XHRcblx0Ly8gXHRcdHJlYWRQcm9maWxlKHByb2ZpbGVJbmZvKVxuXHQvLyBcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0XHRnZXRQcm9maWxlLnB1c2gocmVzKVxuXHQvLyBcdFx0XHRjb25zb2xlLmxvZyhgZmlyc3Qke0pTT04uc3RyaW5naWZ5KGdldFByb2ZpbGUpfWApXG5cdC8vIFx0XHR9KVxuXHQvLyBcdH1cblx0Ly8gXHRteUZ1bmMoKVxuXHQvLyB9LCBbXSlcblxuXHRsZXQgYWxsQ2hhcml0aWVzID0gW11cblx0bGV0IGdldFByb2ZpbGUgPSBbXVxuXG5cdGNvbnN0IHByb21pc2UxID0gcmVhZENoYXJpdGllcyhjaGFyaXRpZXMpLnRoZW4oKHJlcykgPT4ge2FsbENoYXJpdGllcy5wdXNoKHJlcyl9KVxuXHRjb25zdCBwcm9taXNlMiA9IHJlYWRQcm9maWxlKHByb2ZpbGVJbmZvKS50aGVuKChyZXMpID0+IHtnZXRQcm9maWxlLnB1c2gocmVzKX0pXG5cdFByb21pc2UuYWxsKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKCh2YWx1ZXMpID0+IHtcblx0XHRoYW5kbGVDaGFyaXR5KGNoYXJpdHlHcm91cCwgcHJvZmlsZUdyb3VwKVxuXHQgIH0pO1xuXG5cblxuXG5cblxuXG5cblxuXHRjb25zdCBoYW5kbGVDaGFyaXR5ID0gKGNoYXJpdHlHcm91cCwgcHJvZmlsZUdyb3VwKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coYDEgYW5kIDIgJHtwcm9maWxlR3JvdXB9YClcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmVzKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0dHdlbHZlUmFuZG9tQ2hhcml0aWVzLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHR9XG5cdFx0c2V0UmFuZG9tQ2hhcml0aWVzKHR3ZWx2ZVJhbmRvbUNoYXJpdGllcylcblx0fVxuXHRcdGxldCB0ZXN0ID0gcmFuZG9tQ2hhcml0aWVzLm1hcCgoY2hhcml0eSxpKSA9PiAoXG5cdFx0XHQ8VGV4dCBrZXk9e2l9PlxuXHRcdFx0XHR7Y2hhcml0eS5pZH0ge2NoYXJpdHkubmFtZX0ge2NoYXJpdHkuc3RhdGV9IHtjaGFyaXR5LmNhdGVnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9UZXh0PlxuXHRcdCkpXG5cdFx0XG5cdHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcblx0Ly8gcmV0dXJuICg8VGV4dD5IRVJFPC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=