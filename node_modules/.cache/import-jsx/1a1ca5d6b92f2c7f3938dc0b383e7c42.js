'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = () => {
    readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      setRand5(JSON.stringify(res));
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row); // const rowItems = row;
      // parsedData.push(rowItems + rowItems);
    }

    console.log(parsedData); // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }
  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }


  myFunc();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZnVuIiwicGFyc2VkRGF0YSIsInJvdyIsInB1c2giLCJjb25zb2xlIiwibG9nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkYsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUcsS0FBSyxHQUFHSCxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNJLEVBQUFBO0FBQUQsSUFBU0osT0FBTyxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTUssR0FBRyxHQUFHTCxPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNTSxFQUFFLEdBQUdOLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRU8sRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNSLE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNUyxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxJQUFJLEdBQUc7QUFBUixDQUFELEtBQXlCO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxRQUFRLENBQUMsRUFBRCxDQUFsQzs7QUFFQSxNQUFJWSxNQUFNLEdBQUcsTUFBTTtBQUNsQk4sSUFBQUEsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDQ0ksSUFERCxDQUNPQyxHQUFELElBQVM7QUFDZDtBQUNBSCxNQUFBQSxRQUFRLENBQUNJLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixHQUFmLENBQUQsQ0FBUjtBQUNBLEtBSkQsRUFLQ0QsSUFMRCxDQUtNLE1BQU07QUFDWEksTUFBQUEsR0FBRztBQUNILEtBUEQ7QUFRQSxHQVREOztBQVdBLFFBQU1BLEdBQUcsR0FBRyxZQUFZO0FBQ3ZCO0FBQ0EsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlVCxLQUFmLEVBQXFCO0FBQ3BCUSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCLEVBRG9CLENBRXBCO0FBQ0E7QUFDQTs7QUFDREUsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlKLFVBQVosRUFSdUIsQ0FTdkI7QUFDQTtBQUNBO0FBQ0E7QUFFQSxHQWRELENBbEJvQyxDQWlDcEM7QUFDQTtBQUNBO0FBQ0E7OztBQUNBTixFQUFBQSxNQUFNO0FBQ04sc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBdkNEOztBQXlDQVcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCaEIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0XHRyZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0XHRcdHNldFJhbmQ1KEpTT04uc3RyaW5naWZ5KHJlcykpXG5cdFx0fSlcblx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRmdW4oKVxuXHRcdH0pXG5cdH1cblxuXHRjb25zdCBmdW4gPSBhc3luYyAoKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmFuZDUpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHRcdC8vIGNvbnN0IHJvd0l0ZW1zID0gcm93O1xuXHRcdFx0Ly8gcGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zICsgcm93SXRlbXMpO1xuXHRcdH1cblx0XHRjb25zb2xlLmxvZyhwYXJzZWREYXRhKVxuXHRcdC8vIGZvcihsZXQgcm93IG9mIHRleHRDb250ZW50LnNwbGl0KFwiXFxuXCIpKXtcblx0XHQvLyBcdGNvbnN0IHJvd0l0ZW1zID0gcm93LnNwbGl0KFwiLFwiKTtcblx0XHQvLyBcdHBhcnNlZERhdGEucHVzaChyb3dJdGVtc1swXS50b1N0cmluZygpICsgcm93SXRlbXNbMV0udG9TdHJpbmcoKSk7XG5cdFx0Ly8gfVxuXHRcdFxuXHR9XG5cdC8vIGlmKG5hbWUpe1xuXHQvLyBcdGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke25hbWV9YClcblx0Ly8gXHRteUZ1bmMobmFtZSlcblx0Ly8gfVxuXHRteUZ1bmMoKVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19