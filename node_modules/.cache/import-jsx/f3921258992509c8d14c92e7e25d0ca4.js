'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = []; // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = async () => {
      await readCharities(charities);
      await readProfile(profileInfo); // .then((res) => {
      // 	setRand5(res)
      // 	// handleCharity(res)
      // })
    };

    handleCharity();
    myFunc();
  }, []);

  const handleCharity = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsInJhbmRvbUNoYXJpdGllcyIsInNldFJhbmRvbUNoYXJpdGllcyIsInR3ZWx2ZVJhbmRvbUNoYXJpdGllcyIsIm15RnVuYyIsImNoYXJpdGllcyIsInByb2ZpbGVJbmZvIiwiaGFuZGxlQ2hhcml0eSIsInJlcyIsInBhcnNlZERhdGEiLCJyb3ciLCJwdXNoIiwicGljazEyIiwiaSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInRlc3QiLCJtYXAiLCJjaGFyaXR5IiwiaWQiLCJzdGF0ZSIsImNhdGVnb3J5IiwiZmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNFLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkgsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNLLEVBQUFBLElBQUQ7QUFBT0MsRUFBQUE7QUFBUCxJQUFrQk4sT0FBTyxDQUFDLEtBQUQsQ0FBL0I7O0FBQ0EsTUFBTU8sR0FBRyxHQUFHUCxPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNUSxFQUFFLEdBQUdSLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRVMsRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNWLE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNVyxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxJQUFJLEdBQUc7QUFBUixDQUFELEtBQXlCO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWixRQUFRLENBQUMsRUFBRCxDQUFsQztBQUNBLFFBQU0sQ0FBQ2EsZUFBRCxFQUFrQkMsa0JBQWxCLElBQXdDZCxRQUFRLENBQUMsRUFBRCxDQUF0RDtBQUNBLE1BQUllLHFCQUFxQixHQUFHLEVBQTVCLENBUG9DLENBUXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBZCxFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUVmLFFBQUllLE1BQU0sR0FBRyxZQUFXO0FBQ3RCLFlBQU1ULGFBQWEsQ0FBQ1UsU0FBRCxDQUFuQjtBQUNBLFlBQU1ULFdBQVcsQ0FBQ1UsV0FBRCxDQUFqQixDQUZzQixDQUd2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBUEQ7O0FBUUNDLElBQUFBLGFBQWE7QUFDZEgsSUFBQUEsTUFBTTtBQUNOLEdBWlEsRUFZTixFQVpNLENBQVQ7O0FBYUEsUUFBTUcsYUFBYSxHQUFJQyxHQUFELElBQVM7QUFDOUI7QUFDQSxVQUFNQyxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVGLEdBQWYsRUFBbUI7QUFDbEJDLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsR0FBaEI7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJWLE1BQUFBLHFCQUFxQixDQUFDUSxJQUF0QixDQUEyQkgsR0FBRyxDQUFDTSxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCUixHQUFHLENBQUNTLE1BQS9CLENBQUQsQ0FBOUI7QUFDQTs7QUFDRGYsSUFBQUEsa0JBQWtCLENBQUNDLHFCQUFELENBQWxCO0FBQ0EsR0FYRDs7QUFZQyxNQUFJZSxJQUFJLEdBQUdqQixlQUFlLENBQUNrQixHQUFoQixDQUFvQixDQUFDQyxPQUFELEVBQVNQLENBQVQsa0JBQzlCLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEdBQUcsRUFBRUE7QUFBWCxLQUNFTyxPQUFPLENBQUNDLEVBRFYsT0FDZUQsT0FBTyxDQUFDdEIsSUFEdkIsT0FDOEJzQixPQUFPLENBQUNFLEtBRHRDLE9BQzhDRixPQUFPLENBQUNHLFFBRHRELE9BQ2lFSCxPQUFPLENBQUNJLE9BRHpFLGVBRUMsb0JBQUMsT0FBRCxPQUZELENBRFUsQ0FBWDtBQU9ELHNCQUFRLG9CQUFDLElBQUQsUUFBT04sSUFBUCxDQUFSO0FBQ0EsQ0FuREQ7O0FBcURBTyxNQUFNLENBQUNDLE9BQVAsR0FBaUI3QixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnaW5rLXRhYmxlJylcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dCwgTmV3bGluZX0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGNvbnN0IFtyYW5kb21DaGFyaXRpZXMsIHNldFJhbmRvbUNoYXJpdGllc10gPSB1c2VTdGF0ZShbXSlcblx0bGV0IHR3ZWx2ZVJhbmRvbUNoYXJpdGllcyA9IFtdXG5cdC8vIGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdC8vIFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHQvLyBcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdC8vIFx0XHRzZXRSYW5kNShyZXMpXG5cdC8vIFx0fSlcblx0Ly8gXHQudGhlbigoKSA9PiB7XG5cdC8vIFx0XHRmdW4oKVxuXHQvLyBcdH0pXG5cdC8vIH1cblx0dXNlRWZmZWN0KCgpID0+IHtcblxuXHRcdGxldCBteUZ1bmMgPSBhc3luYygpID0+IHtcblx0XHRcdCBhd2FpdCByZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0XHRcdCBhd2FpdCByZWFkUHJvZmlsZShwcm9maWxlSW5mbylcblx0XHRcdC8vIC50aGVuKChyZXMpID0+IHtcblx0XHRcdC8vIFx0c2V0UmFuZDUocmVzKVxuXHRcdFx0Ly8gXHQvLyBoYW5kbGVDaGFyaXR5KHJlcylcblx0XHRcdC8vIH0pXG5cdFx0fVxuXHRcdCBoYW5kbGVDaGFyaXR5KClcblx0XHRteUZ1bmMoKVxuXHR9LCBbXSlcblx0Y29uc3QgaGFuZGxlQ2hhcml0eSA9IChyZXMpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByZXMpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0bGV0IHBpY2sxMiA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChyZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmVzLmxlbmd0aCldKVxuXHRcdH1cblx0XHRzZXRSYW5kb21DaGFyaXRpZXModHdlbHZlUmFuZG9tQ2hhcml0aWVzKVxuXHR9XG5cdFx0bGV0IHRlc3QgPSByYW5kb21DaGFyaXRpZXMubWFwKChjaGFyaXR5LGkpID0+IChcblx0XHRcdDxUZXh0IGtleT17aX0+XG5cdFx0XHRcdHtjaGFyaXR5LmlkfSB7Y2hhcml0eS5uYW1lfSB7Y2hhcml0eS5zdGF0ZX0ge2NoYXJpdHkuY2F0ZWdvcnl9IHtjaGFyaXR5LmZlYXR1cmV9XG5cdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHQ8L1RleHQ+XG5cdFx0KSlcblx0XHRcblx0cmV0dXJuICg8VGV4dD57dGVzdH08L1RleHQ+KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==