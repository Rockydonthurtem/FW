'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    let myArr = [];
    await readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      myArr.push(res);
      setRand5(myArr);
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    console.log("^^^^^^^^^^^^^^^^^^^", typeof rand5);
    const parsedData = [];

    for (let row in rand5) {
      const rowItems = row.split(",");
      parsedData.push(rowItems[0] + rowItems[1]);
      console.log(`row ${row}`);
      console.log(`rowItems ${rowItems}`);
      console.log(`parsedData ${parsedData}`);
    }
  };

  if (name) {
    myFunc(name); // console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJjb25zb2xlIiwibG9nIiwicGFyc2VkRGF0YSIsInJvdyIsInJvd0l0ZW1zIiwic3BsaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUE7QUFBRCxJQUFhRCxPQUFPLENBQUMsT0FBRCxDQUExQjs7QUFDQSxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0csRUFBQUE7QUFBRCxJQUFTSCxPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1LLEVBQUUsR0FBR0wsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1AsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1RLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JWLFFBQVEsQ0FBQyxFQUFELENBQWxDOztBQUVBLE1BQUlXLE1BQU0sR0FBRyxNQUFPSCxJQUFQLElBQWdCO0FBQzVCLFFBQUlJLEtBQUssR0FBRyxFQUFaO0FBQ0EsVUFBTVAsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDTEssSUFESyxDQUNDQyxHQUFELElBQVM7QUFDZDtBQUNBRixNQUFBQSxLQUFLLENBQUNHLElBQU4sQ0FBV0QsR0FBWDtBQUNBSixNQUFBQSxRQUFRLENBQUNFLEtBQUQsQ0FBUjtBQUNBLEtBTEssRUFNTEMsSUFOSyxDQU1BLE1BQU07QUFDWEcsTUFBQUEsR0FBRztBQUNILEtBUkssQ0FBTjtBQVNBLEdBWEQ7O0FBWUEsUUFBTUEsR0FBRyxHQUFHLFlBQVk7QUFDdkI7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQVosRUFBa0MsT0FBT1QsS0FBekM7QUFDQSxVQUFNVSxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVYLEtBQWYsRUFBcUI7QUFDcEIsWUFBTVksUUFBUSxHQUFHRCxHQUFHLENBQUNFLEtBQUosQ0FBVSxHQUFWLENBQWpCO0FBQ0FILE1BQUFBLFVBQVUsQ0FBQ0osSUFBWCxDQUFnQk0sUUFBUSxDQUFDLENBQUQsQ0FBUixHQUFjQSxRQUFRLENBQUMsQ0FBRCxDQUF0QztBQUNBSixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxPQUFNRSxHQUFJLEVBQXZCO0FBQ0FILE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFlBQVdHLFFBQVMsRUFBakM7QUFDQUosTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsY0FBYUMsVUFBVyxFQUFyQztBQUNBO0FBQ0QsR0FYRDs7QUFZQSxNQUFHWCxJQUFILEVBQVE7QUFDUEcsSUFBQUEsTUFBTSxDQUFDSCxJQUFELENBQU4sQ0FETyxDQUVQO0FBQ0E7O0FBQ0Qsc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBcENEOztBQXNDQWUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGV9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdGxldCBteUZ1bmMgPSBhc3luYyAobmFtZSkgPT4ge1xuXHRcdGxldCBteUFyciA9IFtdXG5cdFx0YXdhaXQgcmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdFx0XHRteUFyci5wdXNoKHJlcylcblx0XHRcdHNldFJhbmQ1KG15QXJyKVxuXHRcdH0pXG5cdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0ZnVuKClcblx0XHR9KVxuXHR9XG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnNvbGUubG9nKFwiXl5eXl5eXl5eXl5eXl5eXl5eXlwiLHR5cGVvZihyYW5kNSkpXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IGluIHJhbmQ1KXtcblx0XHRcdGNvbnN0IHJvd0l0ZW1zID0gcm93LnNwbGl0KFwiLFwiKTtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3dJdGVtc1swXSArIHJvd0l0ZW1zWzFdKTtcblx0XHRcdGNvbnNvbGUubG9nKGByb3cgJHtyb3d9YClcblx0XHRcdGNvbnNvbGUubG9nKGByb3dJdGVtcyAke3Jvd0l0ZW1zfWApXG5cdFx0XHRjb25zb2xlLmxvZyhgcGFyc2VkRGF0YSAke3BhcnNlZERhdGF9YClcblx0XHR9XG5cdH1cblx0aWYobmFtZSl7XG5cdFx0bXlGdW5jKG5hbWUpXG5cdFx0Ly8gY29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKX1gKVxuXHR9XG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=