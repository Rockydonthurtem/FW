'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = (charities, profileInfo) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  console.log(`)))))))) ${charities}`);
  useEffect(() => {
    let myFunc = () => {
      readCharities(charities).then(res => {
        handleCharity(res);
      }); // readProfile(profileInfo)
    };

    myFunc();
  }, []);

  const handleCharity = res => {
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  }; // let test = randomCharities.map((charity,i) => (
  // 	<Text key={i}>
  // 		{charity.id} {charity.name} {charity.state} {charity.category} {charity.feature}
  // 		<Newline />
  // 	</Text>
  // ))
  // return (<Text>{test}</Text>)


  return /*#__PURE__*/React.createElement(Text, null, "HERE");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJjb25zb2xlIiwibG9nIiwibXlGdW5jIiwidGhlbiIsInJlcyIsImhhbmRsZUNoYXJpdHkiLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRSxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JILE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQSxJQUFEO0FBQU9DLEVBQUFBO0FBQVAsSUFBa0JOLE9BQU8sQ0FBQyxLQUFELENBQS9COztBQUNBLE1BQU1PLEdBQUcsR0FBR1AsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTVEsRUFBRSxHQUFHUixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVTLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDVixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVcsR0FBRyxHQUFHLENBQUNDLFNBQUQsRUFBWUMsV0FBWixLQUE0QjtBQUN2QztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQmIsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFDQSxRQUFNLENBQUNjLGVBQUQsRUFBa0JDLGtCQUFsQixJQUF3Q2YsUUFBUSxDQUFDLEVBQUQsQ0FBdEQ7QUFDQSxNQUFJZ0IscUJBQXFCLEdBQUcsRUFBNUI7QUFFQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsWUFBV1IsU0FBVSxFQUFsQztBQUNBVCxFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUNmLFFBQUlrQixNQUFNLEdBQUcsTUFBTTtBQUNsQlosTUFBQUEsYUFBYSxDQUFDRyxTQUFELENBQWIsQ0FDRVUsSUFERixDQUNRQyxHQUFELElBQVM7QUFDZEMsUUFBQUEsYUFBYSxDQUFDRCxHQUFELENBQWI7QUFDQSxPQUhGLEVBRGtCLENBTWxCO0FBQ0EsS0FQRDs7QUFRQUYsSUFBQUEsTUFBTTtBQUNOLEdBVlEsRUFVTixFQVZNLENBQVQ7O0FBV0EsUUFBTUcsYUFBYSxHQUFJRCxHQUFELElBQVM7QUFDOUIsVUFBTUUsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlSCxHQUFmLEVBQW1CO0FBQ2xCRSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0E7O0FBQ0QsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCWCxNQUFBQSxxQkFBcUIsQ0FBQ1MsSUFBdEIsQ0FBMkJKLEdBQUcsQ0FBQ08sSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQlQsR0FBRyxDQUFDVSxNQUEvQixDQUFELENBQTlCO0FBQ0E7O0FBQ0RoQixJQUFBQSxrQkFBa0IsQ0FBQ0MscUJBQUQsQ0FBbEI7QUFDQSxHQVZELENBckJ1QyxDQWdDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUQ7OztBQUNBLHNCQUFRLG9CQUFDLElBQUQsZUFBUjtBQUNBLENBekNEOztBQTJDQWdCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgVGFibGUgPSByZXF1aXJlKCdpbmstdGFibGUnKVxuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0LCBOZXdsaW5lfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKGNoYXJpdGllcywgcHJvZmlsZUluZm8pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGNvbnN0IFtyYW5kb21DaGFyaXRpZXMsIHNldFJhbmRvbUNoYXJpdGllc10gPSB1c2VTdGF0ZShbXSlcblx0bGV0IHR3ZWx2ZVJhbmRvbUNoYXJpdGllcyA9IFtdXG5cblx0Y29uc29sZS5sb2coYCkpKSkpKSkpICR7Y2hhcml0aWVzfWApXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0XHRcdHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzKVxuXHRcdFx0IC50aGVuKChyZXMpID0+IHtcblx0XHRcdFx0IGhhbmRsZUNoYXJpdHkocmVzKVxuXHRcdFx0IH0pXG5cblx0XHRcdC8vIHJlYWRQcm9maWxlKHByb2ZpbGVJbmZvKVxuXHRcdH1cblx0XHRteUZ1bmMoKVxuXHR9LCBbXSlcblx0Y29uc3QgaGFuZGxlQ2hhcml0eSA9IChyZXMpID0+IHtcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmVzKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0dHdlbHZlUmFuZG9tQ2hhcml0aWVzLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHR9XG5cdFx0c2V0UmFuZG9tQ2hhcml0aWVzKHR3ZWx2ZVJhbmRvbUNoYXJpdGllcylcblx0fVxuXHRcdC8vIGxldCB0ZXN0ID0gcmFuZG9tQ2hhcml0aWVzLm1hcCgoY2hhcml0eSxpKSA9PiAoXG5cdFx0Ly8gXHQ8VGV4dCBrZXk9e2l9PlxuXHRcdC8vIFx0XHR7Y2hhcml0eS5pZH0ge2NoYXJpdHkubmFtZX0ge2NoYXJpdHkuc3RhdGV9IHtjaGFyaXR5LmNhdGVnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdC8vIFx0XHQ8TmV3bGluZSAvPlxuXHRcdC8vIFx0PC9UZXh0PlxuXHRcdC8vICkpXG5cdFx0XG5cdC8vIHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcblx0cmV0dXJuICg8VGV4dD5IRVJFPC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=