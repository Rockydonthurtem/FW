'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  useEffect(() => {
    let myFunc = charities => {
      readCharities(charities).then(res => {
        handleCharity(res);
      });
      readProfile(profileInfo);
    };

    myFunc(charities);
  }, []);

  const handleCharity = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsInJhbmRvbUNoYXJpdGllcyIsInNldFJhbmRvbUNoYXJpdGllcyIsInR3ZWx2ZVJhbmRvbUNoYXJpdGllcyIsIm15RnVuYyIsImNoYXJpdGllcyIsInRoZW4iLCJyZXMiLCJoYW5kbGVDaGFyaXR5IiwicHJvZmlsZUluZm8iLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ0ZXN0IiwibWFwIiwiY2hhcml0eSIsImlkIiwic3RhdGUiLCJjYXRlZ29yeSIsImZlYXR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRSxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JILE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQSxJQUFEO0FBQU9DLEVBQUFBO0FBQVAsSUFBa0JOLE9BQU8sQ0FBQyxLQUFELENBQS9COztBQUNBLE1BQU1PLEdBQUcsR0FBR1AsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTVEsRUFBRSxHQUFHUixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVTLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDVixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVcsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlosUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFDQSxRQUFNLENBQUNhLGVBQUQsRUFBa0JDLGtCQUFsQixJQUF3Q2QsUUFBUSxDQUFDLEVBQUQsQ0FBdEQ7QUFDQSxNQUFJZSxxQkFBcUIsR0FBRyxFQUE1QjtBQUVBZCxFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUVmLFFBQUllLE1BQU0sR0FBSUMsU0FBRCxJQUFlO0FBQzFCVixNQUFBQSxhQUFhLENBQUNVLFNBQUQsQ0FBYixDQUNDQyxJQURELENBQ09DLEdBQUQsSUFBUztBQUNkQyxRQUFBQSxhQUFhLENBQUNELEdBQUQsQ0FBYjtBQUNBLE9BSEQ7QUFLRFgsTUFBQUEsV0FBVyxDQUFDYSxXQUFELENBQVg7QUFDQSxLQVBEOztBQVFBTCxJQUFBQSxNQUFNLENBQUNDLFNBQUQsQ0FBTjtBQUNBLEdBWFEsRUFXTixFQVhNLENBQVQ7O0FBWUEsUUFBTUcsYUFBYSxHQUFJRCxHQUFELElBQVM7QUFDOUI7QUFDQSxVQUFNRyxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVKLEdBQWYsRUFBbUI7QUFDbEJHLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsR0FBaEI7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJYLE1BQUFBLHFCQUFxQixDQUFDUyxJQUF0QixDQUEyQkwsR0FBRyxDQUFDUSxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCVixHQUFHLENBQUNXLE1BQS9CLENBQUQsQ0FBOUI7QUFDQTs7QUFDRGhCLElBQUFBLGtCQUFrQixDQUFDQyxxQkFBRCxDQUFsQjtBQUNBLEdBWEQ7O0FBWUMsTUFBSWdCLElBQUksR0FBR2xCLGVBQWUsQ0FBQ21CLEdBQWhCLENBQW9CLENBQUNDLE9BQUQsRUFBU1AsQ0FBVCxrQkFDOUIsb0JBQUMsSUFBRDtBQUFNLElBQUEsR0FBRyxFQUFFQTtBQUFYLEtBQ0VPLE9BQU8sQ0FBQ0MsRUFEVixPQUNlRCxPQUFPLENBQUN2QixJQUR2QixPQUM4QnVCLE9BQU8sQ0FBQ0UsS0FEdEMsT0FDOENGLE9BQU8sQ0FBQ0csUUFEdEQsT0FDaUVILE9BQU8sQ0FBQ0ksT0FEekUsZUFFQyxvQkFBQyxPQUFELE9BRkQsQ0FEVSxDQUFYO0FBT0Qsc0JBQVEsb0JBQUMsSUFBRCxRQUFPTixJQUFQLENBQVI7QUFDQSxDQXpDRDs7QUEyQ0FPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjlCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgVGFibGUgPSByZXF1aXJlKCdpbmstdGFibGUnKVxuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0LCBOZXdsaW5lfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0Y29uc3QgW3JhbmRvbUNoYXJpdGllcywgc2V0UmFuZG9tQ2hhcml0aWVzXSA9IHVzZVN0YXRlKFtdKVxuXHRsZXQgdHdlbHZlUmFuZG9tQ2hhcml0aWVzID0gW11cblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXG5cdFx0bGV0IG15RnVuYyA9IChjaGFyaXRpZXMpID0+IHtcblx0XHRcdCByZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0XHRcdCAudGhlbigocmVzKSA9PiB7XG5cdFx0XHRcdCBoYW5kbGVDaGFyaXR5KHJlcylcblx0XHRcdCB9KVxuXG5cdFx0XHRyZWFkUHJvZmlsZShwcm9maWxlSW5mbylcblx0XHR9XG5cdFx0bXlGdW5jKGNoYXJpdGllcylcblx0fSwgW10pXG5cdGNvbnN0IGhhbmRsZUNoYXJpdHkgPSAocmVzKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmVzKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0dHdlbHZlUmFuZG9tQ2hhcml0aWVzLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHR9XG5cdFx0c2V0UmFuZG9tQ2hhcml0aWVzKHR3ZWx2ZVJhbmRvbUNoYXJpdGllcylcblx0fVxuXHRcdGxldCB0ZXN0ID0gcmFuZG9tQ2hhcml0aWVzLm1hcCgoY2hhcml0eSxpKSA9PiAoXG5cdFx0XHQ8VGV4dCBrZXk9e2l9PlxuXHRcdFx0XHR7Y2hhcml0eS5pZH0ge2NoYXJpdHkubmFtZX0ge2NoYXJpdHkuc3RhdGV9IHtjaGFyaXR5LmNhdGVnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9UZXh0PlxuXHRcdCkpXG5cdFx0XG5cdHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=