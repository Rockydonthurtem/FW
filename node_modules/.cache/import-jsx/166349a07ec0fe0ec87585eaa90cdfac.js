'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = (charities, profileInfo) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  console.log("*****************************", charities, profileInfo);
  useEffect(() => {
    let myFunc = () => {
      readCharities(charities).then(res => {
        handleCharity(res);
      });
      readProfile(profileInfo);
    };

    myFunc();
  }, []);

  const handleCharity = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJjb25zb2xlIiwibG9nIiwibXlGdW5jIiwidGhlbiIsInJlcyIsImhhbmRsZUNoYXJpdHkiLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ0ZXN0IiwibWFwIiwiY2hhcml0eSIsImlkIiwibmFtZSIsInN0YXRlIiwiY2F0ZWdvcnkiLCJmZWF0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7QUFDQSxNQUFNTyxHQUFHLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1RLEVBQUUsR0FBR1IsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFUyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1YsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1XLEdBQUcsR0FBRyxDQUFDQyxTQUFELEVBQVlDLFdBQVosS0FBNEI7QUFDdkM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JiLFFBQVEsQ0FBQyxFQUFELENBQWxDO0FBQ0EsUUFBTSxDQUFDYyxlQUFELEVBQWtCQyxrQkFBbEIsSUFBd0NmLFFBQVEsQ0FBQyxFQUFELENBQXREO0FBQ0EsTUFBSWdCLHFCQUFxQixHQUFHLEVBQTVCO0FBRUFDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLCtCQUFaLEVBQTRDUixTQUE1QyxFQUF1REMsV0FBdkQ7QUFDQVYsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFDZixRQUFJa0IsTUFBTSxHQUFHLE1BQU07QUFDakJaLE1BQUFBLGFBQWEsQ0FBQ0csU0FBRCxDQUFiLENBQ0NVLElBREQsQ0FDT0MsR0FBRCxJQUFTO0FBQ2RDLFFBQUFBLGFBQWEsQ0FBQ0QsR0FBRCxDQUFiO0FBQ0EsT0FIRDtBQUtEYixNQUFBQSxXQUFXLENBQUNHLFdBQUQsQ0FBWDtBQUNBLEtBUEQ7O0FBUUFRLElBQUFBLE1BQU07QUFDTixHQVZRLEVBVU4sRUFWTSxDQUFUOztBQVdBLFFBQU1HLGFBQWEsR0FBSUQsR0FBRCxJQUFTO0FBQzlCO0FBQ0EsVUFBTUUsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlSCxHQUFmLEVBQW1CO0FBQ2xCRSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0E7O0FBQ0QsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCWCxNQUFBQSxxQkFBcUIsQ0FBQ1MsSUFBdEIsQ0FBMkJKLEdBQUcsQ0FBQ08sSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQlQsR0FBRyxDQUFDVSxNQUEvQixDQUFELENBQTlCO0FBQ0E7O0FBQ0RoQixJQUFBQSxrQkFBa0IsQ0FBQ0MscUJBQUQsQ0FBbEI7QUFDQSxHQVhEOztBQVlDLE1BQUlnQixJQUFJLEdBQUdsQixlQUFlLENBQUNtQixHQUFoQixDQUFvQixDQUFDQyxPQUFELEVBQVNQLENBQVQsa0JBQzlCLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEdBQUcsRUFBRUE7QUFBWCxLQUNFTyxPQUFPLENBQUNDLEVBRFYsT0FDZUQsT0FBTyxDQUFDRSxJQUR2QixPQUM4QkYsT0FBTyxDQUFDRyxLQUR0QyxPQUM4Q0gsT0FBTyxDQUFDSSxRQUR0RCxPQUNpRUosT0FBTyxDQUFDSyxPQUR6RSxlQUVDLG9CQUFDLE9BQUQsT0FGRCxDQURVLENBQVg7QUFPRCxzQkFBUSxvQkFBQyxJQUFELFFBQU9QLElBQVAsQ0FBUjtBQUNBLENBekNEOztBQTJDQVEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCaEMsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJ2luay10YWJsZScpXG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHQsIE5ld2xpbmV9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoY2hhcml0aWVzLCBwcm9maWxlSW5mbykgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0Y29uc3QgW3JhbmRvbUNoYXJpdGllcywgc2V0UmFuZG9tQ2hhcml0aWVzXSA9IHVzZVN0YXRlKFtdKVxuXHRsZXQgdHdlbHZlUmFuZG9tQ2hhcml0aWVzID0gW11cblxuXHRjb25zb2xlLmxvZyhcIioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXCIsY2hhcml0aWVzLCBwcm9maWxlSW5mbylcblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHRcdFx0IHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzKVxuXHRcdFx0IC50aGVuKChyZXMpID0+IHtcblx0XHRcdFx0IGhhbmRsZUNoYXJpdHkocmVzKVxuXHRcdFx0IH0pXG5cblx0XHRcdHJlYWRQcm9maWxlKHByb2ZpbGVJbmZvKVxuXHRcdH1cblx0XHRteUZ1bmMoKVxuXHR9LCBbXSlcblx0Y29uc3QgaGFuZGxlQ2hhcml0eSA9IChyZXMpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByZXMpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0bGV0IHBpY2sxMiA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChyZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmVzLmxlbmd0aCldKVxuXHRcdH1cblx0XHRzZXRSYW5kb21DaGFyaXRpZXModHdlbHZlUmFuZG9tQ2hhcml0aWVzKVxuXHR9XG5cdFx0bGV0IHRlc3QgPSByYW5kb21DaGFyaXRpZXMubWFwKChjaGFyaXR5LGkpID0+IChcblx0XHRcdDxUZXh0IGtleT17aX0+XG5cdFx0XHRcdHtjaGFyaXR5LmlkfSB7Y2hhcml0eS5uYW1lfSB7Y2hhcml0eS5zdGF0ZX0ge2NoYXJpdHkuY2F0ZWdvcnl9IHtjaGFyaXR5LmZlYXR1cmV9XG5cdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHQ8L1RleHQ+XG5cdFx0KSlcblx0XHRcblx0cmV0dXJuICg8VGV4dD57dGVzdH08L1RleHQ+KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==