'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  let hasAniamlRelated = [];
  let charitiesToSelect = "";
  useEffect(() => {
    // 	// let allCharities = []
    // 	// let getProfile = []
    // 	let myFunc = () => {
    // 		readCharities(charities)
    // 		.then((res) => {
    // 			allCharities.push(res)
    // 		})
    // 		readProfile(profileInfo)
    // 		.then((res) => {
    // 			getProfile.push(res)
    // 		})
    // 	}
    // 	myFunc()
    let allCharities = [];
    let getProfile = "";
    const promise1 = readCharities(charities).then(res => {
      allCharities.push(res);
    });
    const promise2 = readProfile(profileInfo).then(res => {
      getProfile = res;
    });
    Promise.all([promise1, promise2]).then(values => {
      handleCharity(allCharities, getProfile);
    });
  }, []);

  const handleCharity = (charityGroup, profileGroup) => {
    charityGroup = charityGroup.flat();
    const parsedData = [];

    for (let row of charityGroup) {
      parsedData.push(row);
    }

    let countAnimalRelated = 0;
    let newAnimalArr = "";

    for (let j = 0; j < charityGroup.length; j++) {
      let animalRandomIndex = Math.floor(Math.random() * charityGroup.length);

      if (countAnimalRelated < 4) {
        if (charityGroup[animalRandomIndex].category == 'ANIMAL_RELATED') {
          hasAniamlRelated.push(charityGroup.splice(animalRandomIndex, 1));
          countAnimalRelated = countAnimalRelated + 1;
        }
      }
    }

    console.log(hasAniamlRelated.length);
    let randomIndex = Math.floor(Math.random() * charityGroup.length);
    let maxLength = 12 - hasAniamlRelated.length;

    for (let i = 0; i < maxLength; i++) {
      let count = 0;

      if (profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()) {
        count = count + 1;
      } // if(count < 5 && profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()){continue;}


      if (count < 5 && profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()) {
        continue;
      }

      twelveRandomCharities.push(charityGroup[randomIndex]);
    }

    setRandomCharities(twelveRandomCharities); // console.log(`twelveRandomCharities ${twelveRandomCharities.length}`)
    // console.log(`hasAniamlRelated ${hasAniamlRelated.length}`)

    charitiesToSelect = [...twelveRandomCharities, ...hasAniamlRelated];
    console.log(`cha ${charitiesToSelect}`);
  }; // 	let test = charitiesToSelect.map((charity,i) => (
  // 		<Text key={i}>
  // 			{charity.id} {charity.name} {charity.state} {charity.category} {charity.feature}
  // 			<Newline />
  // 		</Text>
  // 	))
  // return (<Text>{test}</Text>)


  return /*#__PURE__*/React.createElement(Text, null, "HERE");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,