'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = () => {
    readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      setRand5(JSON.stringify(res));
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {// console.log(row)
      // const rowItems = row;
      // parsedData.push(rowItems + rowItems);
    } // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }

  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }


  myFunc();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZnVuIiwicGFyc2VkRGF0YSIsInJvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JGLE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSSxFQUFBQTtBQUFELElBQVNKLE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1LLEdBQUcsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTU0sRUFBRSxHQUFHTixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVPLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVMsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlgsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7O0FBRUEsTUFBSVksTUFBTSxHQUFHLE1BQU07QUFDbEJOLElBQUFBLGFBQWEsQ0FBQ0csSUFBRCxDQUFiLENBQ0NJLElBREQsQ0FDT0MsR0FBRCxJQUFTO0FBQ2Q7QUFDQUgsTUFBQUEsUUFBUSxDQUFDSSxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsR0FBZixDQUFELENBQVI7QUFDQSxLQUpELEVBS0NELElBTEQsQ0FLTSxNQUFNO0FBQ1hJLE1BQUFBLEdBQUc7QUFDSCxLQVBEO0FBUUEsR0FURDs7QUFXQSxRQUFNQSxHQUFHLEdBQUcsWUFBWTtBQUN2QjtBQUNBLFVBQU1DLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZVQsS0FBZixFQUFxQixDQUNwQjtBQUNBO0FBQ0E7QUFDQSxLQVBzQixDQVF2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQWJELENBbEJvQyxDQWdDcEM7QUFDQTtBQUNBO0FBQ0E7OztBQUNBRSxFQUFBQSxNQUFNO0FBQ04sc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBdENEOztBQXdDQVEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCYixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHRsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHRcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0XHQudGhlbigocmVzKSA9PiB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0c2V0UmFuZDUoSlNPTi5zdHJpbmdpZnkocmVzKSlcblx0XHR9KVxuXHRcdC50aGVuKCgpID0+IHtcblx0XHRcdGZ1bigpXG5cdFx0fSlcblx0fVxuXG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhyb3cpXG5cdFx0XHQvLyBjb25zdCByb3dJdGVtcyA9IHJvdztcblx0XHRcdC8vIHBhcnNlZERhdGEucHVzaChyb3dJdGVtcyArIHJvd0l0ZW1zKTtcblx0XHR9XG5cdFx0Ly8gZm9yKGxldCByb3cgb2YgdGV4dENvbnRlbnQuc3BsaXQoXCJcXG5cIikpe1xuXHRcdC8vIFx0Y29uc3Qgcm93SXRlbXMgPSByb3cuc3BsaXQoXCIsXCIpO1xuXHRcdC8vIFx0cGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zWzBdLnRvU3RyaW5nKCkgKyByb3dJdGVtc1sxXS50b1N0cmluZygpKTtcblx0XHQvLyB9XG5cdFx0XG5cdH1cblx0Ly8gaWYobmFtZSl7XG5cdC8vIFx0Y29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7bmFtZX1gKVxuXHQvLyBcdG15RnVuYyhuYW1lKVxuXHQvLyB9XG5cdG15RnVuYygpXG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=