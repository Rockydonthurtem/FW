'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = []; // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = async () => {
      a = await readCharities(charities);
      await readProfile(profileInfo); // .then((res) => {
      // 	setRand5(res)
      // 	// handleCharity(res)
      // })
    };

    handleCharity(a);
    myFunc();
  }, []);

  const handleCharity = a => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of a) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsInJhbmRvbUNoYXJpdGllcyIsInNldFJhbmRvbUNoYXJpdGllcyIsInR3ZWx2ZVJhbmRvbUNoYXJpdGllcyIsIm15RnVuYyIsImEiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsImhhbmRsZUNoYXJpdHkiLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJyZXMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ0ZXN0IiwibWFwIiwiY2hhcml0eSIsImlkIiwic3RhdGUiLCJjYXRlZ29yeSIsImZlYXR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRSxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JILE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQSxJQUFEO0FBQU9DLEVBQUFBO0FBQVAsSUFBa0JOLE9BQU8sQ0FBQyxLQUFELENBQS9COztBQUNBLE1BQU1PLEdBQUcsR0FBR1AsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTVEsRUFBRSxHQUFHUixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVTLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDVixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVcsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlosUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFDQSxRQUFNLENBQUNhLGVBQUQsRUFBa0JDLGtCQUFsQixJQUF3Q2QsUUFBUSxDQUFDLEVBQUQsQ0FBdEQ7QUFDQSxNQUFJZSxxQkFBcUIsR0FBRyxFQUE1QixDQVBvQyxDQVFwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQWQsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFFZixRQUFJZSxNQUFNLEdBQUcsWUFBVztBQUN0QkMsTUFBQUEsQ0FBQyxHQUFHLE1BQU1WLGFBQWEsQ0FBQ1csU0FBRCxDQUF2QjtBQUNBLFlBQU1WLFdBQVcsQ0FBQ1csV0FBRCxDQUFqQixDQUZzQixDQUd2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBUEQ7O0FBUUNDLElBQUFBLGFBQWEsQ0FBQ0gsQ0FBRCxDQUFiO0FBQ0RELElBQUFBLE1BQU07QUFDTixHQVpRLEVBWU4sRUFaTSxDQUFUOztBQWFBLFFBQU1JLGFBQWEsR0FBSUgsQ0FBRCxJQUFPO0FBQzVCO0FBQ0EsVUFBTUksVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlTCxDQUFmLEVBQWlCO0FBQ2hCSSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0E7O0FBQ0QsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCVixNQUFBQSxxQkFBcUIsQ0FBQ1EsSUFBdEIsQ0FBMkJHLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQkgsR0FBRyxDQUFDSSxNQUEvQixDQUFELENBQTlCO0FBQ0E7O0FBQ0RoQixJQUFBQSxrQkFBa0IsQ0FBQ0MscUJBQUQsQ0FBbEI7QUFDQSxHQVhEOztBQVlDLE1BQUlnQixJQUFJLEdBQUdsQixlQUFlLENBQUNtQixHQUFoQixDQUFvQixDQUFDQyxPQUFELEVBQVNSLENBQVQsa0JBQzlCLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEdBQUcsRUFBRUE7QUFBWCxLQUNFUSxPQUFPLENBQUNDLEVBRFYsT0FDZUQsT0FBTyxDQUFDdkIsSUFEdkIsT0FDOEJ1QixPQUFPLENBQUNFLEtBRHRDLE9BQzhDRixPQUFPLENBQUNHLFFBRHRELE9BQ2lFSCxPQUFPLENBQUNJLE9BRHpFLGVBRUMsb0JBQUMsT0FBRCxPQUZELENBRFUsQ0FBWDtBQU9ELHNCQUFRLG9CQUFDLElBQUQsUUFBT04sSUFBUCxDQUFSO0FBQ0EsQ0FuREQ7O0FBcURBTyxNQUFNLENBQUNDLE9BQVAsR0FBaUI5QixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnaW5rLXRhYmxlJylcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dCwgTmV3bGluZX0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGNvbnN0IFtyYW5kb21DaGFyaXRpZXMsIHNldFJhbmRvbUNoYXJpdGllc10gPSB1c2VTdGF0ZShbXSlcblx0bGV0IHR3ZWx2ZVJhbmRvbUNoYXJpdGllcyA9IFtdXG5cdC8vIGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdC8vIFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHQvLyBcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdC8vIFx0XHRzZXRSYW5kNShyZXMpXG5cdC8vIFx0fSlcblx0Ly8gXHQudGhlbigoKSA9PiB7XG5cdC8vIFx0XHRmdW4oKVxuXHQvLyBcdH0pXG5cdC8vIH1cblx0dXNlRWZmZWN0KCgpID0+IHtcblxuXHRcdGxldCBteUZ1bmMgPSBhc3luYygpID0+IHtcblx0XHRcdCBhID0gYXdhaXQgcmVhZENoYXJpdGllcyhjaGFyaXRpZXMpXG5cdFx0XHQgYXdhaXQgcmVhZFByb2ZpbGUocHJvZmlsZUluZm8pXG5cdFx0XHQvLyAudGhlbigocmVzKSA9PiB7XG5cdFx0XHQvLyBcdHNldFJhbmQ1KHJlcylcblx0XHRcdC8vIFx0Ly8gaGFuZGxlQ2hhcml0eShyZXMpXG5cdFx0XHQvLyB9KVxuXHRcdH1cblx0XHQgaGFuZGxlQ2hhcml0eShhKVxuXHRcdG15RnVuYygpXG5cdH0sIFtdKVxuXHRjb25zdCBoYW5kbGVDaGFyaXR5ID0gKGEpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiBhKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0dHdlbHZlUmFuZG9tQ2hhcml0aWVzLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHR9XG5cdFx0c2V0UmFuZG9tQ2hhcml0aWVzKHR3ZWx2ZVJhbmRvbUNoYXJpdGllcylcblx0fVxuXHRcdGxldCB0ZXN0ID0gcmFuZG9tQ2hhcml0aWVzLm1hcCgoY2hhcml0eSxpKSA9PiAoXG5cdFx0XHQ8VGV4dCBrZXk9e2l9PlxuXHRcdFx0XHR7Y2hhcml0eS5pZH0ge2NoYXJpdHkubmFtZX0ge2NoYXJpdHkuc3RhdGV9IHtjaGFyaXR5LmNhdGVnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9UZXh0PlxuXHRcdCkpXG5cdFx0XG5cdHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=