'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = () => {
    readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      setRand5(res);
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row); // const rowItems = row;
      // parsedData.push(rowItems + rowItems);
    }

    console.log(parsedData); // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }
  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }


  myFunc();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCRixPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ksRUFBQUE7QUFBRCxJQUFTSixPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSyxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1NLEVBQUUsR0FBR04sT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1IsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1TLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JYLFFBQVEsQ0FBQyxFQUFELENBQWxDOztBQUVBLE1BQUlZLE1BQU0sR0FBRyxNQUFNO0FBQ2xCTixJQUFBQSxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNDSSxJQURELENBQ09DLEdBQUQsSUFBUztBQUNkO0FBQ0FILE1BQUFBLFFBQVEsQ0FBQ0csR0FBRCxDQUFSO0FBQ0EsS0FKRCxFQUtDRCxJQUxELENBS00sTUFBTTtBQUNYRSxNQUFBQSxHQUFHO0FBQ0gsS0FQRDtBQVFBLEdBVEQ7O0FBV0EsUUFBTUEsR0FBRyxHQUFHLFlBQVk7QUFDdkI7QUFDQSxVQUFNQyxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVQLEtBQWYsRUFBcUI7QUFDcEJNLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsR0FBaEIsRUFEb0IsQ0FFcEI7QUFDQTtBQUNBOztBQUNERSxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosVUFBWixFQVJ1QixDQVN2QjtBQUNBO0FBQ0E7QUFDQTtBQUVBLEdBZEQsQ0FsQm9DLENBaUNwQztBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FKLEVBQUFBLE1BQU07QUFDTixzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0F2Q0Q7O0FBeUNBUyxNQUFNLENBQUNDLE9BQVAsR0FBaUJkLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0fSlcblx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRmdW4oKVxuXHRcdH0pXG5cdH1cblxuXHRjb25zdCBmdW4gPSBhc3luYyAoKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmFuZDUpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHRcdC8vIGNvbnN0IHJvd0l0ZW1zID0gcm93O1xuXHRcdFx0Ly8gcGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zICsgcm93SXRlbXMpO1xuXHRcdH1cblx0XHRjb25zb2xlLmxvZyhwYXJzZWREYXRhKVxuXHRcdC8vIGZvcihsZXQgcm93IG9mIHRleHRDb250ZW50LnNwbGl0KFwiXFxuXCIpKXtcblx0XHQvLyBcdGNvbnN0IHJvd0l0ZW1zID0gcm93LnNwbGl0KFwiLFwiKTtcblx0XHQvLyBcdHBhcnNlZERhdGEucHVzaChyb3dJdGVtc1swXS50b1N0cmluZygpICsgcm93SXRlbXNbMV0udG9TdHJpbmcoKSk7XG5cdFx0Ly8gfVxuXHRcdFxuXHR9XG5cdC8vIGlmKG5hbWUpe1xuXHQvLyBcdGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke25hbWV9YClcblx0Ly8gXHRteUZ1bmMobmFtZSlcblx0Ly8gfVxuXHRteUZ1bmMoKVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19