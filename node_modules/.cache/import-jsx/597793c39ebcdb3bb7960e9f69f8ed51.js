'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    await readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      setRand5(JSON.stringify(res));
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5.split("\n")) {
      console.log(row);
      const rowItems = row.split(",");
      parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    } // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }

  };

  if (name) {
    myFunc(name); // console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZnVuIiwicGFyc2VkRGF0YSIsInJvdyIsInNwbGl0IiwiY29uc29sZSIsImxvZyIsInJvd0l0ZW1zIiwicHVzaCIsInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBO0FBQUQsSUFBYUQsT0FBTyxDQUFDLE9BQUQsQ0FBMUI7O0FBQ0EsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNHLEVBQUFBO0FBQUQsSUFBU0gsT0FBTyxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTUksR0FBRyxHQUFHSixPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNSyxFQUFFLEdBQUdMLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRU0sRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNQLE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNUSxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxJQUFJLEdBQUc7QUFBUixDQUFELEtBQXlCO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CVixRQUFRLENBQUMsRUFBRCxDQUFsQzs7QUFFQSxNQUFJVyxNQUFNLEdBQUcsTUFBT0gsSUFBUCxJQUFnQjtBQUM1QixVQUFNSCxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNMSSxJQURLLENBQ0NDLEdBQUQsSUFBUztBQUNkO0FBQ0FILE1BQUFBLFFBQVEsQ0FBQ0ksSUFBSSxDQUFDQyxTQUFMLENBQWVGLEdBQWYsQ0FBRCxDQUFSO0FBQ0FHLE1BQUFBLEdBQUc7QUFDSCxLQUxLLENBQU47QUFNQSxHQVBEOztBQVFBLFFBQU1BLEdBQUcsR0FBRyxZQUFZO0FBQ3ZCO0FBQ0EsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlVCxLQUFLLENBQUNVLEtBQU4sQ0FBWSxJQUFaLENBQWYsRUFBaUM7QUFDaENDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSCxHQUFaO0FBQ0EsWUFBTUksUUFBUSxHQUFHSixHQUFHLENBQUNDLEtBQUosQ0FBVSxHQUFWLENBQWpCO0FBQ0FGLE1BQUFBLFVBQVUsQ0FBQ00sSUFBWCxDQUFnQkQsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZRSxRQUFaLEtBQXlCRixRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVlFLFFBQVosRUFBekM7QUFDQSxLQVBzQixDQVF2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQWJEOztBQWNBLE1BQUdoQixJQUFILEVBQVE7QUFDUEcsSUFBQUEsTUFBTSxDQUFDSCxJQUFELENBQU4sQ0FETyxDQUVQO0FBQ0E7O0FBQ0Qsc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBbENEOztBQW9DQWlCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQm5CLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlfSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHRsZXQgbXlGdW5jID0gYXN5bmMgKG5hbWUpID0+IHtcblx0XHRhd2FpdCByZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0XHRcdHNldFJhbmQ1KEpTT04uc3RyaW5naWZ5KHJlcykpXG5cdFx0XHRmdW4oKVxuXHRcdH0pXG5cdH1cblx0Y29uc3QgZnVuID0gYXN5bmMgKCkgPT4ge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiKioqKioqKioqKipcIiwgcmFuZDVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKV0pXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJhbmQ1LnNwbGl0KFwiXFxuXCIpKXtcblx0XHRcdGNvbnNvbGUubG9nKHJvdylcblx0XHRcdGNvbnN0IHJvd0l0ZW1zID0gcm93LnNwbGl0KFwiLFwiKTtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3dJdGVtc1swXS50b1N0cmluZygpICsgcm93SXRlbXNbMV0udG9TdHJpbmcoKSk7XG5cdFx0fVxuXHRcdC8vIGZvcihsZXQgcm93IG9mIHRleHRDb250ZW50LnNwbGl0KFwiXFxuXCIpKXtcblx0XHQvLyBcdGNvbnN0IHJvd0l0ZW1zID0gcm93LnNwbGl0KFwiLFwiKTtcblx0XHQvLyBcdHBhcnNlZERhdGEucHVzaChyb3dJdGVtc1swXS50b1N0cmluZygpICsgcm93SXRlbXNbMV0udG9TdHJpbmcoKSk7XG5cdFx0Ly8gfVxuXHRcdFxuXHR9XG5cdGlmKG5hbWUpe1xuXHRcdG15RnVuYyhuYW1lKVxuXHRcdC8vIGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCl9YClcblx0fVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19