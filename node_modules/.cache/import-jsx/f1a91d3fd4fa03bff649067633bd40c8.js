'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  useEffect(() => {
    const myFunc = name => {
      console.log(`(((((first))))) ${name}`);
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(JSON.stringify(res));
        fun();
      });
    };

    myFunc();
  }, []);

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {
      console.log(row); // const rowItems = row;
      // parsedData.push(rowItems + rowItems);
    } // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }

  };

  console.log(`first ${name.toString}`);
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsImNvbnNvbGUiLCJsb2ciLCJ0aGVuIiwicmVzIiwiSlNPTiIsInN0cmluZ2lmeSIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JGLE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSSxFQUFBQTtBQUFELElBQVNKLE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1LLEdBQUcsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTU0sRUFBRSxHQUFHTixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVPLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVMsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlgsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFFQUMsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFDZixVQUFNVyxNQUFNLEdBQUtILElBQUQsSUFBVTtBQUN6QkksTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsbUJBQWtCTCxJQUFLLEVBQXBDO0FBQ0FILE1BQUFBLGFBQWEsQ0FBQ0csSUFBRCxDQUFiLENBQ0NNLElBREQsQ0FDT0MsR0FBRCxJQUFTO0FBQ2Q7QUFDQUwsUUFBQUEsUUFBUSxDQUFDTSxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsR0FBZixDQUFELENBQVI7QUFDQUcsUUFBQUEsR0FBRztBQUNILE9BTEQ7QUFNQSxLQVJEOztBQVNBUCxJQUFBQSxNQUFNO0FBQ04sR0FYUSxFQVdOLEVBWE0sQ0FBVDs7QUFhQSxRQUFNTyxHQUFHLEdBQUcsWUFBWTtBQUN2QjtBQUNBLFVBQU1DLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZVgsS0FBZixFQUFxQjtBQUNwQkcsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlPLEdBQVosRUFEb0IsQ0FFcEI7QUFDQTtBQUNBLEtBUHNCLENBUXZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBYkQ7O0FBZUFSLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFNBQVFMLElBQUksQ0FBQ2EsUUFBUyxFQUFuQztBQUNBLHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQXJDRDs7QUF1Q0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc3QgbXlGdW5jID0gIChuYW1lKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZyhgKCgoKChmaXJzdCkpKSkpICR7bmFtZX1gKVxuXHRcdFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0XHRzZXRSYW5kNShKU09OLnN0cmluZ2lmeShyZXMpKVxuXHRcdFx0XHRmdW4oKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cblx0Y29uc3QgZnVuID0gYXN5bmMgKCkgPT4ge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiKioqKioqKioqKipcIiwgcmFuZDVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKV0pXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJhbmQ1KXtcblx0XHRcdGNvbnNvbGUubG9nKHJvdylcblx0XHRcdC8vIGNvbnN0IHJvd0l0ZW1zID0gcm93O1xuXHRcdFx0Ly8gcGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zICsgcm93SXRlbXMpO1xuXHRcdH1cblx0XHQvLyBmb3IobGV0IHJvdyBvZiB0ZXh0Q29udGVudC5zcGxpdChcIlxcblwiKSl7XG5cdFx0Ly8gXHRjb25zdCByb3dJdGVtcyA9IHJvdy5zcGxpdChcIixcIik7XG5cdFx0Ly8gXHRwYXJzZWREYXRhLnB1c2gocm93SXRlbXNbMF0udG9TdHJpbmcoKSArIHJvd0l0ZW1zWzFdLnRvU3RyaW5nKCkpO1xuXHRcdC8vIH1cblx0XHRcblx0fVxuXG5cdGNvbnNvbGUubG9nKGBmaXJzdCAke25hbWUudG9TdHJpbmd9YClcblx0cmV0dXJuIDxUZXh0PkhFUkUgPC9UZXh0PlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==