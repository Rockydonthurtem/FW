'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  let twelveRandomCharities = []; // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
        fun(res);
      }); // .then(() => {
      // 	fun()
      // })
    };

    myFunc();
  }, []);

  const fun = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    console.table(`parsed ${JSON.stringify(twelveRandomCharities)}`);
  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }
  // myFunc()


  const Basic = () => /*#__PURE__*/React.createElement(Table, {
    data: twelveRandomCharities
  });

  return /*#__PURE__*/React.createElement(Text, null, "HERE");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJjc3YiLCJmcyIsInJlYWRDaGFyaXRpZXMiLCJyZWFkUHJvZmlsZSIsIkFwcCIsIm5hbWUiLCJyYW5kNSIsInNldFJhbmQ1IiwidHdlbHZlUmFuZG9tQ2hhcml0aWVzIiwibXlGdW5jIiwidGhlbiIsInJlcyIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJwdXNoIiwicGljazEyIiwiaSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvbnNvbGUiLCJ0YWJsZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJCYXNpYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNFLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkgsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNLLEVBQUFBO0FBQUQsSUFBU0wsT0FBTyxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTU0sR0FBRyxHQUFHTixPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNTyxFQUFFLEdBQUdQLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRVEsRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNULE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNVSxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxJQUFJLEdBQUc7QUFBUixDQUFELEtBQXlCO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxRQUFRLENBQUMsRUFBRCxDQUFsQztBQUNBLE1BQUlZLHFCQUFxQixHQUFHLEVBQTVCLENBTm9DLENBT3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBWCxFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUVmLFFBQUlZLE1BQU0sR0FBRyxNQUFNO0FBQ2xCUCxNQUFBQSxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNDSyxJQURELENBQ09DLEdBQUQsSUFBUztBQUNkO0FBQ0FKLFFBQUFBLFFBQVEsQ0FBQ0ksR0FBRCxDQUFSO0FBQ0FDLFFBQUFBLEdBQUcsQ0FBQ0QsR0FBRCxDQUFIO0FBQ0EsT0FMRCxFQURrQixDQU9sQjtBQUNBO0FBQ0E7QUFDQSxLQVZEOztBQVdBRixJQUFBQSxNQUFNO0FBQ04sR0FkUSxFQWNOLEVBZE0sQ0FBVDs7QUFlQSxRQUFNRyxHQUFHLEdBQUlELEdBQUQsSUFBUztBQUNwQjtBQUNBLFVBQU1FLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZUgsR0FBZixFQUFtQjtBQUNsQkUsTUFBQUEsVUFBVSxDQUFDRSxJQUFYLENBQWdCRCxHQUFoQjtBQUNBOztBQUNELFFBQUlFLE1BQU0sR0FBRyxFQUFiOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUM1QlQsTUFBQUEscUJBQXFCLENBQUNPLElBQXRCLENBQTJCSixHQUFHLENBQUNPLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JULEdBQUcsQ0FBQ1UsTUFBL0IsQ0FBRCxDQUE5QjtBQUNBOztBQUVEQyxJQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBZSxVQUFTQyxJQUFJLENBQUNDLFNBQUwsQ0FBZWpCLHFCQUFmLENBQXNDLEVBQTlEO0FBQ0EsR0FaRCxDQWhDb0MsQ0E2Q3BDO0FBQ0M7QUFDQTtBQUNBO0FBQ0E7OztBQUNELFFBQU1rQixLQUFLLEdBQUcsbUJBQU0sb0JBQUMsS0FBRDtBQUFPLElBQUEsSUFBSSxFQUFFbEI7QUFBYixJQUFwQjs7QUFDQSxzQkFBUSxvQkFBQyxJQUFELGVBQVI7QUFDQSxDQXBERDs7QUFzREFtQixNQUFNLENBQUNDLE9BQVAsR0FBaUJ4QixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnaW5rLXRhYmxlJylcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGxldCB0d2VsdmVSYW5kb21DaGFyaXRpZXMgPSBbXVxuXHQvLyBsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHQvLyBcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0Ly8gXHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHQvLyBcdFx0c2V0UmFuZDUocmVzKVxuXHQvLyBcdH0pXG5cdC8vIFx0LnRoZW4oKCkgPT4ge1xuXHQvLyBcdFx0ZnVuKClcblx0Ly8gXHR9KVxuXHQvLyB9XG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cblx0XHRsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHRcdFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0XHRcdGZ1bihyZXMpXG5cdFx0XHR9KVxuXHRcdFx0Ly8gLnRoZW4oKCkgPT4ge1xuXHRcdFx0Ly8gXHRmdW4oKVxuXHRcdFx0Ly8gfSlcblx0XHR9XG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cdGNvbnN0IGZ1biA9IChyZXMpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByZXMpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0bGV0IHBpY2sxMiA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChyZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmVzLmxlbmd0aCldKVxuXHRcdH1cblx0XHRcblx0XHRjb25zb2xlLnRhYmxlKGBwYXJzZWQgJHtKU09OLnN0cmluZ2lmeSh0d2VsdmVSYW5kb21DaGFyaXRpZXMpfWApXG5cdH1cblx0Ly8gaWYobmFtZSl7XG5cdFx0Ly8gXHRjb25zb2xlLmxvZyhgY2hlY2tpbmcgc3RhdGUgJHtuYW1lfWApXG5cdFx0Ly8gXHRteUZ1bmMobmFtZSlcblx0XHQvLyB9XG5cdFx0Ly8gbXlGdW5jKClcblx0Y29uc3QgQmFzaWMgPSAoKSA9PiA8VGFibGUgZGF0YT17dHdlbHZlUmFuZG9tQ2hhcml0aWVzfSAvPlxuXHRyZXR1cm4gKDxUZXh0PkhFUkU8L1RleHQ+KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==