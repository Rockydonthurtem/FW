'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  useEffect(() => {
    const myFunc = async name => {
      let myArr = [];
      await readCharities(name);
      myArr.push(res);
      setRand5(res);
      fun();
    };

    myFunc();
  }, []);

  const fun = () => {
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    } // console.log(`!!!!!!!!!!!!!!!!!! ${JSON.stringify(parsedData)}`)
    // console.log(`checking state ${Math.floor(Math.random() * parsedData.length)}`)


    for (let i = 0; i < 12; i++) {
      let ind = Math.floor(Math.random() * parsedData.length);
      console.log(`looping ${i}`);
    }
  };

  if (name) {
    myFunc(name);
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwicHVzaCIsInJlcyIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJpIiwiaW5kIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JGLE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSSxFQUFBQTtBQUFELElBQVNKLE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1LLEdBQUcsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTU0sRUFBRSxHQUFHTixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVPLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVMsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlgsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFFQUMsRUFBQUEsU0FBUyxDQUFFLE1BQU07QUFDaEIsVUFBTVcsTUFBTSxHQUFHLE1BQU9ILElBQVAsSUFBZ0I7QUFDOUIsVUFBSUksS0FBSyxHQUFHLEVBQVo7QUFDQyxZQUFNUCxhQUFhLENBQUNHLElBQUQsQ0FBbkI7QUFDQUksTUFBQUEsS0FBSyxDQUFDQyxJQUFOLENBQVdDLEdBQVg7QUFDQUosTUFBQUEsUUFBUSxDQUFDSSxHQUFELENBQVI7QUFDQUMsTUFBQUEsR0FBRztBQUNKLEtBTkQ7O0FBT0FKLElBQUFBLE1BQU07QUFDTixHQVRRLEVBU04sRUFUTSxDQUFUOztBQVdBLFFBQU1JLEdBQUcsR0FBRyxNQUFNO0FBQ2pCLFVBQU1DLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZVIsS0FBZixFQUFxQjtBQUNwQk8sTUFBQUEsVUFBVSxDQUFDSCxJQUFYLENBQWdCSSxHQUFoQjtBQUNBLEtBSmdCLENBS2pCO0FBQ0E7OztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUM1QixVQUFJQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JOLFVBQVUsQ0FBQ08sTUFBdEMsQ0FBVjtBQUNBQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxXQUFVUCxDQUFFLEVBQXpCO0FBRUE7QUFDRCxHQVpEOztBQWNBLE1BQUdWLElBQUgsRUFBUTtBQUNQRyxJQUFBQSxNQUFNLENBQUNILElBQUQsQ0FBTjtBQUNBOztBQUNELHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQXBDRDs7QUFzQ0FrQixNQUFNLENBQUNDLE9BQVAsR0FBaUJwQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHR1c2VFZmZlY3QoICgpID0+IHtcblx0XHRjb25zdCBteUZ1bmMgPSBhc3luYyAobmFtZSkgPT4ge1xuXHRcdFx0bGV0IG15QXJyID0gW11cblx0XHRcdCBhd2FpdCByZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0XHRcdG15QXJyLnB1c2gocmVzKVxuXHRcdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0XHRcdGZ1bigpXG5cdFx0fVxuXHRcdG15RnVuYygpO1xuXHR9LCBbXSk7XG5cblx0Y29uc3QgZnVuID0gKCkgPT4ge1xuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHQvLyBjb25zb2xlLmxvZyhgISEhISEhISEhISEhISEhISEhICR7SlNPTi5zdHJpbmdpZnkocGFyc2VkRGF0YSl9YClcblx0XHQvLyBjb25zb2xlLmxvZyhgY2hlY2tpbmcgc3RhdGUgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXJzZWREYXRhLmxlbmd0aCl9YClcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcblx0XHRcdGxldCBpbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXJzZWREYXRhLmxlbmd0aClcblx0XHRcdGNvbnNvbGUubG9nKGBsb29waW5nICR7aX1gKVxuXHRcdFx0XG5cdFx0fVxuXHR9XG5cblx0aWYobmFtZSl7XG5cdFx0bXlGdW5jKG5hbWUpXG5cdH1cblx0cmV0dXJuIDxUZXh0PkhFUkUgPC9UZXh0PlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==