'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  React.useEffect(() => {
    const myFunc = async name => {
      let myArr = [];
      await readCharities(name).then(res => {
        myArr.push(res);
        setRand5(res);
        fun();
      });
    };

    myFunc();
  }, []);

  const fun = () => {
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    } // console.log(`!!!!!!!!!!!!!!!!!! ${JSON.stringify(parsedData)}`)
    // console.log(`checking state ${Math.floor(Math.random() * parsedData.length)}`)


    for (let i = 0; i < 12; i++) {
      let ind = Math.floor(Math.random() * parsedData.length);
      console.log(`looping ${i}`);
    }
  };

  if (name) {
    myFunc(name);
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsInVzZUVmZmVjdCIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwiaSIsImluZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUE7QUFBRCxJQUFhRCxPQUFPLENBQUMsT0FBRCxDQUExQjs7QUFDQSxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0csRUFBQUE7QUFBRCxJQUFTSCxPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1LLEVBQUUsR0FBR0wsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1AsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1RLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JWLFFBQVEsQ0FBQyxFQUFELENBQWxDO0FBRUFGLEVBQUFBLEtBQUssQ0FBQ2EsU0FBTixDQUFpQixNQUFNO0FBQ3RCLFVBQU1DLE1BQU0sR0FBRyxNQUFPSixJQUFQLElBQWdCO0FBQzlCLFVBQUlLLEtBQUssR0FBRyxFQUFaO0FBQ0EsWUFBTVIsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDTE0sSUFESyxDQUNDQyxHQUFELElBQVM7QUFDZEYsUUFBQUEsS0FBSyxDQUFDRyxJQUFOLENBQVdELEdBQVg7QUFDQUwsUUFBQUEsUUFBUSxDQUFDSyxHQUFELENBQVI7QUFDQUUsUUFBQUEsR0FBRztBQUNILE9BTEssQ0FBTjtBQU1BLEtBUkQ7O0FBU0FMLElBQUFBLE1BQU07QUFDTixHQVhELEVBV0csRUFYSDs7QUFhQSxRQUFNSyxHQUFHLEdBQUcsTUFBTTtBQUNqQixVQUFNQyxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVWLEtBQWYsRUFBcUI7QUFDcEJTLE1BQUFBLFVBQVUsQ0FBQ0YsSUFBWCxDQUFnQkcsR0FBaEI7QUFDQSxLQUpnQixDQUtqQjtBQUNBOzs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUIsVUFBSUMsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCTixVQUFVLENBQUNPLE1BQXRDLENBQVY7QUFDQUMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsV0FBVVAsQ0FBRSxFQUF6QjtBQUVBO0FBQ0QsR0FaRDs7QUFjQSxNQUFHWixJQUFILEVBQVE7QUFDUEksSUFBQUEsTUFBTSxDQUFDSixJQUFELENBQU47QUFDQTs7QUFDRCxzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0F0Q0Q7O0FBd0NBb0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGV9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdFJlYWN0LnVzZUVmZmVjdCggKCkgPT4ge1xuXHRcdGNvbnN0IG15RnVuYyA9IGFzeW5jIChuYW1lKSA9PiB7XG5cdFx0XHRsZXQgbXlBcnIgPSBbXVxuXHRcdFx0YXdhaXQgcmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0XHRteUFyci5wdXNoKHJlcylcblx0XHRcdFx0c2V0UmFuZDUocmVzKVxuXHRcdFx0XHRmdW4oKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0bXlGdW5jKCk7XG5cdH0sIFtdKTtcblxuXHRjb25zdCBmdW4gPSAoKSA9PiB7XG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJhbmQ1KXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdC8vIGNvbnNvbGUubG9nKGAhISEhISEhISEhISEhISEhISEgJHtKU09OLnN0cmluZ2lmeShwYXJzZWREYXRhKX1gKVxuXHRcdC8vIGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBhcnNlZERhdGEubGVuZ3RoKX1gKVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0bGV0IGluZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBhcnNlZERhdGEubGVuZ3RoKVxuXHRcdFx0Y29uc29sZS5sb2coYGxvb3BpbmcgJHtpfWApXG5cdFx0XHRcblx0XHR9XG5cdH1cblxuXHRpZihuYW1lKXtcblx0XHRteUZ1bmMobmFtZSlcblx0fVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19