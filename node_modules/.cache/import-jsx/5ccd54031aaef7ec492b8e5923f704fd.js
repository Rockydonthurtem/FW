'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  useEffect(() => {
    // 	// let allCharities = []
    // 	// let getProfile = []
    // 	let myFunc = () => {
    // 		readCharities(charities)
    // 		.then((res) => {
    // 			allCharities.push(res)
    // 		})
    // 		readProfile(profileInfo)
    // 		.then((res) => {
    // 			getProfile.push(res)
    // 			console.log(`first${JSON.stringify(getProfile)}`)
    // 		})
    // 	}
    // 	myFunc()
    let allCharities = [];
    let getProfile = [];
    const promise1 = readCharities(charities).then(res => {
      allCharities.push(res);
    });
    const promise2 = readProfile(profileInfo).then(res => {
      getProfile.push(res);
    });
    Promise.all([promise1, promise2]).then(values => {
      handleCharity(allCharities, getProfile);
    });
  }, []);

  const handleCharity = (charityGroup, profileGroup) => {
    // console.log(`1 and 2 ${charityGroup, JSON.stringify(profileGroup)}`)
    const parsedData = [];

    for (let row of charityGroup) {
      parsedData.push(row);
    }

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(charityGroup[Math.floor(Math.random() * charityGroup.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  console.log("first", randomCharities[0]);
  console.log("first", typeof randomCharities);
  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test); // return (<Text>HERE</Text>)
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJhbGxDaGFyaXRpZXMiLCJnZXRQcm9maWxlIiwicHJvbWlzZTEiLCJ0aGVuIiwicmVzIiwicHVzaCIsInByb21pc2UyIiwiUHJvbWlzZSIsImFsbCIsInZhbHVlcyIsImhhbmRsZUNoYXJpdHkiLCJjaGFyaXR5R3JvdXAiLCJwcm9maWxlR3JvdXAiLCJwYXJzZWREYXRhIiwicm93IiwiaSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJ0ZXN0IiwibWFwIiwiY2hhcml0eSIsImlkIiwibmFtZSIsInN0YXRlIiwiY2F0ZWdvcnkiLCJmZWF0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7QUFDQSxNQUFNTyxHQUFHLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1RLEVBQUUsR0FBR1IsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFUyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1YsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1XLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLFNBQUQ7QUFBWUMsRUFBQUE7QUFBWixDQUFELEtBQThCO0FBQ3pDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CYixRQUFRLENBQUMsRUFBRCxDQUFsQztBQUNBLFFBQU0sQ0FBQ2MsZUFBRCxFQUFrQkMsa0JBQWxCLElBQXdDZixRQUFRLENBQUMsRUFBRCxDQUF0RDtBQUNBLE1BQUlnQixxQkFBcUIsR0FBRyxFQUE1QjtBQUVBZixFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0MsUUFBSWdCLFlBQVksR0FBRyxFQUFuQjtBQUNBLFFBQUlDLFVBQVUsR0FBRyxFQUFqQjtBQUVBLFVBQU1DLFFBQVEsR0FBR1osYUFBYSxDQUFDRyxTQUFELENBQWIsQ0FBeUJVLElBQXpCLENBQStCQyxHQUFELElBQVM7QUFBQ0osTUFBQUEsWUFBWSxDQUFDSyxJQUFiLENBQWtCRCxHQUFsQjtBQUF1QixLQUEvRCxDQUFqQjtBQUNBLFVBQU1FLFFBQVEsR0FBR2YsV0FBVyxDQUFDRyxXQUFELENBQVgsQ0FBeUJTLElBQXpCLENBQStCQyxHQUFELElBQVM7QUFBQ0gsTUFBQUEsVUFBVSxDQUFDSSxJQUFYLENBQWdCRCxHQUFoQjtBQUFxQixLQUE3RCxDQUFqQjtBQUNBRyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxDQUFDTixRQUFELEVBQVdJLFFBQVgsQ0FBWixFQUFrQ0gsSUFBbEMsQ0FBd0NNLE1BQUQsSUFBWTtBQUNsREMsTUFBQUEsYUFBYSxDQUFDVixZQUFELEVBQWVDLFVBQWYsQ0FBYjtBQUNBLEtBRkQ7QUFHQSxHQXhCUSxFQXdCTixFQXhCTSxDQUFUOztBQW1DQSxRQUFNUyxhQUFhLEdBQUcsQ0FBQ0MsWUFBRCxFQUFlQyxZQUFmLEtBQWdDO0FBQ3JEO0FBQ0EsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlSCxZQUFmLEVBQTRCO0FBQzNCRSxNQUFBQSxVQUFVLENBQUNSLElBQVgsQ0FBZ0JTLEdBQWhCO0FBQ0E7O0FBRUQsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCaEIsTUFBQUEscUJBQXFCLENBQUNNLElBQXRCLENBQTJCTSxZQUFZLENBQUNLLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JQLFlBQVksQ0FBQ1EsTUFBeEMsQ0FBRCxDQUF2QztBQUNBOztBQUNEckIsSUFBQUEsa0JBQWtCLENBQUNDLHFCQUFELENBQWxCO0FBQ0EsR0FYRDs7QUFZQXFCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBcUJ4QixlQUFlLENBQUMsQ0FBRCxDQUFwQztBQUNBdUIsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQUFxQixPQUFPeEIsZUFBNUI7QUFDQyxNQUFJeUIsSUFBSSxHQUFHekIsZUFBZSxDQUFDMEIsR0FBaEIsQ0FBb0IsQ0FBQ0MsT0FBRCxFQUFTVCxDQUFULGtCQUM5QixvQkFBQyxJQUFEO0FBQU0sSUFBQSxHQUFHLEVBQUVBO0FBQVgsS0FDRVMsT0FBTyxDQUFDQyxFQURWLE9BQ2VELE9BQU8sQ0FBQ0UsSUFEdkIsT0FDOEJGLE9BQU8sQ0FBQ0csS0FEdEMsT0FDOENILE9BQU8sQ0FBQ0ksUUFEdEQsT0FDaUVKLE9BQU8sQ0FBQ0ssT0FEekUsZUFFQyxvQkFBQyxPQUFELE9BRkQsQ0FEVSxDQUFYO0FBT0Qsc0JBQVEsb0JBQUMsSUFBRCxRQUFPUCxJQUFQLENBQVIsQ0FqRXlDLENBa0V6QztBQUNBLENBbkVEOztBQXFFQVEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkMsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJ2luay10YWJsZScpXG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHQsIE5ld2xpbmV9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe2NoYXJpdGllcywgcHJvZmlsZUluZm99KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRjb25zdCBbcmFuZG9tQ2hhcml0aWVzLCBzZXRSYW5kb21DaGFyaXRpZXNdID0gdXNlU3RhdGUoW10pXG5cdGxldCB0d2VsdmVSYW5kb21DaGFyaXRpZXMgPSBbXVxuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Ly8gbGV0IGFsbENoYXJpdGllcyA9IFtdXG5cdC8vIFx0Ly8gbGV0IGdldFByb2ZpbGUgPSBbXVxuXHQvLyBcdGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdC8vIFx0XHRyZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0Ly8gXHRcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdFx0YWxsQ2hhcml0aWVzLnB1c2gocmVzKVxuXHQvLyBcdFx0fSlcblx0XHRcdFxuXHQvLyBcdFx0cmVhZFByb2ZpbGUocHJvZmlsZUluZm8pXG5cdC8vIFx0XHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHRcdGdldFByb2ZpbGUucHVzaChyZXMpXG5cdC8vIFx0XHRcdGNvbnNvbGUubG9nKGBmaXJzdCR7SlNPTi5zdHJpbmdpZnkoZ2V0UHJvZmlsZSl9YClcblx0Ly8gXHRcdH0pXG5cdC8vIFx0fVxuXHQvLyBcdG15RnVuYygpXG5cdFx0bGV0IGFsbENoYXJpdGllcyA9IFtdXG5cdFx0bGV0IGdldFByb2ZpbGUgPSBbXVxuXG5cdFx0Y29uc3QgcHJvbWlzZTEgPSByZWFkQ2hhcml0aWVzKGNoYXJpdGllcykudGhlbigocmVzKSA9PiB7YWxsQ2hhcml0aWVzLnB1c2gocmVzKX0pXG5cdFx0Y29uc3QgcHJvbWlzZTIgPSByZWFkUHJvZmlsZShwcm9maWxlSW5mbykudGhlbigocmVzKSA9PiB7Z2V0UHJvZmlsZS5wdXNoKHJlcyl9KVxuXHRcdFByb21pc2UuYWxsKFtwcm9taXNlMSwgcHJvbWlzZTJdKS50aGVuKCh2YWx1ZXMpID0+IHtcblx0XHRcdGhhbmRsZUNoYXJpdHkoYWxsQ2hhcml0aWVzLCBnZXRQcm9maWxlKVxuXHRcdH0pO1xuXHR9LCBbXSlcblxuXG5cblxuXG5cblxuXG5cblxuXHRjb25zdCBoYW5kbGVDaGFyaXR5ID0gKGNoYXJpdHlHcm91cCwgcHJvZmlsZUdyb3VwKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coYDEgYW5kIDIgJHtjaGFyaXR5R3JvdXAsIEpTT04uc3RyaW5naWZ5KHByb2ZpbGVHcm91cCl9YClcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgY2hhcml0eUdyb3VwKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdFxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0dHdlbHZlUmFuZG9tQ2hhcml0aWVzLnB1c2goY2hhcml0eUdyb3VwW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJpdHlHcm91cC5sZW5ndGgpXSlcblx0XHR9XG5cdFx0c2V0UmFuZG9tQ2hhcml0aWVzKHR3ZWx2ZVJhbmRvbUNoYXJpdGllcylcblx0fVxuXHRjb25zb2xlLmxvZyhcImZpcnN0XCIsIHJhbmRvbUNoYXJpdGllc1swXSlcblx0Y29uc29sZS5sb2coXCJmaXJzdFwiLCB0eXBlb2YgcmFuZG9tQ2hhcml0aWVzKVxuXHRcdGxldCB0ZXN0ID0gcmFuZG9tQ2hhcml0aWVzLm1hcCgoY2hhcml0eSxpKSA9PiAoXG5cdFx0XHQ8VGV4dCBrZXk9e2l9PlxuXHRcdFx0XHR7Y2hhcml0eS5pZH0ge2NoYXJpdHkubmFtZX0ge2NoYXJpdHkuc3RhdGV9IHtjaGFyaXR5LmNhdGVnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9UZXh0PlxuXHRcdCkpXG5cdFx0XG5cdHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcblx0Ly8gcmV0dXJuICg8VGV4dD5IRVJFPC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=