'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = (charities, profileInfo) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  console.log(`)))))))) ${JSON.stringify(charities)}`);
  useEffect(() => {
    let myFunc = () => {
      readCharities(charities).then(res => {
        handleCharity(res);
      }); // readProfile(profileInfo)
    };

    myFunc();
  }, []);

  const handleCharity = res => {
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  }; // let test = randomCharities.map((charity,i) => (
  // 	<Text key={i}>
  // 		{charity.id} {charity.name} {charity.state} {charity.category} {charity.feature}
  // 		<Newline />
  // 	</Text>
  // ))
  // return (<Text>{test}</Text>)


  return /*#__PURE__*/React.createElement(Text, null, "HERE");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJoYW5kbGVDaGFyaXR5IiwicGFyc2VkRGF0YSIsInJvdyIsInB1c2giLCJwaWNrMTIiLCJpIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7QUFDQSxNQUFNTyxHQUFHLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1RLEVBQUUsR0FBR1IsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFUyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1YsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1XLEdBQUcsR0FBRyxDQUFDQyxTQUFELEVBQVlDLFdBQVosS0FBNEI7QUFDdkM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JiLFFBQVEsQ0FBQyxFQUFELENBQWxDO0FBQ0EsUUFBTSxDQUFDYyxlQUFELEVBQWtCQyxrQkFBbEIsSUFBd0NmLFFBQVEsQ0FBQyxFQUFELENBQXREO0FBQ0EsTUFBSWdCLHFCQUFxQixHQUFHLEVBQTVCO0FBRUFDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFlBQVdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlVixTQUFmLENBQTBCLEVBQWxEO0FBQ0FULEVBQUFBLFNBQVMsQ0FBQyxNQUFNO0FBQ2YsUUFBSW9CLE1BQU0sR0FBRyxNQUFNO0FBQ2xCZCxNQUFBQSxhQUFhLENBQUNHLFNBQUQsQ0FBYixDQUNFWSxJQURGLENBQ1FDLEdBQUQsSUFBUztBQUNkQyxRQUFBQSxhQUFhLENBQUNELEdBQUQsQ0FBYjtBQUNBLE9BSEYsRUFEa0IsQ0FNbEI7QUFDQSxLQVBEOztBQVFBRixJQUFBQSxNQUFNO0FBQ04sR0FWUSxFQVVOLEVBVk0sQ0FBVDs7QUFXQSxRQUFNRyxhQUFhLEdBQUlELEdBQUQsSUFBUztBQUM5QixVQUFNRSxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVILEdBQWYsRUFBbUI7QUFDbEJFLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsR0FBaEI7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJiLE1BQUFBLHFCQUFxQixDQUFDVyxJQUF0QixDQUEyQkosR0FBRyxDQUFDTyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCVCxHQUFHLENBQUNVLE1BQS9CLENBQUQsQ0FBOUI7QUFDQTs7QUFDRGxCLElBQUFBLGtCQUFrQixDQUFDQyxxQkFBRCxDQUFsQjtBQUNBLEdBVkQsQ0FyQnVDLENBZ0N0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFRDs7O0FBQ0Esc0JBQVEsb0JBQUMsSUFBRCxlQUFSO0FBQ0EsQ0F6Q0Q7O0FBMkNBa0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCMUIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJ2luay10YWJsZScpXG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHQsIE5ld2xpbmV9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoY2hhcml0aWVzLCBwcm9maWxlSW5mbykgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0Y29uc3QgW3JhbmRvbUNoYXJpdGllcywgc2V0UmFuZG9tQ2hhcml0aWVzXSA9IHVzZVN0YXRlKFtdKVxuXHRsZXQgdHdlbHZlUmFuZG9tQ2hhcml0aWVzID0gW11cblxuXHRjb25zb2xlLmxvZyhgKSkpKSkpKSkgJHtKU09OLnN0cmluZ2lmeShjaGFyaXRpZXMpfWApXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0XHRcdHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzKVxuXHRcdFx0IC50aGVuKChyZXMpID0+IHtcblx0XHRcdFx0IGhhbmRsZUNoYXJpdHkocmVzKVxuXHRcdFx0IH0pXG5cblx0XHRcdC8vIHJlYWRQcm9maWxlKHByb2ZpbGVJbmZvKVxuXHRcdH1cblx0XHRteUZ1bmMoKVxuXHR9LCBbXSlcblx0Y29uc3QgaGFuZGxlQ2hhcml0eSA9IChyZXMpID0+IHtcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmVzKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0dHdlbHZlUmFuZG9tQ2hhcml0aWVzLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHR9XG5cdFx0c2V0UmFuZG9tQ2hhcml0aWVzKHR3ZWx2ZVJhbmRvbUNoYXJpdGllcylcblx0fVxuXHRcdC8vIGxldCB0ZXN0ID0gcmFuZG9tQ2hhcml0aWVzLm1hcCgoY2hhcml0eSxpKSA9PiAoXG5cdFx0Ly8gXHQ8VGV4dCBrZXk9e2l9PlxuXHRcdC8vIFx0XHR7Y2hhcml0eS5pZH0ge2NoYXJpdHkubmFtZX0ge2NoYXJpdHkuc3RhdGV9IHtjaGFyaXR5LmNhdGVnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdC8vIFx0XHQ8TmV3bGluZSAvPlxuXHRcdC8vIFx0PC9UZXh0PlxuXHRcdC8vICkpXG5cdFx0XG5cdC8vIHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcblx0cmV0dXJuICg8VGV4dD5IRVJFPC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=