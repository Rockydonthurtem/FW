'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  // const [rand5, setRand5] = useState([])
  // let myFunc = async (name) => {
  // 	await readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(JSON.stringify(res))
  // 		fun()
  // 	})
  // }
  // const fun = async () => {
  // 	// console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
  // 	console.log("@@@@@@@@@@", JSON.stringify(rand5[50]))
  // }
  // if(name){
  // 	myFunc(name)
  // 	// console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  // }
  const N_TOTAL = 12;
  const N_MAX_STATE = 5;

  function pickCharities(charities, profile) {
    // TODO
    return [];
  }

  async function main() {
    // Input argiments
    const [,, charitiesPath, profilePath] = process.argv;
    const charities = await readCharities(charitiesPath);
    const profile = await readProfile(profilePath);
    const charitiesToFeature = pickCharities(charities, profile); // Output result to standard out, one per line

    console.log(charitiesToFeature.join("\n"));
  }

  main();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwiTl9UT1RBTCIsIk5fTUFYX1NUQVRFIiwicGlja0NoYXJpdGllcyIsImNoYXJpdGllcyIsInByb2ZpbGUiLCJtYWluIiwiY2hhcml0aWVzUGF0aCIsInByb2ZpbGVQYXRoIiwicHJvY2VzcyIsImFyZ3YiLCJjaGFyaXRpZXNUb0ZlYXR1cmUiLCJjb25zb2xlIiwibG9nIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQTtBQUFELElBQWFELE9BQU8sQ0FBQyxPQUFELENBQTFCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRyxFQUFBQTtBQUFELElBQVNILE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTUssRUFBRSxHQUFHTCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVNLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUCxPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVEsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsUUFBTUMsT0FBTyxHQUFHLEVBQWhCO0FBQ0EsUUFBTUMsV0FBVyxHQUFHLENBQXBCOztBQUVBLFdBQVNDLGFBQVQsQ0FBdUJDLFNBQXZCLEVBQWtDQyxPQUFsQyxFQUEyQztBQUMzQztBQUNBLFdBQU8sRUFBUDtBQUNDOztBQUVELGlCQUFlQyxJQUFmLEdBQXNCO0FBQ3RCO0FBQ0EsVUFBTSxJQUFLQyxhQUFMLEVBQW9CQyxXQUFwQixJQUFtQ0MsT0FBTyxDQUFDQyxJQUFqRDtBQUVBLFVBQU1OLFNBQVMsR0FBRyxNQUFNUCxhQUFhLENBQUNVLGFBQUQsQ0FBckM7QUFDQSxVQUFNRixPQUFPLEdBQUcsTUFBTVAsV0FBVyxDQUFDVSxXQUFELENBQWpDO0FBRUEsVUFBTUcsa0JBQWtCLEdBQUdSLGFBQWEsQ0FBQ0MsU0FBRCxFQUFZQyxPQUFaLENBQXhDLENBUHNCLENBU3RCOztBQUNBTyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsa0JBQWtCLENBQUNHLElBQW5CLENBQXdCLElBQXhCLENBQVo7QUFDQzs7QUFDRFIsRUFBQUEsSUFBSTtBQUNKLHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQTlDRDs7QUFnREFTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlfSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdC8vIGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHQvLyBsZXQgbXlGdW5jID0gYXN5bmMgKG5hbWUpID0+IHtcblx0Ly8gXHRhd2FpdCByZWFkQ2hhcml0aWVzKG5hbWUpXG5cdC8vIFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0Ly8gXHRcdHNldFJhbmQ1KEpTT04uc3RyaW5naWZ5KHJlcykpXG5cdC8vIFx0XHRmdW4oKVxuXHQvLyBcdH0pXG5cdC8vIH1cblx0Ly8gY29uc3QgZnVuID0gYXN5bmMgKCkgPT4ge1xuXHQvLyBcdC8vIGNvbnNvbGUubG9nKFwiKioqKioqKioqKipcIiwgcmFuZDVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKV0pXG5cdC8vIFx0Y29uc29sZS5sb2coXCJAQEBAQEBAQEBAXCIsIEpTT04uc3RyaW5naWZ5KHJhbmQ1WzUwXSkpXG5cdC8vIH1cblx0Ly8gaWYobmFtZSl7XG5cdC8vIFx0bXlGdW5jKG5hbWUpXG5cdC8vIFx0Ly8gY29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKX1gKVxuXHQvLyB9XG5cdFxuXHRjb25zdCBOX1RPVEFMID0gMTI7XG5cdGNvbnN0IE5fTUFYX1NUQVRFID0gNTtcblxuXHRmdW5jdGlvbiBwaWNrQ2hhcml0aWVzKGNoYXJpdGllcywgcHJvZmlsZSkge1xuXHQvLyBUT0RPXG5cdHJldHVybiBbXTtcblx0fVxuXG5cdGFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG5cdC8vIElucHV0IGFyZ2ltZW50c1xuXHRjb25zdCBbLCAsIGNoYXJpdGllc1BhdGgsIHByb2ZpbGVQYXRoXSA9IHByb2Nlc3MuYXJndjtcblxuXHRjb25zdCBjaGFyaXRpZXMgPSBhd2FpdCByZWFkQ2hhcml0aWVzKGNoYXJpdGllc1BhdGgpO1xuXHRjb25zdCBwcm9maWxlID0gYXdhaXQgcmVhZFByb2ZpbGUocHJvZmlsZVBhdGgpO1xuXG5cdGNvbnN0IGNoYXJpdGllc1RvRmVhdHVyZSA9IHBpY2tDaGFyaXRpZXMoY2hhcml0aWVzLCBwcm9maWxlKTtcblxuXHQvLyBPdXRwdXQgcmVzdWx0IHRvIHN0YW5kYXJkIG91dCwgb25lIHBlciBsaW5lXG5cdGNvbnNvbGUubG9nKGNoYXJpdGllc1RvRmVhdHVyZS5qb2luKFwiXFxuXCIpKTtcblx0fVxuXHRtYWluKCk7XG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=