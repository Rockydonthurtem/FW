'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  useEffect(() => {
    let allCharities = [];
    let getProfile = [];

    let myFunc = () => {
      readCharities(charities).then(res => {
        allCharities.push(res);
      });
      readProfile(profileInfo).then(res => {
        getProfile.push(res);
        console.log(`first${allCharities}`);
      });
    };

    myFunc();
  }, []);

  const handleCharity = res => {
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test); // return (<Text>HERE</Text>)
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJhbGxDaGFyaXRpZXMiLCJnZXRQcm9maWxlIiwibXlGdW5jIiwidGhlbiIsInJlcyIsInB1c2giLCJjb25zb2xlIiwibG9nIiwiaGFuZGxlQ2hhcml0eSIsInBhcnNlZERhdGEiLCJyb3ciLCJwaWNrMTIiLCJpIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwidGVzdCIsIm1hcCIsImNoYXJpdHkiLCJpZCIsIm5hbWUiLCJzdGF0ZSIsImNhdGVnb3J5IiwiZmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNFLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkgsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNLLEVBQUFBLElBQUQ7QUFBT0MsRUFBQUE7QUFBUCxJQUFrQk4sT0FBTyxDQUFDLEtBQUQsQ0FBL0I7O0FBQ0EsTUFBTU8sR0FBRyxHQUFHUCxPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNUSxFQUFFLEdBQUdSLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRVMsRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNWLE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNVyxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxTQUFEO0FBQVlDLEVBQUFBO0FBQVosQ0FBRCxLQUE4QjtBQUN6QztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQmIsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFDQSxRQUFNLENBQUNjLGVBQUQsRUFBa0JDLGtCQUFsQixJQUF3Q2YsUUFBUSxDQUFDLEVBQUQsQ0FBdEQ7QUFDQSxNQUFJZ0IscUJBQXFCLEdBQUcsRUFBNUI7QUFFQWYsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFDZixRQUFJZ0IsWUFBWSxHQUFHLEVBQW5CO0FBQ0EsUUFBSUMsVUFBVSxHQUFHLEVBQWpCOztBQUNBLFFBQUlDLE1BQU0sR0FBRyxNQUFNO0FBQ2xCWixNQUFBQSxhQUFhLENBQUNHLFNBQUQsQ0FBYixDQUNFVSxJQURGLENBQ1FDLEdBQUQsSUFBUztBQUNkSixRQUFBQSxZQUFZLENBQUNLLElBQWIsQ0FBa0JELEdBQWxCO0FBQ0EsT0FIRjtBQUtBYixNQUFBQSxXQUFXLENBQUNHLFdBQUQsQ0FBWCxDQUNDUyxJQURELENBQ09DLEdBQUQsSUFBUztBQUNkSCxRQUFBQSxVQUFVLENBQUNJLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0FFLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFFBQU9QLFlBQWEsRUFBakM7QUFDQyxPQUpGO0FBS0EsS0FYRDs7QUFZQUUsSUFBQUEsTUFBTTtBQUNOLEdBaEJRLEVBZ0JOLEVBaEJNLENBQVQ7O0FBaUJBLFFBQU1NLGFBQWEsR0FBSUosR0FBRCxJQUFTO0FBQzlCLFVBQU1LLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZU4sR0FBZixFQUFtQjtBQUNsQkssTUFBQUEsVUFBVSxDQUFDSixJQUFYLENBQWdCSyxHQUFoQjtBQUNBOztBQUNELFFBQUlDLE1BQU0sR0FBRyxFQUFiOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUM1QmIsTUFBQUEscUJBQXFCLENBQUNNLElBQXRCLENBQTJCRCxHQUFHLENBQUNTLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JYLEdBQUcsQ0FBQ1ksTUFBL0IsQ0FBRCxDQUE5QjtBQUNBOztBQUNEbEIsSUFBQUEsa0JBQWtCLENBQUNDLHFCQUFELENBQWxCO0FBQ0EsR0FWRDs7QUFXQyxNQUFJa0IsSUFBSSxHQUFHcEIsZUFBZSxDQUFDcUIsR0FBaEIsQ0FBb0IsQ0FBQ0MsT0FBRCxFQUFTUCxDQUFULGtCQUM5QixvQkFBQyxJQUFEO0FBQU0sSUFBQSxHQUFHLEVBQUVBO0FBQVgsS0FDRU8sT0FBTyxDQUFDQyxFQURWLE9BQ2VELE9BQU8sQ0FBQ0UsSUFEdkIsT0FDOEJGLE9BQU8sQ0FBQ0csS0FEdEMsT0FDOENILE9BQU8sQ0FBQ0ksUUFEdEQsT0FDaUVKLE9BQU8sQ0FBQ0ssT0FEekUsZUFFQyxvQkFBQyxPQUFELE9BRkQsQ0FEVSxDQUFYO0FBT0Qsc0JBQVEsb0JBQUMsSUFBRCxRQUFPUCxJQUFQLENBQVIsQ0E1Q3lDLENBNkN6QztBQUNBLENBOUNEOztBQWdEQVEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEMsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJ2luay10YWJsZScpXG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHQsIE5ld2xpbmV9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe2NoYXJpdGllcywgcHJvZmlsZUluZm99KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRjb25zdCBbcmFuZG9tQ2hhcml0aWVzLCBzZXRSYW5kb21DaGFyaXRpZXNdID0gdXNlU3RhdGUoW10pXG5cdGxldCB0d2VsdmVSYW5kb21DaGFyaXRpZXMgPSBbXVxuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0bGV0IGFsbENoYXJpdGllcyA9IFtdXG5cdFx0bGV0IGdldFByb2ZpbGUgPSBbXVxuXHRcdGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdFx0XHRyZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0XHRcdCAudGhlbigocmVzKSA9PiB7XG5cdFx0XHRcdCBhbGxDaGFyaXRpZXMucHVzaChyZXMpXG5cdFx0XHRcdH0pXG5cdFx0XHRcblx0XHRcdHJlYWRQcm9maWxlKHByb2ZpbGVJbmZvKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0XHRnZXRQcm9maWxlLnB1c2gocmVzKVxuXHRcdFx0XHRjb25zb2xlLmxvZyhgZmlyc3Qke2FsbENoYXJpdGllc31gKVxuXHRcdFx0IH0pXG5cdFx0fVxuXHRcdG15RnVuYygpXG5cdH0sIFtdKVxuXHRjb25zdCBoYW5kbGVDaGFyaXR5ID0gKHJlcykgPT4ge1xuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByZXMpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0bGV0IHBpY2sxMiA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChyZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmVzLmxlbmd0aCldKVxuXHRcdH1cblx0XHRzZXRSYW5kb21DaGFyaXRpZXModHdlbHZlUmFuZG9tQ2hhcml0aWVzKVxuXHR9XG5cdFx0bGV0IHRlc3QgPSByYW5kb21DaGFyaXRpZXMubWFwKChjaGFyaXR5LGkpID0+IChcblx0XHRcdDxUZXh0IGtleT17aX0+XG5cdFx0XHRcdHtjaGFyaXR5LmlkfSB7Y2hhcml0eS5uYW1lfSB7Y2hhcml0eS5zdGF0ZX0ge2NoYXJpdHkuY2F0ZWdvcnl9IHtjaGFyaXR5LmZlYXR1cmV9XG5cdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHQ8L1RleHQ+XG5cdFx0KSlcblx0XHRcblx0cmV0dXJuICg8VGV4dD57dGVzdH08L1RleHQ+KVxuXHQvLyByZXR1cm4gKDxUZXh0PkhFUkU8L1RleHQ+KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==