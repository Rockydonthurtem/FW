'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  useEffect(() => {
    // 	// let allCharities = []
    // 	// let getProfile = []
    // 	let myFunc = () => {
    // 		readCharities(charities)
    // 		.then((res) => {
    // 			allCharities.push(res)
    // 		})
    // 		readProfile(profileInfo)
    // 		.then((res) => {
    // 			getProfile.push(res)
    // 		})
    // 	}
    // 	myFunc()
    let allCharities = [];
    let getProfile = "";
    const promise1 = readCharities(charities).then(res => {
      allCharities.push(res);
    });
    const promise2 = readProfile(profileInfo).then(res => {
      getProfile = res;
    });
    Promise.all([promise1, promise2]).then(values => {
      handleCharity(allCharities, getProfile);
    });
  }, []);

  const handleCharity = (charityGroup, profileGroup) => {
    charityGroup = charityGroup.flat();
    const parsedData = [];

    for (let row of charityGroup) {
      parsedData.push(row);
    }

    for (let i = 0; i < 13; i++) {
      let randomIndex = Math.floor(Math.random() * charityGroup.length);
      let countAnimalRelated = 0;

      if (charityGroup[randomIndex].category = 'ANIMAL_RELATED') {
        let test = charityGroup;
        let testArr = [];
        console.log(charityGroup[randomIndex]);
      }

      let count = 0;

      if (profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()) {
        count = count + 1;
      }

      if (count < 5 && profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()) {
        continue;
      }

      twelveRandomCharities.push(charityGroup[randomIndex]);
    }

    setRandomCharities(twelveRandomCharities);
  }; // let test = randomCharities.map((charity,i) => (
  // 	<Text key={i}>
  // 		{charity.id} {charity.name} {charity.state} {charity.category} {charity.feature}
  // 		<Newline />
  // 	</Text>
  // ))
  // return (<Text>{test}</Text>)


  return /*#__PURE__*/React.createElement(Text, null, "HERE");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJhbGxDaGFyaXRpZXMiLCJnZXRQcm9maWxlIiwicHJvbWlzZTEiLCJ0aGVuIiwicmVzIiwicHVzaCIsInByb21pc2UyIiwiUHJvbWlzZSIsImFsbCIsInZhbHVlcyIsImhhbmRsZUNoYXJpdHkiLCJjaGFyaXR5R3JvdXAiLCJwcm9maWxlR3JvdXAiLCJmbGF0IiwicGFyc2VkRGF0YSIsInJvdyIsImkiLCJyYW5kb21JbmRleCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvdW50QW5pbWFsUmVsYXRlZCIsImNhdGVnb3J5IiwidGVzdCIsInRlc3RBcnIiLCJjb25zb2xlIiwibG9nIiwiY291bnQiLCJzdGF0ZSIsInRvTG93ZXJDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7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bUJDLFdBQW5CLE1BQW9DbkIsWUFBWSxDQUFDTSxXQUFELENBQVosQ0FBMEIsT0FBMUIsRUFBbUNhLFdBQW5DLEVBQXBELEVBQXFHO0FBQUM7QUFBVTs7QUFDaEgvQixNQUFBQSxxQkFBcUIsQ0FBQ00sSUFBdEIsQ0FBMkJNLFlBQVksQ0FBQ00sV0FBRCxDQUF2QztBQUNBOztBQUVEbkIsSUFBQUEsa0JBQWtCLENBQUNDLHFCQUFELENBQWxCO0FBQ0EsR0E3QkQsQ0FsQ3lDLENBZ0V4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFRDs7O0FBQ0Esc0JBQVEsb0JBQUMsSUFBRCxlQUFSO0FBQ0EsQ0F6RUQ7O0FBMkVBZ0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEMsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJ2luay10YWJsZScpXG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHQsIE5ld2xpbmV9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe2NoYXJpdGllcywgcHJvZmlsZUluZm99KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRjb25zdCBbcmFuZG9tQ2hhcml0aWVzLCBzZXRSYW5kb21DaGFyaXRpZXNdID0gdXNlU3RhdGUoW10pXG5cdGxldCB0d2VsdmVSYW5kb21DaGFyaXRpZXMgPSBbXVxuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Ly8gbGV0IGFsbENoYXJpdGllcyA9IFtdXG5cdC8vIFx0Ly8gbGV0IGdldFByb2ZpbGUgPSBbXVxuXHQvLyBcdGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdC8vIFx0XHRyZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0Ly8gXHRcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdFx0YWxsQ2hhcml0aWVzLnB1c2gocmVzKVxuXHQvLyBcdFx0fSlcblx0XHRcdFxuXHQvLyBcdFx0cmVhZFByb2ZpbGUocHJvZmlsZUluZm8pXG5cdC8vIFx0XHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHRcdGdldFByb2ZpbGUucHVzaChyZXMpXG5cdC8vIFx0XHR9KVxuXHQvLyBcdH1cblx0Ly8gXHRteUZ1bmMoKVxuXHRcdGxldCBhbGxDaGFyaXRpZXMgPSBbXVxuXHRcdGxldCBnZXRQcm9maWxlID0gXCJcIlxuXG5cdFx0Y29uc3QgcHJvbWlzZTEgPSByZWFkQ2hhcml0aWVzKGNoYXJpdGllcykudGhlbigocmVzKSA9PiB7YWxsQ2hhcml0aWVzLnB1c2gocmVzKX0pXG5cdFx0Y29uc3QgcHJvbWlzZTIgPSByZWFkUHJvZmlsZShwcm9maWxlSW5mbykudGhlbigocmVzKSA9PiB7Z2V0UHJvZmlsZSA9IHJlc30pXG5cdFx0UHJvbWlzZS5hbGwoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oKHZhbHVlcykgPT4ge1xuXHRcdFx0aGFuZGxlQ2hhcml0eShhbGxDaGFyaXRpZXMsIGdldFByb2ZpbGUpXG5cdFx0fSk7XG5cdH0sIFtdKVxuXG5cdGNvbnN0IGhhbmRsZUNoYXJpdHkgPSAoY2hhcml0eUdyb3VwLCBwcm9maWxlR3JvdXApID0+IHtcblx0XHRcblx0XHRjaGFyaXR5R3JvdXAgPSBjaGFyaXR5R3JvdXAuZmxhdCgpIFxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiBjaGFyaXR5R3JvdXApe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMzsgaSsrKSB7XG5cdFx0XHRsZXQgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyaXR5R3JvdXAubGVuZ3RoKVxuXG5cdFx0XHRsZXQgY291bnRBbmltYWxSZWxhdGVkID0gMFxuXG5cdFx0XHRpZihjaGFyaXR5R3JvdXBbcmFuZG9tSW5kZXhdLmNhdGVnb3J5ID0gJ0FOSU1BTF9SRUxBVEVEJyl7XG5cdFx0XHRcdGxldCB0ZXN0ID0gY2hhcml0eUdyb3VwXG5cdFx0XHRcdGxldCB0ZXN0QXJyID0gW11cblx0XHRcdFx0XG5cdFx0XHRcdGNvbnNvbGUubG9nKGNoYXJpdHlHcm91cFtyYW5kb21JbmRleF0pXG5cdFx0XHR9XG5cblx0XHRcdGxldCBjb3VudCA9IDBcblx0XHRcdGlmKHByb2ZpbGVHcm91cC5zdGF0ZS50b0xvd2VyQ2FzZSgpID09IGNoYXJpdHlHcm91cFtyYW5kb21JbmRleF1bJ3N0YXRlJ10udG9Mb3dlckNhc2UoKSl7XG5cdFx0XHRcdGNvdW50ID0gY291bnQgKyAxXG5cdFx0XHR9XG5cdFx0XHRpZihjb3VudCA8IDUgJiYgcHJvZmlsZUdyb3VwLnN0YXRlLnRvTG93ZXJDYXNlKCkgPT0gY2hhcml0eUdyb3VwW3JhbmRvbUluZGV4XVsnc3RhdGUnXS50b0xvd2VyQ2FzZSgpKXtjb250aW51ZTt9XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChjaGFyaXR5R3JvdXBbcmFuZG9tSW5kZXhdKVxuXHRcdH1cblxuXHRcdHNldFJhbmRvbUNoYXJpdGllcyh0d2VsdmVSYW5kb21DaGFyaXRpZXMpXG5cdH1cblx0XHQvLyBsZXQgdGVzdCA9IHJhbmRvbUNoYXJpdGllcy5tYXAoKGNoYXJpdHksaSkgPT4gKFxuXHRcdC8vIFx0PFRleHQga2V5PXtpfT5cblx0XHQvLyBcdFx0e2NoYXJpdHkuaWR9IHtjaGFyaXR5Lm5hbWV9IHtjaGFyaXR5LnN0YXRlfSB7Y2hhcml0eS5jYXRlZ29yeX0ge2NoYXJpdHkuZmVhdHVyZX1cblx0XHQvLyBcdFx0PE5ld2xpbmUgLz5cblx0XHQvLyBcdDwvVGV4dD5cblx0XHQvLyApKVxuXHRcdFxuXHQvLyByZXR1cm4gKDxUZXh0Pnt0ZXN0fTwvVGV4dD4pXG5cdHJldHVybiAoPFRleHQ+SEVSRTwvVGV4dD4pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19