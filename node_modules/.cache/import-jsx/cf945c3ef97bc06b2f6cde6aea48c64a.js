'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [a5, setA5] = useState([]);
  let twelveRandomCharities = []; // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
        fun(res);
      }); // .then(() => {
      // 	fun()
      // })
    };

    myFunc();
  }, []);

  const fun = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setA5(twelveRandomCharities);
  };

  let test = a5.map((a, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, a.id, " ", a.name, " "));
  return /*#__PURE__*/React.createElement(Text, null, test);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJjc3YiLCJmcyIsInJlYWRDaGFyaXRpZXMiLCJyZWFkUHJvZmlsZSIsIkFwcCIsIm5hbWUiLCJyYW5kNSIsInNldFJhbmQ1IiwiYTUiLCJzZXRBNSIsInR3ZWx2ZVJhbmRvbUNoYXJpdGllcyIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ0ZXN0IiwibWFwIiwiYSIsImlkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUE7QUFBRCxJQUFTTCxPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNTSxHQUFHLEdBQUdOLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1PLEVBQUUsR0FBR1AsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFUSxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1QsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1VLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JYLFFBQVEsQ0FBQyxFQUFELENBQWxDO0FBQ0EsUUFBTSxDQUFDWSxFQUFELEVBQUtDLEtBQUwsSUFBY2IsUUFBUSxDQUFDLEVBQUQsQ0FBNUI7QUFDQSxNQUFJYyxxQkFBcUIsR0FBRyxFQUE1QixDQVBvQyxDQVFwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQWIsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFFZixRQUFJYyxNQUFNLEdBQUcsTUFBTTtBQUNsQlQsTUFBQUEsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDQ08sSUFERCxDQUNPQyxHQUFELElBQVM7QUFDZDtBQUNBTixRQUFBQSxRQUFRLENBQUNNLEdBQUQsQ0FBUjtBQUNBQyxRQUFBQSxHQUFHLENBQUNELEdBQUQsQ0FBSDtBQUNBLE9BTEQsRUFEa0IsQ0FPbEI7QUFDQTtBQUNBO0FBQ0EsS0FWRDs7QUFXQUYsSUFBQUEsTUFBTTtBQUNOLEdBZFEsRUFjTixFQWRNLENBQVQ7O0FBZUEsUUFBTUcsR0FBRyxHQUFJRCxHQUFELElBQVM7QUFDcEI7QUFDQSxVQUFNRSxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVILEdBQWYsRUFBbUI7QUFDbEJFLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsR0FBaEI7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJULE1BQUFBLHFCQUFxQixDQUFDTyxJQUF0QixDQUEyQkosR0FBRyxDQUFDTyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCVCxHQUFHLENBQUNVLE1BQS9CLENBQUQsQ0FBOUI7QUFDQTs7QUFDRGQsSUFBQUEsS0FBSyxDQUFDQyxxQkFBRCxDQUFMO0FBQ0EsR0FYRDs7QUFZQyxNQUFJYyxJQUFJLEdBQUdoQixFQUFFLENBQUNpQixHQUFILENBQU8sQ0FBQ0MsQ0FBRCxFQUFHUCxDQUFILGtCQUNqQixvQkFBQyxJQUFEO0FBQU0sSUFBQSxHQUFHLEVBQUVBO0FBQVgsS0FBZU8sQ0FBQyxDQUFDQyxFQUFqQixPQUFzQkQsQ0FBQyxDQUFDckIsSUFBeEIsTUFEVSxDQUFYO0FBSUQsc0JBQVEsb0JBQUMsSUFBRCxRQUFPbUIsSUFBUCxDQUFSO0FBQ0EsQ0FsREQ7O0FBb0RBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJ6QixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnaW5rLXRhYmxlJylcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGNvbnN0IFthNSwgc2V0QTVdID0gdXNlU3RhdGUoW10pXG5cdGxldCB0d2VsdmVSYW5kb21DaGFyaXRpZXMgPSBbXVxuXHQvLyBsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHQvLyBcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0Ly8gXHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHQvLyBcdFx0c2V0UmFuZDUocmVzKVxuXHQvLyBcdH0pXG5cdC8vIFx0LnRoZW4oKCkgPT4ge1xuXHQvLyBcdFx0ZnVuKClcblx0Ly8gXHR9KVxuXHQvLyB9XG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cblx0XHRsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHRcdFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0XHRcdGZ1bihyZXMpXG5cdFx0XHR9KVxuXHRcdFx0Ly8gLnRoZW4oKCkgPT4ge1xuXHRcdFx0Ly8gXHRmdW4oKVxuXHRcdFx0Ly8gfSlcblx0XHR9XG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cdGNvbnN0IGZ1biA9IChyZXMpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByZXMpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0bGV0IHBpY2sxMiA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChyZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmVzLmxlbmd0aCldKVxuXHRcdH1cblx0XHRzZXRBNSh0d2VsdmVSYW5kb21DaGFyaXRpZXMpXG5cdH1cblx0XHRsZXQgdGVzdCA9IGE1Lm1hcCgoYSxpKSA9PiAoXG5cdFx0XHQ8VGV4dCBrZXk9e2l9PnthLmlkfSB7YS5uYW1lfSA8L1RleHQ+XG5cdFx0KSlcblx0XHRcblx0cmV0dXJuICg8VGV4dD57dGVzdH08L1RleHQ+KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==