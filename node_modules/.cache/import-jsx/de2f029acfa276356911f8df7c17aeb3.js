'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  let twelveRandomCharities = []; // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
        fun(res);
      }); // .then(() => {
      // 	fun()
      // })
    };

    myFunc();
  }, []);

  const fun = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    } // console.table(`parsed ${JSON.stringify(twelveRandomCharities)}`)

  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }
  // myFunc()


  const Basic = () => /*#__PURE__*/React.createElement(Table, {
    data: twelveRandomCharities
  });

  console.log(`basic ${Basic}`);
  return /*#__PURE__*/React.createElement(Text, null, "Basic");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJjc3YiLCJmcyIsInJlYWRDaGFyaXRpZXMiLCJyZWFkUHJvZmlsZSIsIkFwcCIsIm5hbWUiLCJyYW5kNSIsInNldFJhbmQ1IiwidHdlbHZlUmFuZG9tQ2hhcml0aWVzIiwibXlGdW5jIiwidGhlbiIsInJlcyIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJwdXNoIiwicGljazEyIiwiaSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsIkJhc2ljIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNFLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkgsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNLLEVBQUFBO0FBQUQsSUFBU0wsT0FBTyxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTU0sR0FBRyxHQUFHTixPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNTyxFQUFFLEdBQUdQLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRVEsRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNULE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNVSxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxJQUFJLEdBQUc7QUFBUixDQUFELEtBQXlCO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxRQUFRLENBQUMsRUFBRCxDQUFsQztBQUNBLE1BQUlZLHFCQUFxQixHQUFHLEVBQTVCLENBTm9DLENBT3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBWCxFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUVmLFFBQUlZLE1BQU0sR0FBRyxNQUFNO0FBQ2xCUCxNQUFBQSxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNDSyxJQURELENBQ09DLEdBQUQsSUFBUztBQUNkO0FBQ0FKLFFBQUFBLFFBQVEsQ0FBQ0ksR0FBRCxDQUFSO0FBQ0FDLFFBQUFBLEdBQUcsQ0FBQ0QsR0FBRCxDQUFIO0FBQ0EsT0FMRCxFQURrQixDQU9sQjtBQUNBO0FBQ0E7QUFDQSxLQVZEOztBQVdBRixJQUFBQSxNQUFNO0FBQ04sR0FkUSxFQWNOLEVBZE0sQ0FBVDs7QUFlQSxRQUFNRyxHQUFHLEdBQUlELEdBQUQsSUFBUztBQUNwQjtBQUNBLFVBQU1FLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZUgsR0FBZixFQUFtQjtBQUNsQkUsTUFBQUEsVUFBVSxDQUFDRSxJQUFYLENBQWdCRCxHQUFoQjtBQUNBOztBQUNELFFBQUlFLE1BQU0sR0FBRyxFQUFiOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUM1QlQsTUFBQUEscUJBQXFCLENBQUNPLElBQXRCLENBQTJCSixHQUFHLENBQUNPLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JULEdBQUcsQ0FBQ1UsTUFBL0IsQ0FBRCxDQUE5QjtBQUNBLEtBVG1CLENBV3BCOztBQUNBLEdBWkQsQ0FoQ29DLENBNkNwQztBQUNDO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRCxRQUFNQyxLQUFLLEdBQUcsbUJBQU0sb0JBQUMsS0FBRDtBQUFPLElBQUEsSUFBSSxFQUFFZDtBQUFiLElBQXBCOztBQUNBZSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxTQUFRRixLQUFNLEVBQTNCO0FBQ0Esc0JBQVEsb0JBQUMsSUFBRCxnQkFBUjtBQUNBLENBckREOztBQXVEQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJ2luay10YWJsZScpXG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRsZXQgdHdlbHZlUmFuZG9tQ2hhcml0aWVzID0gW11cblx0Ly8gbGV0IG15RnVuYyA9ICgpID0+IHtcblx0Ly8gXHRyZWFkQ2hhcml0aWVzKG5hbWUpXG5cdC8vIFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0Ly8gXHRcdHNldFJhbmQ1KHJlcylcblx0Ly8gXHR9KVxuXHQvLyBcdC50aGVuKCgpID0+IHtcblx0Ly8gXHRcdGZ1bigpXG5cdC8vIFx0fSlcblx0Ly8gfVxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXG5cdFx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0XHRcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0XHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0XHRcdFx0c2V0UmFuZDUocmVzKVxuXHRcdFx0XHRmdW4ocmVzKVxuXHRcdFx0fSlcblx0XHRcdC8vIC50aGVuKCgpID0+IHtcblx0XHRcdC8vIFx0ZnVuKClcblx0XHRcdC8vIH0pXG5cdFx0fVxuXHRcdG15RnVuYygpXG5cdH0sIFtdKVxuXHRjb25zdCBmdW4gPSAocmVzKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmVzKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0dHdlbHZlUmFuZG9tQ2hhcml0aWVzLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHR9XG5cdFx0XG5cdFx0Ly8gY29uc29sZS50YWJsZShgcGFyc2VkICR7SlNPTi5zdHJpbmdpZnkodHdlbHZlUmFuZG9tQ2hhcml0aWVzKX1gKVxuXHR9XG5cdC8vIGlmKG5hbWUpe1xuXHRcdC8vIFx0Y29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7bmFtZX1gKVxuXHRcdC8vIFx0bXlGdW5jKG5hbWUpXG5cdFx0Ly8gfVxuXHRcdC8vIG15RnVuYygpXG5cdGNvbnN0IEJhc2ljID0gKCkgPT4gPFRhYmxlIGRhdGE9e3R3ZWx2ZVJhbmRvbUNoYXJpdGllc30gLz5cblx0Y29uc29sZS5sb2coYGJhc2ljICR7QmFzaWN9YClcblx0cmV0dXJuICg8VGV4dD5CYXNpYzwvVGV4dD4pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19