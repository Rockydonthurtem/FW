'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]); // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
        fun(res);
      }); // .then(() => {
      // 	fun()
      // })
    };

    myFunc();
  }, []);

  const fun = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      pick12.push(res[Math.floor(Math.random() * res.length)]);
    }

    console.log(`parsed ${pick12}`);
  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }
  // myFunc()


  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNDLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkYsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUcsS0FBSyxHQUFHSCxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNJLEVBQUFBO0FBQUQsSUFBU0osT0FBTyxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTUssR0FBRyxHQUFHTCxPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNTSxFQUFFLEdBQUdOLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRU8sRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNSLE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNUyxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxJQUFJLEdBQUc7QUFBUixDQUFELEtBQXlCO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CWCxRQUFRLENBQUMsRUFBRCxDQUFsQyxDQUxvQyxDQU9wQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQUMsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFFZixRQUFJVyxNQUFNLEdBQUcsTUFBTTtBQUNsQk4sTUFBQUEsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDQ0ksSUFERCxDQUNPQyxHQUFELElBQVM7QUFDZDtBQUNBSCxRQUFBQSxRQUFRLENBQUNHLEdBQUQsQ0FBUjtBQUNBQyxRQUFBQSxHQUFHLENBQUNELEdBQUQsQ0FBSDtBQUNBLE9BTEQsRUFEa0IsQ0FPbEI7QUFDQTtBQUNBO0FBQ0EsS0FWRDs7QUFXQUYsSUFBQUEsTUFBTTtBQUNOLEdBZFEsRUFjTixFQWRNLENBQVQ7O0FBZUEsUUFBTUcsR0FBRyxHQUFJRCxHQUFELElBQVM7QUFDcEI7QUFDQSxVQUFNRSxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVILEdBQWYsRUFBbUI7QUFDbEJFLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsR0FBaEI7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJELE1BQUFBLE1BQU0sQ0FBQ0QsSUFBUCxDQUFZSixHQUFHLENBQUNPLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JULEdBQUcsQ0FBQ1UsTUFBL0IsQ0FBRCxDQUFmO0FBQ0E7O0FBQ0RDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFVBQVNQLE1BQU8sRUFBN0I7QUFFQSxHQVpELENBaENvQyxDQTZDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0Esc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBbkREOztBQXFEQVEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0Ly8gbGV0IG15RnVuYyA9ICgpID0+IHtcblx0Ly8gXHRyZWFkQ2hhcml0aWVzKG5hbWUpXG5cdC8vIFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0Ly8gXHRcdHNldFJhbmQ1KHJlcylcblx0Ly8gXHR9KVxuXHQvLyBcdC50aGVuKCgpID0+IHtcblx0Ly8gXHRcdGZ1bigpXG5cdC8vIFx0fSlcblx0Ly8gfVxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXG5cdFx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0XHRcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0XHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0XHRcdFx0c2V0UmFuZDUocmVzKVxuXHRcdFx0XHRmdW4ocmVzKVxuXHRcdFx0fSlcblx0XHRcdC8vIC50aGVuKCgpID0+IHtcblx0XHRcdC8vIFx0ZnVuKClcblx0XHRcdC8vIH0pXG5cdFx0fVxuXHRcdG15RnVuYygpXG5cdH0sIFtdKVxuXHRjb25zdCBmdW4gPSAocmVzKSA9PiB7XG5cdFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmVzKXtcblx0XHRcdHBhcnNlZERhdGEucHVzaChyb3cpXG5cdFx0fVxuXHRcdGxldCBwaWNrMTIgPSBbXVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xuXHRcdFx0cGljazEyLnB1c2gocmVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJlcy5sZW5ndGgpXSlcblx0XHR9XG5cdFx0Y29uc29sZS5sb2coYHBhcnNlZCAke3BpY2sxMn1gKVxuXG5cdH1cblx0Ly8gaWYobmFtZSl7XG5cdC8vIFx0Y29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7bmFtZX1gKVxuXHQvLyBcdG15RnVuYyhuYW1lKVxuXHQvLyB9XG5cdC8vIG15RnVuYygpXG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=