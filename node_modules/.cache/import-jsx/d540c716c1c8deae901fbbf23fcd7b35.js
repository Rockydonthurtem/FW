'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = () => {
    console.log(`(((((first))))) ${name}`);
    readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      setRand5(JSON.stringify(res));
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {// console.log(row)
      // const rowItems = row;
      // parsedData.push(rowItems + rowItems);
    } // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }

  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }


  myFunc();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsImNvbnNvbGUiLCJsb2ciLCJ0aGVuIiwicmVzIiwiSlNPTiIsInN0cmluZ2lmeSIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCRixPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ksRUFBQUE7QUFBRCxJQUFTSixPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSyxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1NLEVBQUUsR0FBR04sT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1IsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1TLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JYLFFBQVEsQ0FBQyxFQUFELENBQWxDOztBQUVBLE1BQUlZLE1BQU0sR0FBRyxNQUFNO0FBQ2xCQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxtQkFBa0JMLElBQUssRUFBcEM7QUFDQUgsSUFBQUEsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDQ00sSUFERCxDQUNPQyxHQUFELElBQVM7QUFDZDtBQUNBTCxNQUFBQSxRQUFRLENBQUNNLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixHQUFmLENBQUQsQ0FBUjtBQUNBRyxNQUFBQSxHQUFHO0FBQ0gsS0FMRDtBQU1BLEdBUkQ7O0FBVUEsUUFBTUEsR0FBRyxHQUFHLFlBQVk7QUFDdkI7QUFDQSxVQUFNQyxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVYLEtBQWYsRUFBcUIsQ0FDcEI7QUFDQTtBQUNBO0FBQ0EsS0FQc0IsQ0FRdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FiRCxDQWpCb0MsQ0ErQnBDO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUUsRUFBQUEsTUFBTTtBQUNOLHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQXJDRDs7QUF1Q0FVLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0XHRjb25zb2xlLmxvZyhgKCgoKChmaXJzdCkpKSkpICR7bmFtZX1gKVxuXHRcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0XHQudGhlbigocmVzKSA9PiB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0c2V0UmFuZDUoSlNPTi5zdHJpbmdpZnkocmVzKSlcblx0XHRcdGZ1bigpXG5cdFx0fSlcblx0fVxuXG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhyb3cpXG5cdFx0XHQvLyBjb25zdCByb3dJdGVtcyA9IHJvdztcblx0XHRcdC8vIHBhcnNlZERhdGEucHVzaChyb3dJdGVtcyArIHJvd0l0ZW1zKTtcblx0XHR9XG5cdFx0Ly8gZm9yKGxldCByb3cgb2YgdGV4dENvbnRlbnQuc3BsaXQoXCJcXG5cIikpe1xuXHRcdC8vIFx0Y29uc3Qgcm93SXRlbXMgPSByb3cuc3BsaXQoXCIsXCIpO1xuXHRcdC8vIFx0cGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zWzBdLnRvU3RyaW5nKCkgKyByb3dJdGVtc1sxXS50b1N0cmluZygpKTtcblx0XHQvLyB9XG5cdFx0XG5cdH1cblx0Ly8gaWYobmFtZSl7XG5cdC8vIFx0Y29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7bmFtZX1gKVxuXHQvLyBcdG15RnVuYyhuYW1lKVxuXHQvLyB9XG5cdG15RnVuYygpXG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=