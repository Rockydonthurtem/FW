'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]); // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
      }).then(() => {
        fun();
      });
    };

    myFunc();
  }, []);

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    }

    console.log(`parsed ${parsedData}`);
  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }
  // myFunc()


  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCRixPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ksRUFBQUE7QUFBRCxJQUFTSixPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSyxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1NLEVBQUUsR0FBR04sT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1IsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1TLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JYLFFBQVEsQ0FBQyxFQUFELENBQWxDLENBTG9DLENBT3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBQyxFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUVmLFFBQUlXLE1BQU0sR0FBRyxNQUFNO0FBQ2xCTixNQUFBQSxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNDSSxJQURELENBQ09DLEdBQUQsSUFBUztBQUNkO0FBQ0FILFFBQUFBLFFBQVEsQ0FBQ0csR0FBRCxDQUFSO0FBQ0EsT0FKRCxFQUtDRCxJQUxELENBS00sTUFBTTtBQUNYRSxRQUFBQSxHQUFHO0FBQ0gsT0FQRDtBQVFBLEtBVEQ7O0FBVUFILElBQUFBLE1BQU07QUFDTixHQWJRLEVBYU4sRUFiTSxDQUFUOztBQWNBLFFBQU1HLEdBQUcsR0FBRyxZQUFZO0FBQ3ZCO0FBQ0EsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlUCxLQUFmLEVBQXFCO0FBQ3BCTSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0E7O0FBRURFLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFVBQVNKLFVBQVcsRUFBakM7QUFDQSxHQVJELENBL0JvQyxDQXdDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0Esc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBOUNEOztBQWdEQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCZCxHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHQvLyBsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHQvLyBcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0Ly8gXHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHQvLyBcdFx0c2V0UmFuZDUocmVzKVxuXHQvLyBcdH0pXG5cdC8vIFx0LnRoZW4oKCkgPT4ge1xuXHQvLyBcdFx0ZnVuKClcblx0Ly8gXHR9KVxuXHQvLyB9XG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cblx0XHRsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHRcdFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0XHRmdW4oKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHRcblx0XHRjb25zb2xlLmxvZyhgcGFyc2VkICR7cGFyc2VkRGF0YX1gKVxuXHR9XG5cdC8vIGlmKG5hbWUpe1xuXHQvLyBcdGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke25hbWV9YClcblx0Ly8gXHRteUZ1bmMobmFtZSlcblx0Ly8gfVxuXHQvLyBteUZ1bmMoKVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19