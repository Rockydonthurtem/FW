'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  const myFunc = name => {
    console.log(`(((((first))))) ${name}`);
    readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      setRand5(JSON.stringify(res));
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {
      console.log(row); // const rowItems = row;
      // parsedData.push(rowItems + rowItems);
    } // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }

  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }


  myFunc();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsImNvbnNvbGUiLCJsb2ciLCJ0aGVuIiwicmVzIiwiSlNPTiIsInN0cmluZ2lmeSIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCRixPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ksRUFBQUE7QUFBRCxJQUFTSixPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSyxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1NLEVBQUUsR0FBR04sT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1IsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1TLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JYLFFBQVEsQ0FBQyxFQUFELENBQWxDOztBQUdDLFFBQU1ZLE1BQU0sR0FBS0gsSUFBRCxJQUFVO0FBQ3pCSSxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxtQkFBa0JMLElBQUssRUFBcEM7QUFDQUgsSUFBQUEsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDQ00sSUFERCxDQUNPQyxHQUFELElBQVM7QUFDZDtBQUNBTCxNQUFBQSxRQUFRLENBQUNNLElBQUksQ0FBQ0MsU0FBTCxDQUFlRixHQUFmLENBQUQsQ0FBUjtBQUNBRyxNQUFBQSxHQUFHO0FBQ0gsS0FMRDtBQU1BLEdBUkQ7O0FBV0QsUUFBTUEsR0FBRyxHQUFHLFlBQVk7QUFDdkI7QUFDQSxVQUFNQyxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVYLEtBQWYsRUFBcUI7QUFDcEJHLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTyxHQUFaLEVBRG9CLENBRXBCO0FBQ0E7QUFDQSxLQVBzQixDQVF2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQWJELENBbkJvQyxDQWlDcEM7QUFDQTtBQUNBO0FBQ0E7OztBQUNBVCxFQUFBQSxNQUFNO0FBQ04sc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBdkNEOztBQXlDQVUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCZixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHRcblx0XHRjb25zdCBteUZ1bmMgPSAgKG5hbWUpID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKGAoKCgoKGZpcnN0KSkpKSkgJHtuYW1lfWApXG5cdFx0XHRyZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0XHQudGhlbigocmVzKSA9PiB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdFx0XHRcdHNldFJhbmQ1KEpTT04uc3RyaW5naWZ5KHJlcykpXG5cdFx0XHRcdGZ1bigpXG5cdFx0XHR9KVxuXHRcdH1cblxuXG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHRjb25zb2xlLmxvZyhyb3cpXG5cdFx0XHQvLyBjb25zdCByb3dJdGVtcyA9IHJvdztcblx0XHRcdC8vIHBhcnNlZERhdGEucHVzaChyb3dJdGVtcyArIHJvd0l0ZW1zKTtcblx0XHR9XG5cdFx0Ly8gZm9yKGxldCByb3cgb2YgdGV4dENvbnRlbnQuc3BsaXQoXCJcXG5cIikpe1xuXHRcdC8vIFx0Y29uc3Qgcm93SXRlbXMgPSByb3cuc3BsaXQoXCIsXCIpO1xuXHRcdC8vIFx0cGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zWzBdLnRvU3RyaW5nKCkgKyByb3dJdGVtc1sxXS50b1N0cmluZygpKTtcblx0XHQvLyB9XG5cdFx0XG5cdH1cblx0Ly8gaWYobmFtZSl7XG5cdC8vIFx0Y29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7bmFtZX1gKVxuXHQvLyBcdG15RnVuYyhuYW1lKVxuXHQvLyB9XG5cdG15RnVuYygpXG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=