'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    let myArr = [];
    await readCharities(name).then(res => {
      myArr.push(res);
      setRand5(res);
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    } // console.log(`!!!!!!!!!!!!!!!!!! ${JSON.stringify(parsedData)}`)
    // console.log(`checking state ${Math.floor(Math.random() * parsedData.length)}`)


    for (let i = 0; i < 11; i++) {
      let ind = Math.floor(Math.random() * parsedData.length);
      console.log(`looping ${parsedData[ind]}`);
    }
  };

  if (name) {
    myFunc(name);
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwiaSIsImluZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUE7QUFBRCxJQUFhRCxPQUFPLENBQUMsT0FBRCxDQUExQjs7QUFDQSxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0csRUFBQUE7QUFBRCxJQUFTSCxPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSSxHQUFHLEdBQUdKLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1LLEVBQUUsR0FBR0wsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTSxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1AsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1RLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JWLFFBQVEsQ0FBQyxFQUFELENBQWxDOztBQUVBLE1BQUlXLE1BQU0sR0FBRyxNQUFPSCxJQUFQLElBQWdCO0FBQzVCLFFBQUlJLEtBQUssR0FBRyxFQUFaO0FBQ0EsVUFBTVAsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDTEssSUFESyxDQUNDQyxHQUFELElBQVM7QUFDZEYsTUFBQUEsS0FBSyxDQUFDRyxJQUFOLENBQVdELEdBQVg7QUFDQUosTUFBQUEsUUFBUSxDQUFDSSxHQUFELENBQVI7QUFDQSxLQUpLLEVBS0xELElBTEssQ0FLQSxNQUFNO0FBQ1hHLE1BQUFBLEdBQUc7QUFDSCxLQVBLLENBQU47QUFRQSxHQVZEOztBQVlBLFFBQU1BLEdBQUcsR0FBRyxZQUFZO0FBQ3ZCLFVBQU1DLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZVQsS0FBZixFQUFxQjtBQUNwQlEsTUFBQUEsVUFBVSxDQUFDRixJQUFYLENBQWdCRyxHQUFoQjtBQUNBLEtBSnNCLENBS3ZCO0FBQ0E7OztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUM1QixVQUFJQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JOLFVBQVUsQ0FBQ08sTUFBdEMsQ0FBVjtBQUNBQyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxXQUFVVCxVQUFVLENBQUNHLEdBQUQsQ0FBTSxFQUF2QztBQUVBO0FBQ0QsR0FaRDs7QUFjQSxNQUFHWixJQUFILEVBQVE7QUFDUEcsSUFBQUEsTUFBTSxDQUFDSCxJQUFELENBQU47QUFDQTs7QUFDRCxzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0FyQ0Q7O0FBdUNBbUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCckIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGV9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdGxldCBteUZ1bmMgPSBhc3luYyAobmFtZSkgPT4ge1xuXHRcdGxldCBteUFyciA9IFtdXG5cdFx0YXdhaXQgcmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdC50aGVuKChyZXMpID0+IHtcblx0XHRcdG15QXJyLnB1c2gocmVzKVxuXHRcdFx0c2V0UmFuZDUocmVzKVxuXHRcdH0pXG5cdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0ZnVuKClcblx0XHR9KVxuXHR9XG5cblx0Y29uc3QgZnVuID0gYXN5bmMgKCkgPT4ge1xuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHQvLyBjb25zb2xlLmxvZyhgISEhISEhISEhISEhISEhISEhICR7SlNPTi5zdHJpbmdpZnkocGFyc2VkRGF0YSl9YClcblx0XHQvLyBjb25zb2xlLmxvZyhgY2hlY2tpbmcgc3RhdGUgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXJzZWREYXRhLmxlbmd0aCl9YClcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDExOyBpKyspIHtcblx0XHRcdGxldCBpbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXJzZWREYXRhLmxlbmd0aClcblx0XHRcdGNvbnNvbGUubG9nKGBsb29waW5nICR7cGFyc2VkRGF0YVtpbmRdfWApXG5cdFx0XHRcblx0XHR9XG5cdH1cblxuXHRpZihuYW1lKXtcblx0XHRteUZ1bmMobmFtZSlcblx0fVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19