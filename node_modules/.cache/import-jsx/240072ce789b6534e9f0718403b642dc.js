'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  useEffect(() => {
    const myFunc = () => {
      console.log(`(((((first))))) ${name}`);
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(JSON.stringify(res));
        fun();
      });
    };

    myFunc();
  }, []);

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {
      console.log(row); // const rowItems = row;
      // parsedData.push(rowItems + rowItems);
    } // for(let row of textContent.split("\n")){
    // 	const rowItems = row.split(",");
    // 	parsedData.push(rowItems[0].toString() + rowItems[1].toString());
    // }

  }; // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }


  myFunc();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsImNvbnNvbGUiLCJsb2ciLCJ0aGVuIiwicmVzIiwiSlNPTiIsInN0cmluZ2lmeSIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCRixPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ksRUFBQUE7QUFBRCxJQUFTSixPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSyxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1NLEVBQUUsR0FBR04sT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1IsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1TLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JYLFFBQVEsQ0FBQyxFQUFELENBQWxDO0FBRUFDLEVBQUFBLFNBQVMsQ0FBQyxNQUFNO0FBQ2YsVUFBTVcsTUFBTSxHQUFJLE1BQU07QUFDckJDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLG1CQUFrQkwsSUFBSyxFQUFwQztBQUNBSCxNQUFBQSxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNDTSxJQURELENBQ09DLEdBQUQsSUFBUztBQUNkO0FBQ0FMLFFBQUFBLFFBQVEsQ0FBQ00sSUFBSSxDQUFDQyxTQUFMLENBQWVGLEdBQWYsQ0FBRCxDQUFSO0FBQ0FHLFFBQUFBLEdBQUc7QUFDSCxPQUxEO0FBTUEsS0FSRDs7QUFTQVAsSUFBQUEsTUFBTTtBQUNOLEdBWFEsRUFXTixFQVhNLENBQVQ7O0FBYUEsUUFBTU8sR0FBRyxHQUFHLFlBQVk7QUFDdkI7QUFDQSxVQUFNQyxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVYLEtBQWYsRUFBcUI7QUFDcEJHLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTyxHQUFaLEVBRG9CLENBRXBCO0FBQ0E7QUFDQSxLQVBzQixDQVF2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQWJELENBcEJvQyxDQWtDcEM7QUFDQTtBQUNBO0FBQ0E7OztBQUNBVCxFQUFBQSxNQUFNO0FBQ04sc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBeENEOztBQTBDQVUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCZixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGNvbnN0IG15RnVuYyA9ICAoKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZyhgKCgoKChmaXJzdCkpKSkpICR7bmFtZX1gKVxuXHRcdFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0XHRzZXRSYW5kNShKU09OLnN0cmluZ2lmeShyZXMpKVxuXHRcdFx0XHRmdW4oKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cblx0Y29uc3QgZnVuID0gYXN5bmMgKCkgPT4ge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiKioqKioqKioqKipcIiwgcmFuZDVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKV0pXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJhbmQ1KXtcblx0XHRcdGNvbnNvbGUubG9nKHJvdylcblx0XHRcdC8vIGNvbnN0IHJvd0l0ZW1zID0gcm93O1xuXHRcdFx0Ly8gcGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zICsgcm93SXRlbXMpO1xuXHRcdH1cblx0XHQvLyBmb3IobGV0IHJvdyBvZiB0ZXh0Q29udGVudC5zcGxpdChcIlxcblwiKSl7XG5cdFx0Ly8gXHRjb25zdCByb3dJdGVtcyA9IHJvdy5zcGxpdChcIixcIik7XG5cdFx0Ly8gXHRwYXJzZWREYXRhLnB1c2gocm93SXRlbXNbMF0udG9TdHJpbmcoKSArIHJvd0l0ZW1zWzFdLnRvU3RyaW5nKCkpO1xuXHRcdC8vIH1cblx0XHRcblx0fVxuXHQvLyBpZihuYW1lKXtcblx0Ly8gXHRjb25zb2xlLmxvZyhgY2hlY2tpbmcgc3RhdGUgJHtuYW1lfWApXG5cdC8vIFx0bXlGdW5jKG5hbWUpXG5cdC8vIH1cblx0bXlGdW5jKClcblx0cmV0dXJuIDxUZXh0PkhFUkUgPC9UZXh0PlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==