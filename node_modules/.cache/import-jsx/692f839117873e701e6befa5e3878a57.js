'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  useEffect(() => {
    // 	// let allCharities = []
    // 	// let getProfile = []
    // 	let myFunc = () => {
    // 		readCharities(charities)
    // 		.then((res) => {
    // 			allCharities.push(res)
    // 		})
    // 		readProfile(profileInfo)
    // 		.then((res) => {
    // 			getProfile.push(res)
    // 		})
    // 	}
    // 	myFunc()
    let allCharities = [];
    let getProfile = "";
    const promise1 = readCharities(charities).then(res => {
      allCharities.push(res);
    });
    const promise2 = readProfile(profileInfo).then(res => {
      getProfile = res;
    });
    Promise.all([promise1, promise2]).then(values => {
      handleCharity(allCharities, getProfile);
    });
  }, []);

  const handleCharity = (charityGroup, profileGroup) => {
    charityGroup = charityGroup.flat();
    const parsedData = [];

    for (let row of charityGroup) {
      parsedData.push(row);
    }

    for (let i = 0; i < 13; i++) {
      let randomIndex = Math.floor(Math.random() * charityGroup.length);
      let countAnimalRelated = 0;

      if (profileGroup.category = 'ANIMAL_RELATED') {
        let test = charityGroup.filter(cat => cat.category == "ANIMAL_RELATED");
        console.log(`testing ${test}`);
      }

      let count = 0;

      if (profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()) {
        count = count + 1;
      }

      if (count < 5 && profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()) {
        continue;
      }

      twelveRandomCharities.push(charityGroup[randomIndex]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test); // return (<Text>HERE</Text>)
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJhbGxDaGFyaXRpZXMiLCJnZXRQcm9maWxlIiwicHJvbWlzZTEiLCJ0aGVuIiwicmVzIiwicHVzaCIsInByb21pc2UyIiwiUHJvbWlzZSIsImFsbCIsInZhbHVlcyIsImhhbmRsZUNoYXJpdHkiLCJjaGFyaXR5R3JvdXAiLCJwcm9maWxlR3JvdXAiLCJmbGF0IiwicGFyc2VkRGF0YSIsInJvdyIsImkiLCJyYW5kb21JbmRleCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvdW50QW5pbWFsUmVsYXRlZCIsImNhdGVnb3J5IiwidGVzdCIsImZpbHRlciIsImNhdCIsImNvbnNvbGUiLCJsb2ciLCJjb3VudCIsInN0YXRlIiwidG9Mb3dlckNhc2UiLCJtYXAiLCJjaGFyaXR5IiwiaWQiLCJuYW1lIiwiZmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNFLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkgsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNLLEVBQUFBLElBQUQ7QUFBT0MsRUFBQUE7QUFBUCxJQUFrQk4sT0FBTyxDQUFDLEtBQUQsQ0FBL0I7O0FBQ0EsTUFBTU8sR0FBRyxHQUFHUCxPQUFPLENBQUMsWUFBRCxDQUFuQjs7QUFDQSxNQUFNUSxFQUFFLEdBQUdSLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU07QUFBRVMsRUFBQUEsYUFBRjtBQUFpQkMsRUFBQUE7QUFBakIsSUFBaUNWLE9BQU8sQ0FBQyxnQkFBRCxDQUE5Qzs7QUFDQSxNQUFNVyxHQUFHLEdBQUcsQ0FBQztBQUFDQyxFQUFBQSxTQUFEO0FBQVlDLEVBQUFBO0FBQVosQ0FBRCxLQUE4QjtBQUN6QztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQmIsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFDQSxRQUFNLENBQUNjLGVBQUQsRUFBa0JDLGtCQUFsQixJQUF3Q2YsUUFBUSxDQUFDLEVBQUQsQ0FBdEQ7QUFDQSxNQUFJZ0IscUJBQXFCLEdBQUcsRUFBNUI7QUFFQWYsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxRQUFJZ0IsWUFBWSxHQUFHLEVBQW5CO0FBQ0EsUUFBSUMsVUFBVSxHQUFHLEVBQWpCO0FBRUEsVUFBTUMsUUFBUSxHQUFHWixhQUFhLENBQUNHLFNBQUQsQ0FBYixDQUF5QlUsSUFBekIsQ0FBK0JDLEdBQUQsSUFBUztBQUFDSixNQUFBQSxZQUFZLENBQUNLLElBQWIsQ0FBa0JELEdBQWxCO0FBQXVCLEtBQS9ELENBQWpCO0FBQ0EsVUFBTUUsUUFBUSxHQUFHZixXQUFXLENBQUNHLFdBQUQsQ0FBWCxDQUF5QlMsSUFBekIsQ0FBK0JDLEdBQUQsSUFBUztBQUFDSCxNQUFBQSxVQUFVLEdBQUdHLEdBQWI7QUFBaUIsS0FBekQsQ0FBakI7QUFDQUcsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksQ0FBQ04sUUFBRCxFQUFXSSxRQUFYLENBQVosRUFBa0NILElBQWxDLENBQXdDTSxNQUFELElBQVk7QUFDbERDLE1BQUFBLGFBQWEsQ0FBQ1YsWUFBRCxFQUFlQyxVQUFmLENBQWI7QUFDQSxLQUZEO0FBR0EsR0F2QlEsRUF1Qk4sRUF2Qk0sQ0FBVDs7QUF5QkEsUUFBTVMsYUFBYSxHQUFHLENBQUNDLFlBQUQsRUFBZUMsWUFBZixLQUFnQztBQUVyREQsSUFBQUEsWUFBWSxHQUFHQSxZQUFZLENBQUNFLElBQWIsRUFBZjtBQUNBLFVBQU1DLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZUosWUFBZixFQUE0QjtBQUMzQkcsTUFBQUEsVUFBVSxDQUFDVCxJQUFYLENBQWdCVSxHQUFoQjtBQUNBOztBQUVELFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUM1QixVQUFJQyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JULFlBQVksQ0FBQ1UsTUFBeEMsQ0FBbEI7QUFFQSxVQUFJQyxrQkFBa0IsR0FBRyxDQUF6Qjs7QUFFQSxVQUFHVixZQUFZLENBQUNXLFFBQWIsR0FBd0IsZ0JBQTNCLEVBQTRDO0FBQzNDLFlBQUlDLElBQUksR0FBR2IsWUFBWSxDQUFDYyxNQUFiLENBQXFCQyxHQUFHLElBQUlBLEdBQUcsQ0FBQ0gsUUFBSixJQUFnQixnQkFBNUMsQ0FBWDtBQUNBSSxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxXQUFVSixJQUFLLEVBQTVCO0FBQ0E7O0FBRUQsVUFBSUssS0FBSyxHQUFHLENBQVo7O0FBQ0EsVUFBR2pCLFlBQVksQ0FBQ2tCLEtBQWIsQ0FBbUJDLFdBQW5CLE1BQW9DcEIsWUFBWSxDQUFDTSxXQUFELENBQVosQ0FBMEIsT0FBMUIsRUFBbUNjLFdBQW5DLEVBQXZDLEVBQXdGO0FBQ3ZGRixRQUFBQSxLQUFLLEdBQUdBLEtBQUssR0FBRyxDQUFoQjtBQUNBOztBQUNELFVBQUdBLEtBQUssR0FBRyxDQUFSLElBQWFqQixZQUFZLENBQUNrQixLQUFiLENBQW1CQyxXQUFuQixNQUFvQ3BCLFlBQVksQ0FBQ00sV0FBRCxDQUFaLENBQTBCLE9BQTFCLEVBQW1DYyxXQUFuQyxFQUFwRCxFQUFxRztBQUFDO0FBQVU7O0FBQ2hIaEMsTUFBQUEscUJBQXFCLENBQUNNLElBQXRCLENBQTJCTSxZQUFZLENBQUNNLFdBQUQsQ0FBdkM7QUFDQTs7QUFFRG5CLElBQUFBLGtCQUFrQixDQUFDQyxxQkFBRCxDQUFsQjtBQUNBLEdBM0JEOztBQTRCQyxNQUFJeUIsSUFBSSxHQUFHM0IsZUFBZSxDQUFDbUMsR0FBaEIsQ0FBb0IsQ0FBQ0MsT0FBRCxFQUFTakIsQ0FBVCxrQkFDOUIsb0JBQUMsSUFBRDtBQUFNLElBQUEsR0FBRyxFQUFFQTtBQUFYLEtBQ0VpQixPQUFPLENBQUNDLEVBRFYsT0FDZUQsT0FBTyxDQUFDRSxJQUR2QixPQUM4QkYsT0FBTyxDQUFDSCxLQUR0QyxPQUM4Q0csT0FBTyxDQUFDVixRQUR0RCxPQUNpRVUsT0FBTyxDQUFDRyxPQUR6RSxlQUVDLG9CQUFDLE9BQUQsT0FGRCxDQURVLENBQVg7QUFPRCxzQkFBUSxvQkFBQyxJQUFELFFBQU9aLElBQVAsQ0FBUixDQXJFeUMsQ0FzRXpDO0FBQ0EsQ0F2RUQ7O0FBeUVBYSxNQUFNLENBQUNDLE9BQVAsR0FBaUI5QyxHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnaW5rLXRhYmxlJylcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dCwgTmV3bGluZX0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7Y2hhcml0aWVzLCBwcm9maWxlSW5mb30pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGNvbnN0IFtyYW5kb21DaGFyaXRpZXMsIHNldFJhbmRvbUNoYXJpdGllc10gPSB1c2VTdGF0ZShbXSlcblx0bGV0IHR3ZWx2ZVJhbmRvbUNoYXJpdGllcyA9IFtdXG5cblx0dXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHQvLyBsZXQgYWxsQ2hhcml0aWVzID0gW11cblx0Ly8gXHQvLyBsZXQgZ2V0UHJvZmlsZSA9IFtdXG5cdC8vIFx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0Ly8gXHRcdHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzKVxuXHQvLyBcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0XHRhbGxDaGFyaXRpZXMucHVzaChyZXMpXG5cdC8vIFx0XHR9KVxuXHRcdFx0XG5cdC8vIFx0XHRyZWFkUHJvZmlsZShwcm9maWxlSW5mbylcblx0Ly8gXHRcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdFx0Z2V0UHJvZmlsZS5wdXNoKHJlcylcblx0Ly8gXHRcdH0pXG5cdC8vIFx0fVxuXHQvLyBcdG15RnVuYygpXG5cdFx0bGV0IGFsbENoYXJpdGllcyA9IFtdXG5cdFx0bGV0IGdldFByb2ZpbGUgPSBcIlwiXG5cblx0XHRjb25zdCBwcm9taXNlMSA9IHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzKS50aGVuKChyZXMpID0+IHthbGxDaGFyaXRpZXMucHVzaChyZXMpfSlcblx0XHRjb25zdCBwcm9taXNlMiA9IHJlYWRQcm9maWxlKHByb2ZpbGVJbmZvKS50aGVuKChyZXMpID0+IHtnZXRQcm9maWxlID0gcmVzfSlcblx0XHRQcm9taXNlLmFsbChbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbigodmFsdWVzKSA9PiB7XG5cdFx0XHRoYW5kbGVDaGFyaXR5KGFsbENoYXJpdGllcywgZ2V0UHJvZmlsZSlcblx0XHR9KTtcblx0fSwgW10pXG5cblx0Y29uc3QgaGFuZGxlQ2hhcml0eSA9IChjaGFyaXR5R3JvdXAsIHByb2ZpbGVHcm91cCkgPT4ge1xuXHRcdFxuXHRcdGNoYXJpdHlHcm91cCA9IGNoYXJpdHlHcm91cC5mbGF0KCkgXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIGNoYXJpdHlHcm91cCl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHRcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDEzOyBpKyspIHtcblx0XHRcdGxldCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJpdHlHcm91cC5sZW5ndGgpXG5cblx0XHRcdGxldCBjb3VudEFuaW1hbFJlbGF0ZWQgPSAwXG5cblx0XHRcdGlmKHByb2ZpbGVHcm91cC5jYXRlZ29yeSA9ICdBTklNQUxfUkVMQVRFRCcpe1xuXHRcdFx0XHRsZXQgdGVzdCA9IGNoYXJpdHlHcm91cC5maWx0ZXIoIGNhdCA9PiBjYXQuY2F0ZWdvcnkgPT0gXCJBTklNQUxfUkVMQVRFRFwiKVxuXHRcdFx0XHRjb25zb2xlLmxvZyhgdGVzdGluZyAke3Rlc3R9YClcblx0XHRcdH1cblxuXHRcdFx0bGV0IGNvdW50ID0gMFxuXHRcdFx0aWYocHJvZmlsZUdyb3VwLnN0YXRlLnRvTG93ZXJDYXNlKCkgPT0gY2hhcml0eUdyb3VwW3JhbmRvbUluZGV4XVsnc3RhdGUnXS50b0xvd2VyQ2FzZSgpKXtcblx0XHRcdFx0Y291bnQgPSBjb3VudCArIDFcblx0XHRcdH1cblx0XHRcdGlmKGNvdW50IDwgNSAmJiBwcm9maWxlR3JvdXAuc3RhdGUudG9Mb3dlckNhc2UoKSA9PSBjaGFyaXR5R3JvdXBbcmFuZG9tSW5kZXhdWydzdGF0ZSddLnRvTG93ZXJDYXNlKCkpe2NvbnRpbnVlO31cblx0XHRcdHR3ZWx2ZVJhbmRvbUNoYXJpdGllcy5wdXNoKGNoYXJpdHlHcm91cFtyYW5kb21JbmRleF0pXG5cdFx0fVxuXG5cdFx0c2V0UmFuZG9tQ2hhcml0aWVzKHR3ZWx2ZVJhbmRvbUNoYXJpdGllcylcblx0fVxuXHRcdGxldCB0ZXN0ID0gcmFuZG9tQ2hhcml0aWVzLm1hcCgoY2hhcml0eSxpKSA9PiAoXG5cdFx0XHQ8VGV4dCBrZXk9e2l9PlxuXHRcdFx0XHR7Y2hhcml0eS5pZH0ge2NoYXJpdHkubmFtZX0ge2NoYXJpdHkuc3RhdGV9IHtjaGFyaXR5LmNhdGVnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9UZXh0PlxuXHRcdCkpXG5cdFx0XG5cdHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcblx0Ly8gcmV0dXJuICg8VGV4dD5IRVJFPC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=