'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = []; // useEffect(() => {
  // 	// let allCharities = []
  // 	// let getProfile = []
  // 	let myFunc = () => {
  // 		readCharities(charities)
  // 		.then((res) => {
  // 			allCharities.push(res)
  // 		})
  // 		readProfile(profileInfo)
  // 		.then((res) => {
  // 			getProfile.push(res)
  // 			console.log(`first${JSON.stringify(getProfile)}`)
  // 		})
  // 	}
  // 	myFunc()
  // }, [])

  let allCharities = [];
  let getProfile = [];
  const promise1 = readCharities(charities).then(res => {
    allCharities.push(res);
  });
  const promise2 = readProfile(profileInfo).then(res => {
    getProfile.push(res);
  });
  Promise.all([promise1, promise2]).then(values => {
    handleCharity(promise1, promise2);
  });

  const handleCharity = (charityGroup, profileGroup) => {
    console.log(`1 and 2 ${(charityGroup, profileGroup)}`);
    const parsedData = []; // for(let row of res){
    // 	parsedData.push(row)
    // }
    // let pick12 = []
    // for (let i = 0; i < 12; i++) {
    // 	twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)])
    // }
    // setRandomCharities(twelveRandomCharities)
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test); // return (<Text>HERE</Text>)
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJhbGxDaGFyaXRpZXMiLCJnZXRQcm9maWxlIiwicHJvbWlzZTEiLCJ0aGVuIiwicmVzIiwicHVzaCIsInByb21pc2UyIiwiUHJvbWlzZSIsImFsbCIsInZhbHVlcyIsImhhbmRsZUNoYXJpdHkiLCJjaGFyaXR5R3JvdXAiLCJwcm9maWxlR3JvdXAiLCJjb25zb2xlIiwibG9nIiwicGFyc2VkRGF0YSIsInRlc3QiLCJtYXAiLCJjaGFyaXR5IiwiaSIsImlkIiwibmFtZSIsInN0YXRlIiwiY2F0ZWdvcnkiLCJmZWF0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7QUFDQSxNQUFNTyxHQUFHLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1RLEVBQUUsR0FBR1IsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFUyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1YsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1XLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLFNBQUQ7QUFBWUMsRUFBQUE7QUFBWixDQUFELEtBQThCO0FBQ3pDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CYixRQUFRLENBQUMsRUFBRCxDQUFsQztBQUNBLFFBQU0sQ0FBQ2MsZUFBRCxFQUFrQkMsa0JBQWxCLElBQXdDZixRQUFRLENBQUMsRUFBRCxDQUF0RDtBQUNBLE1BQUlnQixxQkFBcUIsR0FBRyxFQUE1QixDQVB5QyxDQVN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFJQyxZQUFZLEdBQUcsRUFBbkI7QUFDQSxNQUFJQyxVQUFVLEdBQUcsRUFBakI7QUFFQSxRQUFNQyxRQUFRLEdBQUdaLGFBQWEsQ0FBQ0csU0FBRCxDQUFiLENBQXlCVSxJQUF6QixDQUErQkMsR0FBRCxJQUFTO0FBQUNKLElBQUFBLFlBQVksQ0FBQ0ssSUFBYixDQUFrQkQsR0FBbEI7QUFBdUIsR0FBL0QsQ0FBakI7QUFDQSxRQUFNRSxRQUFRLEdBQUdmLFdBQVcsQ0FBQ0csV0FBRCxDQUFYLENBQXlCUyxJQUF6QixDQUErQkMsR0FBRCxJQUFTO0FBQUNILElBQUFBLFVBQVUsQ0FBQ0ksSUFBWCxDQUFnQkQsR0FBaEI7QUFBcUIsR0FBN0QsQ0FBakI7QUFDQUcsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksQ0FBQ04sUUFBRCxFQUFXSSxRQUFYLENBQVosRUFBa0NILElBQWxDLENBQXdDTSxNQUFELElBQVk7QUFDbERDLElBQUFBLGFBQWEsQ0FBQ1IsUUFBRCxFQUFXSSxRQUFYLENBQWI7QUFDRSxHQUZIOztBQVlBLFFBQU1JLGFBQWEsR0FBRyxDQUFDQyxZQUFELEVBQWVDLFlBQWYsS0FBZ0M7QUFDckRDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFdBQUQsQ0FBV0gsWUFBWSxFQUFFQyxZQUF6QixDQUFzQyxFQUFsRDtBQUNBLFVBQU1HLFVBQVUsR0FBRyxFQUFuQixDQUZxRCxDQUdyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FYRDs7QUFZQyxNQUFJQyxJQUFJLEdBQUduQixlQUFlLENBQUNvQixHQUFoQixDQUFvQixDQUFDQyxPQUFELEVBQVNDLENBQVQsa0JBQzlCLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEdBQUcsRUFBRUE7QUFBWCxLQUNFRCxPQUFPLENBQUNFLEVBRFYsT0FDZUYsT0FBTyxDQUFDRyxJQUR2QixPQUM4QkgsT0FBTyxDQUFDSSxLQUR0QyxPQUM4Q0osT0FBTyxDQUFDSyxRQUR0RCxPQUNpRUwsT0FBTyxDQUFDTSxPQUR6RSxlQUVDLG9CQUFDLE9BQUQsT0FGRCxDQURVLENBQVg7QUFPRCxzQkFBUSxvQkFBQyxJQUFELFFBQU9SLElBQVAsQ0FBUixDQS9EeUMsQ0FnRXpDO0FBQ0EsQ0FqRUQ7O0FBbUVBUyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQyxHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnaW5rLXRhYmxlJylcbmNvbnN0IHt1c2VTdGF0ZSwgdXNlRWZmZWN0fSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dCwgTmV3bGluZX0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7Y2hhcml0aWVzLCBwcm9maWxlSW5mb30pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdGNvbnN0IFtyYW5kb21DaGFyaXRpZXMsIHNldFJhbmRvbUNoYXJpdGllc10gPSB1c2VTdGF0ZShbXSlcblx0bGV0IHR3ZWx2ZVJhbmRvbUNoYXJpdGllcyA9IFtdXG5cblx0Ly8gdXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHQvLyBsZXQgYWxsQ2hhcml0aWVzID0gW11cblx0Ly8gXHQvLyBsZXQgZ2V0UHJvZmlsZSA9IFtdXG5cdC8vIFx0bGV0IG15RnVuYyA9ICgpID0+IHtcblx0Ly8gXHRcdHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzKVxuXHQvLyBcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0XHRhbGxDaGFyaXRpZXMucHVzaChyZXMpXG5cdC8vIFx0XHR9KVxuXHRcdFx0XG5cdC8vIFx0XHRyZWFkUHJvZmlsZShwcm9maWxlSW5mbylcblx0Ly8gXHRcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdFx0Z2V0UHJvZmlsZS5wdXNoKHJlcylcblx0Ly8gXHRcdFx0Y29uc29sZS5sb2coYGZpcnN0JHtKU09OLnN0cmluZ2lmeShnZXRQcm9maWxlKX1gKVxuXHQvLyBcdFx0fSlcblx0Ly8gXHR9XG5cdC8vIFx0bXlGdW5jKClcblx0Ly8gfSwgW10pXG5cblx0bGV0IGFsbENoYXJpdGllcyA9IFtdXG5cdGxldCBnZXRQcm9maWxlID0gW11cblxuXHRjb25zdCBwcm9taXNlMSA9IHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzKS50aGVuKChyZXMpID0+IHthbGxDaGFyaXRpZXMucHVzaChyZXMpfSlcblx0Y29uc3QgcHJvbWlzZTIgPSByZWFkUHJvZmlsZShwcm9maWxlSW5mbykudGhlbigocmVzKSA9PiB7Z2V0UHJvZmlsZS5wdXNoKHJlcyl9KVxuXHRQcm9taXNlLmFsbChbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbigodmFsdWVzKSA9PiB7XG5cdFx0aGFuZGxlQ2hhcml0eShwcm9taXNlMSwgcHJvbWlzZTIpXG5cdCAgfSk7XG5cblxuXG5cblxuXG5cblxuXG5cdGNvbnN0IGhhbmRsZUNoYXJpdHkgPSAoY2hhcml0eUdyb3VwLCBwcm9maWxlR3JvdXApID0+IHtcblx0XHRjb25zb2xlLmxvZyhgMSBhbmQgMiAke2NoYXJpdHlHcm91cCwgcHJvZmlsZUdyb3VwfWApXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdC8vIGZvcihsZXQgcm93IG9mIHJlcyl7XG5cdFx0Ly8gXHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdC8vIH1cblx0XHQvLyBsZXQgcGljazEyID0gW11cblx0XHQvLyBmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcblx0XHQvLyBcdHR3ZWx2ZVJhbmRvbUNoYXJpdGllcy5wdXNoKHJlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByZXMubGVuZ3RoKV0pXG5cdFx0Ly8gfVxuXHRcdC8vIHNldFJhbmRvbUNoYXJpdGllcyh0d2VsdmVSYW5kb21DaGFyaXRpZXMpXG5cdH1cblx0XHRsZXQgdGVzdCA9IHJhbmRvbUNoYXJpdGllcy5tYXAoKGNoYXJpdHksaSkgPT4gKFxuXHRcdFx0PFRleHQga2V5PXtpfT5cblx0XHRcdFx0e2NoYXJpdHkuaWR9IHtjaGFyaXR5Lm5hbWV9IHtjaGFyaXR5LnN0YXRlfSB7Y2hhcml0eS5jYXRlZ29yeX0ge2NoYXJpdHkuZmVhdHVyZX1cblx0XHRcdFx0PE5ld2xpbmUgLz5cblx0XHRcdDwvVGV4dD5cblx0XHQpKVxuXHRcdFxuXHRyZXR1cm4gKDxUZXh0Pnt0ZXN0fTwvVGV4dD4pXG5cdC8vIHJldHVybiAoPFRleHQ+SEVSRTwvVGV4dD4pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19