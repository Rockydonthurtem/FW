'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  React.useEffect(() => {
    myFunc = async name => {
      let myArr = [];
      await readCharities(name);
      myArr.push(res);
      setRand5(res);
      fun();
    };
  }, []);

  const fun = () => {
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    } // console.log(`!!!!!!!!!!!!!!!!!! ${JSON.stringify(parsedData)}`)
    // console.log(`checking state ${Math.floor(Math.random() * parsedData.length)}`)


    for (let i = 0; i < 12; i++) {
      let ind = Math.floor(Math.random() * parsedData.length);
      console.log(`looping ${i}`);
    }
  };

  if (name) {
    myFunc(name);
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwicHVzaCIsInJlcyIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJpIiwiaW5kIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JGLE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSSxFQUFBQTtBQUFELElBQVNKLE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1LLEdBQUcsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTU0sRUFBRSxHQUFHTixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVPLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVMsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlgsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFFQUYsRUFBQUEsS0FBSyxDQUFDRyxTQUFOLENBQWlCLE1BQU07QUFDckJXLElBQUFBLE1BQU0sR0FBRyxNQUFPSCxJQUFQLElBQWdCO0FBQ3pCLFVBQUlJLEtBQUssR0FBRyxFQUFaO0FBQ0MsWUFBTVAsYUFBYSxDQUFDRyxJQUFELENBQW5CO0FBQ0FJLE1BQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXQyxHQUFYO0FBQ0FKLE1BQUFBLFFBQVEsQ0FBQ0ksR0FBRCxDQUFSO0FBQ0FDLE1BQUFBLEdBQUc7QUFDSixLQU5BO0FBT0QsR0FSRCxFQVFHLEVBUkg7O0FBVUEsUUFBTUEsR0FBRyxHQUFHLE1BQU07QUFDakIsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlUixLQUFmLEVBQXFCO0FBQ3BCTyxNQUFBQSxVQUFVLENBQUNILElBQVgsQ0FBZ0JJLEdBQWhCO0FBQ0EsS0FKZ0IsQ0FLakI7QUFDQTs7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCLFVBQUlDLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQk4sVUFBVSxDQUFDTyxNQUF0QyxDQUFWO0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFdBQVVQLENBQUUsRUFBekI7QUFFQTtBQUNELEdBWkQ7O0FBY0EsTUFBR1YsSUFBSCxFQUFRO0FBQ1BHLElBQUFBLE1BQU0sQ0FBQ0gsSUFBRCxDQUFOO0FBQ0E7O0FBQ0Qsc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBbkNEOztBQXFDQWtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdFJlYWN0LnVzZUVmZmVjdCggKCkgPT4ge1xuXHRcdCBteUZ1bmMgPSBhc3luYyAobmFtZSkgPT4ge1xuXHRcdFx0bGV0IG15QXJyID0gW11cblx0XHRcdCBhd2FpdCByZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0XHRcdG15QXJyLnB1c2gocmVzKVxuXHRcdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0XHRcdGZ1bigpXG5cdFx0fVxuXHR9LCBbXSk7XG5cblx0Y29uc3QgZnVuID0gKCkgPT4ge1xuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHQvLyBjb25zb2xlLmxvZyhgISEhISEhISEhISEhISEhISEhICR7SlNPTi5zdHJpbmdpZnkocGFyc2VkRGF0YSl9YClcblx0XHQvLyBjb25zb2xlLmxvZyhgY2hlY2tpbmcgc3RhdGUgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXJzZWREYXRhLmxlbmd0aCl9YClcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcblx0XHRcdGxldCBpbmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwYXJzZWREYXRhLmxlbmd0aClcblx0XHRcdGNvbnNvbGUubG9nKGBsb29waW5nICR7aX1gKVxuXHRcdFx0XG5cdFx0fVxuXHR9XG5cblx0aWYobmFtZSl7XG5cdFx0bXlGdW5jKG5hbWUpXG5cdH1cblx0cmV0dXJuIDxUZXh0PkhFUkUgPC9UZXh0PlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==