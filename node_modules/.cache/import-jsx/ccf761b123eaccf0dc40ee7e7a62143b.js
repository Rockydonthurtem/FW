'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]); // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
      }).then(() => {
        fun();
      });
    };

    myFunc;
  }, []);

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    }
  };

  console.log('TEST'); // if(name){
  // 	console.log(`checking state ${name}`)
  // 	myFunc(name)
  // }
  // myFunc()

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0MsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCRixPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ksRUFBQUE7QUFBRCxJQUFTSixPQUFPLENBQUMsS0FBRCxDQUF0Qjs7QUFDQSxNQUFNSyxHQUFHLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1NLEVBQUUsR0FBR04sT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFTyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1IsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1TLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JYLFFBQVEsQ0FBQyxFQUFELENBQWxDLENBTG9DLENBT3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBQyxFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUVmLFFBQUlXLE1BQU0sR0FBRyxNQUFNO0FBQ2xCTixNQUFBQSxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNDSSxJQURELENBQ09DLEdBQUQsSUFBUztBQUNkO0FBQ0FILFFBQUFBLFFBQVEsQ0FBQ0csR0FBRCxDQUFSO0FBQ0EsT0FKRCxFQUtDRCxJQUxELENBS00sTUFBTTtBQUNYRSxRQUFBQSxHQUFHO0FBQ0gsT0FQRDtBQVFBLEtBVEQ7O0FBVUFILElBQUFBLE1BQU07QUFDTixHQWJRLEVBYU4sRUFiTSxDQUFUOztBQWNBLFFBQU1HLEdBQUcsR0FBRyxZQUFZO0FBQ3ZCO0FBQ0EsVUFBTUMsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlUCxLQUFmLEVBQXFCO0FBQ3BCTSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0E7QUFFRCxHQVBEOztBQVFBRSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxNQUFaLEVBdkNvQyxDQXdDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0E5Q0Q7O0FBZ0RBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJkLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdC8vIGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdC8vIFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHQvLyBcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdC8vIFx0XHRzZXRSYW5kNShyZXMpXG5cdC8vIFx0fSlcblx0Ly8gXHQudGhlbigoKSA9PiB7XG5cdC8vIFx0XHRmdW4oKVxuXHQvLyBcdH0pXG5cdC8vIH1cblx0dXNlRWZmZWN0KCgpID0+IHtcblxuXHRcdGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdFx0XHRyZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0XHQudGhlbigocmVzKSA9PiB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdFx0XHRcdHNldFJhbmQ1KHJlcylcblx0XHRcdH0pXG5cdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdGZ1bigpXG5cdFx0XHR9KVxuXHRcdH1cblx0XHRteUZ1bmNcblx0fSwgW10pXG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByYW5kNSl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHRcblx0fVxuXHRjb25zb2xlLmxvZygnVEVTVCcpXG5cdC8vIGlmKG5hbWUpe1xuXHQvLyBcdGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke25hbWV9YClcblx0Ly8gXHRteUZ1bmMobmFtZSlcblx0Ly8gfVxuXHQvLyBteUZ1bmMoKVxuXHRyZXR1cm4gPFRleHQ+SEVSRSA8L1RleHQ+XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19