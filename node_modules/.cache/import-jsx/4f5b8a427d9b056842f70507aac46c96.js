'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  useEffect(() => {
    // 	// let allCharities = []
    // 	// let getProfile = []
    // 	let myFunc = () => {
    // 		readCharities(charities)
    // 		.then((res) => {
    // 			allCharities.push(res)
    // 		})
    // 		readProfile(profileInfo)
    // 		.then((res) => {
    // 			getProfile.push(res)
    // 			console.log(`first${JSON.stringify(getProfile)}`)
    // 		})
    // 	}
    // 	myFunc()
    let allCharities = [];
    let getProfile = [];
    const promise1 = readCharities(charities).then(res => {
      allCharities.push(res);
    });
    const promise2 = readProfile(profileInfo).then(res => {
      getProfile.push(res);
    });
    Promise.all([promise1, promise2]).then(values => {
      handleCharity(allCharities, getProfile);
    });
  }, []);
  console.log("first", profileGroup);

  const handleCharity = (charityGroup, profileGroup) => {
    charityGroup = charityGroup.flat();
    const parsedData = [];

    for (let row of charityGroup) {
      parsedData.push(row);
    }

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(charityGroup[Math.floor(Math.random() * charityGroup.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  }; // console.log("first", typeof randomCharities)


  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test); // return (<Text>HERE</Text>)
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJhbGxDaGFyaXRpZXMiLCJnZXRQcm9maWxlIiwicHJvbWlzZTEiLCJ0aGVuIiwicmVzIiwicHVzaCIsInByb21pc2UyIiwiUHJvbWlzZSIsImFsbCIsInZhbHVlcyIsImhhbmRsZUNoYXJpdHkiLCJjb25zb2xlIiwibG9nIiwicHJvZmlsZUdyb3VwIiwiY2hhcml0eUdyb3VwIiwiZmxhdCIsInBhcnNlZERhdGEiLCJyb3ciLCJpIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwidGVzdCIsIm1hcCIsImNoYXJpdHkiLCJpZCIsIm5hbWUiLCJzdGF0ZSIsImNhdGVnb3J5IiwiZmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNFLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkgsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNLLEVBQUFBLElBQUQ7QUFBT0MsRUFBQUE7QUFBUCxJQUFrQk4sT0FBTyxDQUFDLEtBQUQsQ0FBL0I7O0FBQ0EsTUFBTU8sR0FBRyxHQUFHUCxPQUFPLENB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ekR5QyxDQTBEekM7QUFDQSxDQTNERDs7QUE2REFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhDLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgVGFibGUgPSByZXF1aXJlKCdpbmstdGFibGUnKVxuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0LCBOZXdsaW5lfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtjaGFyaXRpZXMsIHByb2ZpbGVJbmZvfSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0Y29uc3QgW3JhbmRvbUNoYXJpdGllcywgc2V0UmFuZG9tQ2hhcml0aWVzXSA9IHVzZVN0YXRlKFtdKVxuXHRsZXQgdHdlbHZlUmFuZG9tQ2hhcml0aWVzID0gW11cblxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdC8vIGxldCBhbGxDaGFyaXRpZXMgPSBbXVxuXHQvLyBcdC8vIGxldCBnZXRQcm9maWxlID0gW11cblx0Ly8gXHRsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHQvLyBcdFx0cmVhZENoYXJpdGllcyhjaGFyaXRpZXMpXG5cdC8vIFx0XHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHRcdGFsbENoYXJpdGllcy5wdXNoKHJlcylcblx0Ly8gXHRcdH0pXG5cdFx0XHRcblx0Ly8gXHRcdHJlYWRQcm9maWxlKHByb2ZpbGVJbmZvKVxuXHQvLyBcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0XHRnZXRQcm9maWxlLnB1c2gocmVzKVxuXHQvLyBcdFx0XHRjb25zb2xlLmxvZyhgZmlyc3Qke0pTT04uc3RyaW5naWZ5KGdldFByb2ZpbGUpfWApXG5cdC8vIFx0XHR9KVxuXHQvLyBcdH1cblx0Ly8gXHRteUZ1bmMoKVxuXHRcdGxldCBhbGxDaGFyaXRpZXMgPSBbXVxuXHRcdGxldCBnZXRQcm9maWxlID0gW11cblxuXHRcdGNvbnN0IHByb21pc2UxID0gcmVhZENoYXJpdGllcyhjaGFyaXRpZXMpLnRoZW4oKHJlcykgPT4ge2FsbENoYXJpdGllcy5wdXNoKHJlcyl9KVxuXHRcdGNvbnN0IHByb21pc2UyID0gcmVhZFByb2ZpbGUocHJvZmlsZUluZm8pLnRoZW4oKHJlcykgPT4ge2dldFByb2ZpbGUucHVzaChyZXMpfSlcblx0XHRQcm9taXNlLmFsbChbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbigodmFsdWVzKSA9PiB7XG5cdFx0XHRoYW5kbGVDaGFyaXR5KGFsbENoYXJpdGllcywgZ2V0UHJvZmlsZSlcblx0XHR9KTtcblx0fSwgW10pXG5cblx0Y29uc29sZS5sb2coXCJmaXJzdFwiLCBwcm9maWxlR3JvdXApXG5cdGNvbnN0IGhhbmRsZUNoYXJpdHkgPSAoY2hhcml0eUdyb3VwLCBwcm9maWxlR3JvdXApID0+IHtcblx0XHRcblx0XHRjaGFyaXR5R3JvdXAgPSBjaGFyaXR5R3JvdXAuZmxhdCgpIFxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiBjaGFyaXR5R3JvdXApe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChjaGFyaXR5R3JvdXBbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcml0eUdyb3VwLmxlbmd0aCldKVxuXHRcdH1cblx0XHRzZXRSYW5kb21DaGFyaXRpZXModHdlbHZlUmFuZG9tQ2hhcml0aWVzKVxuXHR9XG5cdC8vIGNvbnNvbGUubG9nKFwiZmlyc3RcIiwgdHlwZW9mIHJhbmRvbUNoYXJpdGllcylcblx0XHRsZXQgdGVzdCA9IHJhbmRvbUNoYXJpdGllcy5tYXAoKGNoYXJpdHksaSkgPT4gKFxuXHRcdFx0PFRleHQga2V5PXtpfT5cblx0XHRcdFx0e2NoYXJpdHkuaWR9IHtjaGFyaXR5Lm5hbWV9IHtjaGFyaXR5LnN0YXRlfSB7Y2hhcml0eS5jYXRlZ29yeX0ge2NoYXJpdHkuZmVhdHVyZX1cblx0XHRcdFx0PE5ld2xpbmUgLz5cblx0XHRcdDwvVGV4dD5cblx0XHQpKVxuXHRcdFxuXHRyZXR1cm4gKDxUZXh0Pnt0ZXN0fTwvVGV4dD4pXG5cdC8vIHJldHVybiAoPFRleHQ+SEVSRTwvVGV4dD4pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19