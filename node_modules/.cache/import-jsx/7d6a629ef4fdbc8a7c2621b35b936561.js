'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  let twelveRandomCharities = []; // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
        fun(res);
      }); // .then(() => {
      // 	fun()
      // })
    };

    myFunc();
  }, []);

  const fun = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    console.log(`checking state ${twelveRandomCharities}`); // console.table(`parsed ${JSON.stringify(twelveRandomCharities)}`)
  }; // if(name){
  // 	myFunc(name)
  // }
  // myFunc()


  return /*#__PURE__*/React.createElement(Text, null, twelveRandomCharities);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJjc3YiLCJmcyIsInJlYWRDaGFyaXRpZXMiLCJyZWFkUHJvZmlsZSIsIkFwcCIsIm5hbWUiLCJyYW5kNSIsInNldFJhbmQ1IiwidHdlbHZlUmFuZG9tQ2hhcml0aWVzIiwibXlGdW5jIiwidGhlbiIsInJlcyIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJwdXNoIiwicGljazEyIiwiaSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRSxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JILE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQTtBQUFELElBQVNMLE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1NLEdBQUcsR0FBR04sT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTU8sRUFBRSxHQUFHUCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVRLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDVCxPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVUsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlgsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFDQSxNQUFJWSxxQkFBcUIsR0FBRyxFQUE1QixDQU5vQyxDQU9wQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQVgsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFFZixRQUFJWSxNQUFNLEdBQUcsTUFBTTtBQUNsQlAsTUFBQUEsYUFBYSxDQUFDRyxJQUFELENBQWIsQ0FDQ0ssSUFERCxDQUNPQyxHQUFELElBQVM7QUFDZDtBQUNBSixRQUFBQSxRQUFRLENBQUNJLEdBQUQsQ0FBUjtBQUNBQyxRQUFBQSxHQUFHLENBQUNELEdBQUQsQ0FBSDtBQUNBLE9BTEQsRUFEa0IsQ0FPbEI7QUFDQTtBQUNBO0FBQ0EsS0FWRDs7QUFXQUYsSUFBQUEsTUFBTTtBQUNOLEdBZFEsRUFjTixFQWRNLENBQVQ7O0FBZUEsUUFBTUcsR0FBRyxHQUFJRCxHQUFELElBQVM7QUFDcEI7QUFDQSxVQUFNRSxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVILEdBQWYsRUFBbUI7QUFDbEJFLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsR0FBaEI7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJULE1BQUFBLHFCQUFxQixDQUFDTyxJQUF0QixDQUEyQkosR0FBRyxDQUFDTyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCVCxHQUFHLENBQUNVLE1BQS9CLENBQUQsQ0FBOUI7QUFDQTs7QUFDREMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsa0JBQWlCZixxQkFBc0IsRUFBcEQsRUFWb0IsQ0FZcEI7QUFDQSxHQWJELENBaENvQyxDQThDcEM7QUFDQztBQUNBO0FBQ0E7OztBQUVELHNCQUFRLG9CQUFDLElBQUQsUUFBT0EscUJBQVAsQ0FBUjtBQUNBLENBcEREOztBQXNEQWdCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgVGFibGUgPSByZXF1aXJlKCdpbmstdGFibGUnKVxuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0bGV0IHR3ZWx2ZVJhbmRvbUNoYXJpdGllcyA9IFtdXG5cdC8vIGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdC8vIFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHQvLyBcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdC8vIFx0XHRzZXRSYW5kNShyZXMpXG5cdC8vIFx0fSlcblx0Ly8gXHQudGhlbigoKSA9PiB7XG5cdC8vIFx0XHRmdW4oKVxuXHQvLyBcdH0pXG5cdC8vIH1cblx0dXNlRWZmZWN0KCgpID0+IHtcblxuXHRcdGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdFx0XHRyZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0XHQudGhlbigocmVzKSA9PiB7XG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGByZXMgJHtKU09OLnN0cmluZ2lmeShyZXMpfWApXG5cdFx0XHRcdHNldFJhbmQ1KHJlcylcblx0XHRcdFx0ZnVuKHJlcylcblx0XHRcdH0pXG5cdFx0XHQvLyAudGhlbigoKSA9PiB7XG5cdFx0XHQvLyBcdGZ1bigpXG5cdFx0XHQvLyB9KVxuXHRcdH1cblx0XHRteUZ1bmMoKVxuXHR9LCBbXSlcblx0Y29uc3QgZnVuID0gKHJlcykgPT4ge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiKioqKioqKioqKipcIiwgcmFuZDVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKV0pXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJlcyl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHRsZXQgcGljazEyID0gW11cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcblx0XHRcdHR3ZWx2ZVJhbmRvbUNoYXJpdGllcy5wdXNoKHJlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByZXMubGVuZ3RoKV0pXG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKGBjaGVja2luZyBzdGF0ZSAke3R3ZWx2ZVJhbmRvbUNoYXJpdGllc31gKVxuXHRcdFxuXHRcdC8vIGNvbnNvbGUudGFibGUoYHBhcnNlZCAke0pTT04uc3RyaW5naWZ5KHR3ZWx2ZVJhbmRvbUNoYXJpdGllcyl9YClcblx0fVxuXHQvLyBpZihuYW1lKXtcblx0XHQvLyBcdG15RnVuYyhuYW1lKVxuXHRcdC8vIH1cblx0XHQvLyBteUZ1bmMoKVxuXHRcdFxuXHRyZXR1cm4gKDxUZXh0Pnt0d2VsdmVSYW5kb21DaGFyaXRpZXN9PC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=