'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = []; // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = async () => {
      let a = await readCharities(charities);
      await readProfile(profileInfo); // .then((res) => {
      // 	setRand5(res)
      // 	// handleCharity(res)
      // })
    };

    handleCharity(a);
    myFunc();
  }, []);

  const handleCharity = a => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of a) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsInJhbmRvbUNoYXJpdGllcyIsInNldFJhbmRvbUNoYXJpdGllcyIsInR3ZWx2ZVJhbmRvbUNoYXJpdGllcyIsIm15RnVuYyIsImEiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsImhhbmRsZUNoYXJpdHkiLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJyZXMiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ0ZXN0IiwibWFwIiwiY2hhcml0eSIsImlkIiwic3RhdGUiLCJjYXRlZ29yeSIsImZlYXR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRSxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JILE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1JLEtBQUssR0FBR0osT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSyxFQUFBQSxJQUFEO0FBQU9DLEVBQUFBO0FBQVAsSUFBa0JOLE9BQU8sQ0FBQyxLQUFELENBQS9COztBQUNBLE1BQU1PLEdBQUcsR0FBR1AsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTVEsRUFBRSxHQUFHUixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVTLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDVixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVcsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlosUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFDQSxRQUFNLENBQUNhLGVBQUQsRUFBa0JDLGtCQUFsQixJQUF3Q2QsUUFBUSxDQUFDLEVBQUQsQ0FBdEQ7QUFDQSxNQUFJZSxxQkFBcUIsR0FBRyxFQUE1QixDQVBvQyxDQVFwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQWQsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFFZixRQUFJZSxNQUFNLEdBQUcsWUFBVztBQUN2QixVQUFJQyxDQUFDLEdBQUcsTUFBTVYsYUFBYSxDQUFDVyxTQUFELENBQTNCO0FBQ0MsWUFBTVYsV0FBVyxDQUFDVyxXQUFELENBQWpCLENBRnNCLENBR3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FQRDs7QUFRQ0MsSUFBQUEsYUFBYSxDQUFDSCxDQUFELENBQWI7QUFDREQsSUFBQUEsTUFBTTtBQUNOLEdBWlEsRUFZTixFQVpNLENBQVQ7O0FBYUEsUUFBTUksYUFBYSxHQUFJSCxDQUFELElBQU87QUFDNUI7QUFDQSxVQUFNSSxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVMLENBQWYsRUFBaUI7QUFDaEJJLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkQsR0FBaEI7QUFDQTs7QUFDRCxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUJWLE1BQUFBLHFCQUFxQixDQUFDUSxJQUF0QixDQUEyQkcsR0FBRyxDQUFDQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCSCxHQUFHLENBQUNJLE1BQS9CLENBQUQsQ0FBOUI7QUFDQTs7QUFDRGhCLElBQUFBLGtCQUFrQixDQUFDQyxxQkFBRCxDQUFsQjtBQUNBLEdBWEQ7O0FBWUMsTUFBSWdCLElBQUksR0FBR2xCLGVBQWUsQ0FBQ21CLEdBQWhCLENBQW9CLENBQUNDLE9BQUQsRUFBU1IsQ0FBVCxrQkFDOUIsb0JBQUMsSUFBRDtBQUFNLElBQUEsR0FBRyxFQUFFQTtBQUFYLEtBQ0VRLE9BQU8sQ0FBQ0MsRUFEVixPQUNlRCxPQUFPLENBQUN2QixJQUR2QixPQUM4QnVCLE9BQU8sQ0FBQ0UsS0FEdEMsT0FDOENGLE9BQU8sQ0FBQ0csUUFEdEQsT0FDaUVILE9BQU8sQ0FBQ0ksT0FEekUsZUFFQyxvQkFBQyxPQUFELE9BRkQsQ0FEVSxDQUFYO0FBT0Qsc0JBQVEsb0JBQUMsSUFBRCxRQUFPTixJQUFQLENBQVI7QUFDQSxDQW5ERDs7QUFxREFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjlCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgVGFibGUgPSByZXF1aXJlKCdpbmstdGFibGUnKVxuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0LCBOZXdsaW5lfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0Y29uc3QgW3JhbmRvbUNoYXJpdGllcywgc2V0UmFuZG9tQ2hhcml0aWVzXSA9IHVzZVN0YXRlKFtdKVxuXHRsZXQgdHdlbHZlUmFuZG9tQ2hhcml0aWVzID0gW11cblx0Ly8gbGV0IG15RnVuYyA9ICgpID0+IHtcblx0Ly8gXHRyZWFkQ2hhcml0aWVzKG5hbWUpXG5cdC8vIFx0LnRoZW4oKHJlcykgPT4ge1xuXHQvLyBcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0Ly8gXHRcdHNldFJhbmQ1KHJlcylcblx0Ly8gXHR9KVxuXHQvLyBcdC50aGVuKCgpID0+IHtcblx0Ly8gXHRcdGZ1bigpXG5cdC8vIFx0fSlcblx0Ly8gfVxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXG5cdFx0bGV0IG15RnVuYyA9IGFzeW5jKCkgPT4ge1xuXHRcdFx0bGV0IGEgPSBhd2FpdCByZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0XHRcdCBhd2FpdCByZWFkUHJvZmlsZShwcm9maWxlSW5mbylcblx0XHRcdC8vIC50aGVuKChyZXMpID0+IHtcblx0XHRcdC8vIFx0c2V0UmFuZDUocmVzKVxuXHRcdFx0Ly8gXHQvLyBoYW5kbGVDaGFyaXR5KHJlcylcblx0XHRcdC8vIH0pXG5cdFx0fVxuXHRcdCBoYW5kbGVDaGFyaXR5KGEpXG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cdGNvbnN0IGhhbmRsZUNoYXJpdHkgPSAoYSkgPT4ge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiKioqKioqKioqKipcIiwgcmFuZDVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKV0pXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIGEpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0bGV0IHBpY2sxMiA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChyZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmVzLmxlbmd0aCldKVxuXHRcdH1cblx0XHRzZXRSYW5kb21DaGFyaXRpZXModHdlbHZlUmFuZG9tQ2hhcml0aWVzKVxuXHR9XG5cdFx0bGV0IHRlc3QgPSByYW5kb21DaGFyaXRpZXMubWFwKChjaGFyaXR5LGkpID0+IChcblx0XHRcdDxUZXh0IGtleT17aX0+XG5cdFx0XHRcdHtjaGFyaXR5LmlkfSB7Y2hhcml0eS5uYW1lfSB7Y2hhcml0eS5zdGF0ZX0ge2NoYXJpdHkuY2F0ZWdvcnl9IHtjaGFyaXR5LmZlYXR1cmV9XG5cdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHQ8L1RleHQ+XG5cdFx0KSlcblx0XHRcblx0cmV0dXJuICg8VGV4dD57dGVzdH08L1RleHQ+KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==