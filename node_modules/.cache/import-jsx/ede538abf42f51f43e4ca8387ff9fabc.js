'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  // const [rand5, setRand5] = useState([])
  // let myFunc = async (name) => {
  // 	await readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(JSON.stringify(res))
  // 		fun()
  // 	})
  // }
  // const fun = async () => {
  // 	// console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
  // 	console.log("@@@@@@@@@@", JSON.stringify(rand5[50]))
  // }
  // if(name){
  // 	myFunc(name)
  // 	// console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  // }
  const N_TOTAL = 12;
  const N_MAX_STATE = 5;

  function pickCharities(charities, profile) {
    // TODO
    return [];
  }

  async function main() {
    // Input argiments
    const charities = await readCharities(charities);
    const profile = await readProfile(profilePath); // console.log(`charities ${charities}`)

    const charitiesToFeature = pickCharities(charities, profile); // Output result to standard out, one per line

    console.log(charitiesToFeature.join("\n"));
  }

  main();
  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwiTl9UT1RBTCIsIk5fTUFYX1NUQVRFIiwicGlja0NoYXJpdGllcyIsImNoYXJpdGllcyIsInByb2ZpbGUiLCJtYWluIiwicHJvZmlsZVBhdGgiLCJjaGFyaXRpZXNUb0ZlYXR1cmUiLCJjb25zb2xlIiwibG9nIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQTtBQUFELElBQWFELE9BQU8sQ0FBQyxPQUFELENBQTFCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRyxFQUFBQTtBQUFELElBQVNILE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTUssRUFBRSxHQUFHTCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVNLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUCxPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVEsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsUUFBTUMsT0FBTyxHQUFHLEVBQWhCO0FBQ0EsUUFBTUMsV0FBVyxHQUFHLENBQXBCOztBQUVBLFdBQVNDLGFBQVQsQ0FBdUJDLFNBQXZCLEVBQWtDQyxPQUFsQyxFQUEyQztBQUMzQztBQUNBLFdBQU8sRUFBUDtBQUNBOztBQUVELGlCQUFlQyxJQUFmLEdBQXNCO0FBQ3JCO0FBRUEsVUFBTUYsU0FBUyxHQUFHLE1BQU1QLGFBQWEsQ0FBQ08sU0FBRCxDQUFyQztBQUNBLFVBQU1DLE9BQU8sR0FBRyxNQUFNUCxXQUFXLENBQUNTLFdBQUQsQ0FBakMsQ0FKcUIsQ0FLckI7O0FBRUEsVUFBTUMsa0JBQWtCLEdBQUdMLGFBQWEsQ0FBQ0MsU0FBRCxFQUFZQyxPQUFaLENBQXhDLENBUHFCLENBU3JCOztBQUNBSSxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsa0JBQWtCLENBQUNHLElBQW5CLENBQXdCLElBQXhCLENBQVo7QUFDQzs7QUFDREwsRUFBQUEsSUFBSTtBQUNKLHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQTlDRDs7QUFnREFNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmQsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGV9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0fSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtuYW1lID0gXCJTdHJhbmdlclwifSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Ly8gY29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0XG5cdC8vIGxldCBteUZ1bmMgPSBhc3luYyAobmFtZSkgPT4ge1xuXHQvLyBcdGF3YWl0IHJlYWRDaGFyaXRpZXMobmFtZSlcblx0Ly8gXHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHQvLyBcdFx0c2V0UmFuZDUoSlNPTi5zdHJpbmdpZnkocmVzKSlcblx0Ly8gXHRcdGZ1bigpXG5cdC8vIFx0fSlcblx0Ly8gfVxuXHQvLyBjb25zdCBmdW4gPSBhc3luYyAoKSA9PiB7XG5cdC8vIFx0Ly8gY29uc29sZS5sb2coXCIqKioqKioqKioqKlwiLCByYW5kNVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpXSlcblx0Ly8gXHRjb25zb2xlLmxvZyhcIkBAQEBAQEBAQEBcIiwgSlNPTi5zdHJpbmdpZnkocmFuZDVbNTBdKSlcblx0Ly8gfVxuXHQvLyBpZihuYW1lKXtcblx0Ly8gXHRteUZ1bmMobmFtZSlcblx0Ly8gXHQvLyBjb25zb2xlLmxvZyhgY2hlY2tpbmcgc3RhdGUgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByYW5kNS5sZW5ndGgpfWApXG5cdC8vIH1cblx0XG5cdGNvbnN0IE5fVE9UQUwgPSAxMjtcblx0Y29uc3QgTl9NQVhfU1RBVEUgPSA1O1xuXG5cdGZ1bmN0aW9uIHBpY2tDaGFyaXRpZXMoY2hhcml0aWVzLCBwcm9maWxlKSB7XG5cdC8vIFRPRE9cblx0cmV0dXJuIFtdO1xufVxuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuXHQvLyBJbnB1dCBhcmdpbWVudHNcblx0XG5cdGNvbnN0IGNoYXJpdGllcyA9IGF3YWl0IHJlYWRDaGFyaXRpZXMoY2hhcml0aWVzKTtcblx0Y29uc3QgcHJvZmlsZSA9IGF3YWl0IHJlYWRQcm9maWxlKHByb2ZpbGVQYXRoKTtcblx0Ly8gY29uc29sZS5sb2coYGNoYXJpdGllcyAke2NoYXJpdGllc31gKVxuXG5cdGNvbnN0IGNoYXJpdGllc1RvRmVhdHVyZSA9IHBpY2tDaGFyaXRpZXMoY2hhcml0aWVzLCBwcm9maWxlKTtcblxuXHQvLyBPdXRwdXQgcmVzdWx0IHRvIHN0YW5kYXJkIG91dCwgb25lIHBlciBsaW5lXG5cdGNvbnNvbGUubG9nKGNoYXJpdGllc1RvRmVhdHVyZS5qb2luKFwiXFxuXCIpKTtcblx0fVxuXHRtYWluKCk7XG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=