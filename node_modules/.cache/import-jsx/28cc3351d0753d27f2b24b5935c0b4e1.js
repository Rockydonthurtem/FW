'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  console.log(`)))))))) ${JSON.stringify(charities)}`);
  console.log(`)))))))) ${JSON.stringify(profileInfo)}`);
  useEffect(() => {
    let myFunc = () => {
      readCharities(charities).then(res => {
        handleCharity(res);
      }); // readProfile(profileInfo)
    };

    myFunc();
  }, []);

  const handleCharity = res => {
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  }; // let test = randomCharities.map((charity,i) => (
  // 	<Text key={i}>
  // 		{charity.id} {charity.name} {charity.state} {charity.category} {charity.feature}
  // 		<Newline />
  // 	</Text>
  // ))
  // return (<Text>{test}</Text>)


  return /*#__PURE__*/React.createElement(Text, null, "HERE");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJoYW5kbGVDaGFyaXR5IiwicGFyc2VkRGF0YSIsInJvdyIsInB1c2giLCJwaWNrMTIiLCJpIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7QUFDQSxNQUFNTyxHQUFHLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1RLEVBQUUsR0FBR1IsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFUyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1YsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1XLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLFNBQUQ7QUFBWUMsRUFBQUE7QUFBWixDQUFELEtBQThCO0FBQ3pDO0FBQ0E7QUFFQTtBQUNBLFFBQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLElBQW9CYixRQUFRLENBQUMsRUFBRCxDQUFsQztBQUNBLFFBQU0sQ0FBQ2MsZUFBRCxFQUFrQkMsa0JBQWxCLElBQXdDZixRQUFRLENBQUMsRUFBRCxDQUF0RDtBQUNBLE1BQUlnQixxQkFBcUIsR0FBRyxFQUE1QjtBQUVBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxZQUFXQyxJQUFJLENBQUNDLFNBQUwsQ0FBZVYsU0FBZixDQUEwQixFQUFsRDtBQUNBTyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxZQUFXQyxJQUFJLENBQUNDLFNBQUwsQ0FBZVQsV0FBZixDQUE0QixFQUFwRDtBQUNBVixFQUFBQSxTQUFTLENBQUMsTUFBTTtBQUNmLFFBQUlvQixNQUFNLEdBQUcsTUFBTTtBQUNsQmQsTUFBQUEsYUFBYSxDQUFDRyxTQUFELENBQWIsQ0FDRVksSUFERixDQUNRQyxHQUFELElBQVM7QUFDZEMsUUFBQUEsYUFBYSxDQUFDRCxHQUFELENBQWI7QUFDQSxPQUhGLEVBRGtCLENBTWxCO0FBQ0EsS0FQRDs7QUFRQUYsSUFBQUEsTUFBTTtBQUNOLEdBVlEsRUFVTixFQVZNLENBQVQ7O0FBV0EsUUFBTUcsYUFBYSxHQUFJRCxHQUFELElBQVM7QUFDOUIsVUFBTUUsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlSCxHQUFmLEVBQW1CO0FBQ2xCRSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0E7O0FBQ0QsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCYixNQUFBQSxxQkFBcUIsQ0FBQ1csSUFBdEIsQ0FBMkJKLEdBQUcsQ0FBQ08sSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQlQsR0FBRyxDQUFDVSxNQUEvQixDQUFELENBQTlCO0FBQ0E7O0FBQ0RsQixJQUFBQSxrQkFBa0IsQ0FBQ0MscUJBQUQsQ0FBbEI7QUFDQSxHQVZELENBdEJ5QyxDQWlDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUQ7OztBQUNBLHNCQUFRLG9CQUFDLElBQUQsZUFBUjtBQUNBLENBMUNEOztBQTRDQWtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgVGFibGUgPSByZXF1aXJlKCdpbmstdGFibGUnKVxuY29uc3Qge3VzZVN0YXRlLCB1c2VFZmZlY3R9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHtUZXh0LCBOZXdsaW5lfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgY3N2ID0gcmVxdWlyZSgnY3N2LXBhcnNlcicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyByZWFkQ2hhcml0aWVzLCByZWFkUHJvZmlsZSB9ID0gcmVxdWlyZShcIi4vcmVhZC1oZWxwZXJzXCIpO1xuY29uc3QgQXBwID0gKHtjaGFyaXRpZXMsIHByb2ZpbGVJbmZvfSkgPT4ge1xuXHQvLyBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuXHQvLyBcdGNvbnN0IHRlc3QgPSBhd2FpdCBpbXBvcnQoJ2h0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9kcml2ZS9mb2xkZXJzLzFoNXVkMWRjQThscXhpRnI0dFd3V3RoelpkMHBPcVlpVCcpXG5cblx0Ly8gfSlcblx0Y29uc3QgW3JhbmQ1LCBzZXRSYW5kNV0gPSB1c2VTdGF0ZShbXSlcblx0Y29uc3QgW3JhbmRvbUNoYXJpdGllcywgc2V0UmFuZG9tQ2hhcml0aWVzXSA9IHVzZVN0YXRlKFtdKVxuXHRsZXQgdHdlbHZlUmFuZG9tQ2hhcml0aWVzID0gW11cblxuXHRjb25zb2xlLmxvZyhgKSkpKSkpKSkgJHtKU09OLnN0cmluZ2lmeShjaGFyaXRpZXMpfWApXG5cdGNvbnNvbGUubG9nKGApKSkpKSkpKSAke0pTT04uc3RyaW5naWZ5KHByb2ZpbGVJbmZvKX1gKVxuXHR1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdFx0XHRyZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0XHRcdCAudGhlbigocmVzKSA9PiB7XG5cdFx0XHRcdCBoYW5kbGVDaGFyaXR5KHJlcylcblx0XHRcdCB9KVxuXG5cdFx0XHQvLyByZWFkUHJvZmlsZShwcm9maWxlSW5mbylcblx0XHR9XG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cdGNvbnN0IGhhbmRsZUNoYXJpdHkgPSAocmVzKSA9PiB7XG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJlcyl7XG5cdFx0XHRwYXJzZWREYXRhLnB1c2gocm93KVxuXHRcdH1cblx0XHRsZXQgcGljazEyID0gW11cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDEyOyBpKyspIHtcblx0XHRcdHR3ZWx2ZVJhbmRvbUNoYXJpdGllcy5wdXNoKHJlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiByZXMubGVuZ3RoKV0pXG5cdFx0fVxuXHRcdHNldFJhbmRvbUNoYXJpdGllcyh0d2VsdmVSYW5kb21DaGFyaXRpZXMpXG5cdH1cblx0XHQvLyBsZXQgdGVzdCA9IHJhbmRvbUNoYXJpdGllcy5tYXAoKGNoYXJpdHksaSkgPT4gKFxuXHRcdC8vIFx0PFRleHQga2V5PXtpfT5cblx0XHQvLyBcdFx0e2NoYXJpdHkuaWR9IHtjaGFyaXR5Lm5hbWV9IHtjaGFyaXR5LnN0YXRlfSB7Y2hhcml0eS5jYXRlZ29yeX0ge2NoYXJpdHkuZmVhdHVyZX1cblx0XHQvLyBcdFx0PE5ld2xpbmUgLz5cblx0XHQvLyBcdDwvVGV4dD5cblx0XHQvLyApKVxuXHRcdFxuXHQvLyByZXR1cm4gKDxUZXh0Pnt0ZXN0fTwvVGV4dD4pXG5cdHJldHVybiAoPFRleHQ+SEVSRTwvVGV4dD4pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl19