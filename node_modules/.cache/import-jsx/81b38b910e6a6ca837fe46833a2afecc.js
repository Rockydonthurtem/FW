'use strict';

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  useEffect(() => {
    myFunc = async name => {
      let myArr = [];
      await readCharities(name);
      myArr.push(res);
      setRand5(res);
      fun();
    };

    myFunc();
  }, []);

  const fun = () => {
    const parsedData = [];

    for (let row of rand5) {
      parsedData.push(row);
    } // console.log(`!!!!!!!!!!!!!!!!!! ${JSON.stringify(parsedData)}`)
    // console.log(`checking state ${Math.floor(Math.random() * parsedData.length)}`)


    for (let i = 0; i < 12; i++) {
      let ind = Math.floor(Math.random() * parsedData.length);
      console.log(`looping ${i}`);
    }
  };

  if (name) {
    myFunc(name);
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwicHVzaCIsInJlcyIsImZ1biIsInBhcnNlZERhdGEiLCJyb3ciLCJpIiwiaW5kIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQSxRQUFEO0FBQVdDLEVBQUFBO0FBQVgsSUFBd0JGLE9BQU8sQ0FBQyxPQUFELENBQXJDOztBQUNBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDSSxFQUFBQTtBQUFELElBQVNKLE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1LLEdBQUcsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTU0sRUFBRSxHQUFHTixPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVPLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUixPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVMsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlgsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7QUFFQUMsRUFBQUEsU0FBUyxDQUFFLE1BQU07QUFDaEJXLElBQUFBLE1BQU0sR0FBRyxNQUFPSCxJQUFQLElBQWdCO0FBQ3hCLFVBQUlJLEtBQUssR0FBRyxFQUFaO0FBQ0MsWUFBTVAsYUFBYSxDQUFDRyxJQUFELENBQW5CO0FBQ0FJLE1BQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXQyxHQUFYO0FBQ0FKLE1BQUFBLFFBQVEsQ0FBQ0ksR0FBRCxDQUFSO0FBQ0FDLE1BQUFBLEdBQUc7QUFDSixLQU5EOztBQU9BSixJQUFBQSxNQUFNO0FBQ04sR0FUUSxFQVNOLEVBVE0sQ0FBVDs7QUFXQSxRQUFNSSxHQUFHLEdBQUcsTUFBTTtBQUNqQixVQUFNQyxVQUFVLEdBQUcsRUFBbkI7O0FBQ0EsU0FBSSxJQUFJQyxHQUFSLElBQWVSLEtBQWYsRUFBcUI7QUFDcEJPLE1BQUFBLFVBQVUsQ0FBQ0gsSUFBWCxDQUFnQkksR0FBaEI7QUFDQSxLQUpnQixDQUtqQjtBQUNBOzs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDNUIsVUFBSUMsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCTixVQUFVLENBQUNPLE1BQXRDLENBQVY7QUFDQUMsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsV0FBVVAsQ0FBRSxFQUF6QjtBQUVBO0FBQ0QsR0FaRDs7QUFjQSxNQUFHVixJQUFILEVBQVE7QUFDUEcsSUFBQUEsTUFBTSxDQUFDSCxJQUFELENBQU47QUFDQTs7QUFDRCxzQkFBTyxvQkFBQyxJQUFELGdCQUFQO0FBQ0EsQ0FwQ0Q7O0FBc0NBa0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0dXNlRWZmZWN0KCAoKSA9PiB7XG5cdFx0bXlGdW5jID0gYXN5bmMgKG5hbWUpID0+IHtcblx0XHRcdGxldCBteUFyciA9IFtdXG5cdFx0XHQgYXdhaXQgcmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdFx0XHRteUFyci5wdXNoKHJlcylcblx0XHRcdFx0c2V0UmFuZDUocmVzKVxuXHRcdFx0XHRmdW4oKVxuXHRcdH1cblx0XHRteUZ1bmMoKTtcblx0fSwgW10pO1xuXG5cdGNvbnN0IGZ1biA9ICgpID0+IHtcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmFuZDUpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0Ly8gY29uc29sZS5sb2coYCEhISEhISEhISEhISEhISEhISAke0pTT04uc3RyaW5naWZ5KHBhcnNlZERhdGEpfWApXG5cdFx0Ly8gY29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFyc2VkRGF0YS5sZW5ndGgpfWApXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHRsZXQgaW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcGFyc2VkRGF0YS5sZW5ndGgpXG5cdFx0XHRjb25zb2xlLmxvZyhgbG9vcGluZyAke2l9YClcblx0XHRcdFxuXHRcdH1cblx0fVxuXG5cdGlmKG5hbWUpe1xuXHRcdG15RnVuYyhuYW1lKVxuXHR9XG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=