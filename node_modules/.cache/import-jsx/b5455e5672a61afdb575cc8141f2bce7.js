'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  charities,
  profileInfo
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = [];
  useEffect(() => {
    // 	// let allCharities = []
    // 	// let getProfile = []
    // 	let myFunc = () => {
    // 		readCharities(charities)
    // 		.then((res) => {
    // 			allCharities.push(res)
    // 		})
    // 		readProfile(profileInfo)
    // 		.then((res) => {
    // 			getProfile.push(res)
    // 		})
    // 	}
    // 	myFunc()
    let allCharities = [];
    let getProfile = "";
    const promise1 = readCharities(charities).then(res => {
      allCharities.push(res);
    });
    const promise2 = readProfile(profileInfo).then(res => {
      getProfile = res;
    });
    Promise.all([promise1, promise2]).then(values => {
      handleCharity(allCharities, getProfile);
    });
  }, []);

  const handleCharity = (charityGroup, profileGroup) => {
    charityGroup = charityGroup.flat();
    const parsedData = [];

    for (let row of charityGroup) {
      parsedData.push(row);
    }

    for (let i = 0; i < 12; i++) {
      let randomIndex = Math.floor(Math.random() * charityGroup.length);
      let count = 0;

      if (profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()) {
        count = count + 1;
      }

      if (count == 1 && profileGroup.state.toLowerCase() == charityGroup[randomIndex]['state'].toLowerCase()) {
        continue;
      }

      console.log(profileGroup.state.toLowerCase(), charityGroup[randomIndex]['state'].toLowerCase());
      twelveRandomCharities.push(charityGroup[randomIndex]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.category, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test); // return (<Text>HERE</Text>)
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJjaGFyaXRpZXMiLCJwcm9maWxlSW5mbyIsInJhbmQ1Iiwic2V0UmFuZDUiLCJyYW5kb21DaGFyaXRpZXMiLCJzZXRSYW5kb21DaGFyaXRpZXMiLCJ0d2VsdmVSYW5kb21DaGFyaXRpZXMiLCJhbGxDaGFyaXRpZXMiLCJnZXRQcm9maWxlIiwicHJvbWlzZTEiLCJ0aGVuIiwicmVzIiwicHVzaCIsInByb21pc2UyIiwiUHJvbWlzZSIsImFsbCIsInZhbHVlcyIsImhhbmRsZUNoYXJpdHkiLCJjaGFyaXR5R3JvdXAiLCJwcm9maWxlR3JvdXAiLCJmbGF0IiwicGFyc2VkRGF0YSIsInJvdyIsImkiLCJyYW5kb21JbmRleCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvdW50Iiwic3RhdGUiLCJ0b0xvd2VyQ2FzZSIsImNvbnNvbGUiLCJsb2ciLCJ0ZXN0IiwibWFwIiwiY2hhcml0eSIsImlkIiwibmFtZSIsImNhdGVnb3J5IiwiZmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsV0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNFLEVBQUFBLFFBQUQ7QUFBV0MsRUFBQUE7QUFBWCxJQUF3QkgsT0FBTyxDQUFDLE9BQUQsQ0FBckM7O0FBQ0EsTUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUNLLEVBQUFBLElBQUQ7QUFBT0MsRUFBQUE7QUFBUCxJQUFrQk4sT0FBTyxDQUFDLEtBQUQs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QUE5QztBQUNBekIsTUFBQUEscUJBQXFCLENBQUNNLElBQXRCLENBQTJCTSxZQUFZLENBQUNNLFdBQUQsQ0FBdkM7QUFDQTs7QUFDRG5CLElBQUFBLGtCQUFrQixDQUFDQyxxQkFBRCxDQUFsQjtBQUNBLEdBcEJEOztBQXFCQyxNQUFJNEIsSUFBSSxHQUFHOUIsZUFBZSxDQUFDK0IsR0FBaEIsQ0FBb0IsQ0FBQ0MsT0FBRCxFQUFTYixDQUFULGtCQUM5QixvQkFBQyxJQUFEO0FBQU0sSUFBQSxHQUFHLEVBQUVBO0FBQVgsS0FDRWEsT0FBTyxDQUFDQyxFQURWLE9BQ2VELE9BQU8sQ0FBQ0UsSUFEdkIsT0FDOEJGLE9BQU8sQ0FBQ04sS0FEdEMsT0FDOENNLE9BQU8sQ0FBQ0csUUFEdEQsT0FDaUVILE9BQU8sQ0FBQ0ksT0FEekUsZUFFQyxvQkFBQyxPQUFELE9BRkQsQ0FEVSxDQUFYO0FBT0Qsc0JBQVEsb0JBQUMsSUFBRCxRQUFPTixJQUFQLENBQVIsQ0E5RHlDLENBK0R6QztBQUNBLENBaEVEOztBQWtFQU8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCM0MsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJ2luay10YWJsZScpXG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHQsIE5ld2xpbmV9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe2NoYXJpdGllcywgcHJvZmlsZUluZm99KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRjb25zdCBbcmFuZG9tQ2hhcml0aWVzLCBzZXRSYW5kb21DaGFyaXRpZXNdID0gdXNlU3RhdGUoW10pXG5cdGxldCB0d2VsdmVSYW5kb21DaGFyaXRpZXMgPSBbXVxuXG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Ly8gbGV0IGFsbENoYXJpdGllcyA9IFtdXG5cdC8vIFx0Ly8gbGV0IGdldFByb2ZpbGUgPSBbXVxuXHQvLyBcdGxldCBteUZ1bmMgPSAoKSA9PiB7XG5cdC8vIFx0XHRyZWFkQ2hhcml0aWVzKGNoYXJpdGllcylcblx0Ly8gXHRcdC50aGVuKChyZXMpID0+IHtcblx0Ly8gXHRcdFx0YWxsQ2hhcml0aWVzLnB1c2gocmVzKVxuXHQvLyBcdFx0fSlcblx0XHRcdFxuXHQvLyBcdFx0cmVhZFByb2ZpbGUocHJvZmlsZUluZm8pXG5cdC8vIFx0XHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHRcdGdldFByb2ZpbGUucHVzaChyZXMpXG5cdC8vIFx0XHR9KVxuXHQvLyBcdH1cblx0Ly8gXHRteUZ1bmMoKVxuXHRcdGxldCBhbGxDaGFyaXRpZXMgPSBbXVxuXHRcdGxldCBnZXRQcm9maWxlID0gXCJcIlxuXG5cdFx0Y29uc3QgcHJvbWlzZTEgPSByZWFkQ2hhcml0aWVzKGNoYXJpdGllcykudGhlbigocmVzKSA9PiB7YWxsQ2hhcml0aWVzLnB1c2gocmVzKX0pXG5cdFx0Y29uc3QgcHJvbWlzZTIgPSByZWFkUHJvZmlsZShwcm9maWxlSW5mbykudGhlbigocmVzKSA9PiB7Z2V0UHJvZmlsZSA9IHJlc30pXG5cdFx0UHJvbWlzZS5hbGwoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oKHZhbHVlcykgPT4ge1xuXHRcdFx0aGFuZGxlQ2hhcml0eShhbGxDaGFyaXRpZXMsIGdldFByb2ZpbGUpXG5cdFx0fSk7XG5cdH0sIFtdKVxuXG5cdGNvbnN0IGhhbmRsZUNoYXJpdHkgPSAoY2hhcml0eUdyb3VwLCBwcm9maWxlR3JvdXApID0+IHtcblx0XHRcblx0XHRjaGFyaXR5R3JvdXAgPSBjaGFyaXR5R3JvdXAuZmxhdCgpIFxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiBjaGFyaXR5R3JvdXApe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHRsZXQgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyaXR5R3JvdXAubGVuZ3RoKVxuXG5cdFx0XHRsZXQgY291bnQgPSAwXG5cdFx0XHRpZihwcm9maWxlR3JvdXAuc3RhdGUudG9Mb3dlckNhc2UoKSA9PSBjaGFyaXR5R3JvdXBbcmFuZG9tSW5kZXhdWydzdGF0ZSddLnRvTG93ZXJDYXNlKCkpe1xuXHRcdFx0XHRjb3VudCA9IGNvdW50ICsgMVxuXHRcdFx0fVxuXHRcdFx0aWYoY291bnQgPT0gMSAmJiBwcm9maWxlR3JvdXAuc3RhdGUudG9Mb3dlckNhc2UoKSA9PSBjaGFyaXR5R3JvdXBbcmFuZG9tSW5kZXhdWydzdGF0ZSddLnRvTG93ZXJDYXNlKCkpe2NvbnRpbnVlO31cblx0XHRcdGNvbnNvbGUubG9nKHByb2ZpbGVHcm91cC5zdGF0ZS50b0xvd2VyQ2FzZSgpLCBjaGFyaXR5R3JvdXBbcmFuZG9tSW5kZXhdWydzdGF0ZSddLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChjaGFyaXR5R3JvdXBbcmFuZG9tSW5kZXhdKVxuXHRcdH1cblx0XHRzZXRSYW5kb21DaGFyaXRpZXModHdlbHZlUmFuZG9tQ2hhcml0aWVzKVxuXHR9XG5cdFx0bGV0IHRlc3QgPSByYW5kb21DaGFyaXRpZXMubWFwKChjaGFyaXR5LGkpID0+IChcblx0XHRcdDxUZXh0IGtleT17aX0+XG5cdFx0XHRcdHtjaGFyaXR5LmlkfSB7Y2hhcml0eS5uYW1lfSB7Y2hhcml0eS5zdGF0ZX0ge2NoYXJpdHkuY2F0ZWdvcnl9IHtjaGFyaXR5LmZlYXR1cmV9XG5cdFx0XHRcdDxOZXdsaW5lIC8+XG5cdFx0XHQ8L1RleHQ+XG5cdFx0KSlcblx0XHRcblx0cmV0dXJuICg8VGV4dD57dGVzdH08L1RleHQ+KVxuXHQvLyByZXR1cm4gKDxUZXh0PkhFUkU8L1RleHQ+KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiJdfQ==