'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    let myArr = [];
    await readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      myArr.push(res);
      setRand5(res);
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    console.log("^^^^^^^^^^^^^^^^^^^", typeof rand5);
    const parsedData = [];

    for (let row of rand5) {
      const rowItems = row;
      parsedData.push(rowItems[0] + rowItems[1]);
      console.log(`row ${JSON.stringify(row)}`);
      console.log(`rowItems ${rowItems}`);
      console.log(`parsedData ${parsedData}`);
    }
  };

  if (name) {
    myFunc(name); // console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJjb25zb2xlIiwibG9nIiwicGFyc2VkRGF0YSIsInJvdyIsInJvd0l0ZW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQTtBQUFELElBQWFELE9BQU8sQ0FBQyxPQUFELENBQTFCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRyxFQUFBQTtBQUFELElBQVNILE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTUssRUFBRSxHQUFHTCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVNLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUCxPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVEsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlYsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7O0FBRUEsTUFBSVcsTUFBTSxHQUFHLE1BQU9ILElBQVAsSUFBZ0I7QUFDNUIsUUFBSUksS0FBSyxHQUFHLEVBQVo7QUFDQSxVQUFNUCxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNMSyxJQURLLENBQ0NDLEdBQUQsSUFBUztBQUNkO0FBQ0FGLE1BQUFBLEtBQUssQ0FBQ0csSUFBTixDQUFXRCxHQUFYO0FBQ0FKLE1BQUFBLFFBQVEsQ0FBQ0ksR0FBRCxDQUFSO0FBQ0EsS0FMSyxFQU1MRCxJQU5LLENBTUEsTUFBTTtBQUNYRyxNQUFBQSxHQUFHO0FBQ0gsS0FSSyxDQUFOO0FBU0EsR0FYRDs7QUFZQSxRQUFNQSxHQUFHLEdBQUcsWUFBWTtBQUN2QjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxxQkFBWixFQUFrQyxPQUFPVCxLQUF6QztBQUNBLFVBQU1VLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZVgsS0FBZixFQUFxQjtBQUNwQixZQUFNWSxRQUFRLEdBQUdELEdBQWpCO0FBQ0FELE1BQUFBLFVBQVUsQ0FBQ0osSUFBWCxDQUFnQk0sUUFBUSxDQUFDLENBQUQsQ0FBUixHQUFjQSxRQUFRLENBQUMsQ0FBRCxDQUF0QztBQUNBSixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxPQUFNSSxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsR0FBZixDQUFvQixFQUF2QztBQUNBSCxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxZQUFXRyxRQUFTLEVBQWpDO0FBQ0FKLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLGNBQWFDLFVBQVcsRUFBckM7QUFDQTtBQUNELEdBWEQ7O0FBWUEsTUFBR1gsSUFBSCxFQUFRO0FBQ1BHLElBQUFBLE1BQU0sQ0FBQ0gsSUFBRCxDQUFOLENBRE8sQ0FFUDtBQUNBOztBQUNELHNCQUFPLG9CQUFDLElBQUQsZ0JBQVA7QUFDQSxDQXBDRDs7QUFzQ0FnQixNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHt1c2VTdGF0ZX0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHR9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRcblx0bGV0IG15RnVuYyA9IGFzeW5jIChuYW1lKSA9PiB7XG5cdFx0bGV0IG15QXJyID0gW11cblx0XHRhd2FpdCByZWFkQ2hhcml0aWVzKG5hbWUpXG5cdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coYHJlcyAke0pTT04uc3RyaW5naWZ5KHJlcyl9YClcblx0XHRcdG15QXJyLnB1c2gocmVzKVxuXHRcdFx0c2V0UmFuZDUocmVzKVxuXHRcdH0pXG5cdFx0LnRoZW4oKCkgPT4ge1xuXHRcdFx0ZnVuKClcblx0XHR9KVxuXHR9XG5cdGNvbnN0IGZ1biA9IGFzeW5jICgpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnNvbGUubG9nKFwiXl5eXl5eXl5eXl5eXl5eXl5eXlwiLHR5cGVvZihyYW5kNSkpXG5cdFx0Y29uc3QgcGFyc2VkRGF0YSA9IFtdO1xuXHRcdGZvcihsZXQgcm93IG9mIHJhbmQ1KXtcblx0XHRcdGNvbnN0IHJvd0l0ZW1zID0gcm93O1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zWzBdICsgcm93SXRlbXNbMV0pO1xuXHRcdFx0Y29uc29sZS5sb2coYHJvdyAke0pTT04uc3RyaW5naWZ5KHJvdyl9YClcblx0XHRcdGNvbnNvbGUubG9nKGByb3dJdGVtcyAke3Jvd0l0ZW1zfWApXG5cdFx0XHRjb25zb2xlLmxvZyhgcGFyc2VkRGF0YSAke3BhcnNlZERhdGF9YClcblx0XHR9XG5cdH1cblx0aWYobmFtZSl7XG5cdFx0bXlGdW5jKG5hbWUpXG5cdFx0Ly8gY29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKX1gKVxuXHR9XG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=