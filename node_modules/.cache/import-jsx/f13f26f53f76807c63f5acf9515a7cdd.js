'use strict';

const React = require('react');

const Table = require('ink-table');

const {
  useState,
  useEffect
} = require('react');

const axios = require('axios');

const {
  Text,
  Newline
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);
  const [randomCharities, setRandomCharities] = useState([]);
  let twelveRandomCharities = []; // let myFunc = () => {
  // 	readCharities(name)
  // 	.then((res) => {
  // 		// console.log(`res ${JSON.stringify(res)}`)
  // 		setRand5(res)
  // 	})
  // 	.then(() => {
  // 		fun()
  // 	})
  // }

  useEffect(() => {
    let myFunc = () => {
      readCharities(name).then(res => {
        // console.log(`res ${JSON.stringify(res)}`)
        setRand5(res);
        fun(res);
      }); // .then(() => {
      // 	fun()
      // })
    };

    myFunc();
  }, []);

  const fun = res => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    const parsedData = [];

    for (let row of res) {
      parsedData.push(row);
    }

    let pick12 = [];

    for (let i = 0; i < 12; i++) {
      twelveRandomCharities.push(res[Math.floor(Math.random() * res.length)]);
    }

    setRandomCharities(twelveRandomCharities);
  };

  let test = randomCharities.map((charity, i) => /*#__PURE__*/React.createElement(Text, {
    key: i
  }, charity.id, " ", charity.name, " ", charity.state, " ", charity.catergory, " ", charity.feature, /*#__PURE__*/React.createElement(Newline, null)));
  return /*#__PURE__*/React.createElement(Text, null, test);
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsIlRhYmxlIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIlRleHQiLCJOZXdsaW5lIiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsInJhbmRvbUNoYXJpdGllcyIsInNldFJhbmRvbUNoYXJpdGllcyIsInR3ZWx2ZVJhbmRvbUNoYXJpdGllcyIsIm15RnVuYyIsInRoZW4iLCJyZXMiLCJmdW4iLCJwYXJzZWREYXRhIiwicm93IiwicHVzaCIsInBpY2sxMiIsImkiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJ0ZXN0IiwibWFwIiwiY2hhcml0eSIsImlkIiwic3RhdGUiLCJjYXRlcmdvcnkiLCJmZWF0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0UsRUFBQUEsUUFBRDtBQUFXQyxFQUFBQTtBQUFYLElBQXdCSCxPQUFPLENBQUMsT0FBRCxDQUFyQzs7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBQ0ssRUFBQUEsSUFBRDtBQUFPQyxFQUFBQTtBQUFQLElBQWtCTixPQUFPLENBQUMsS0FBRCxDQUEvQjs7QUFDQSxNQUFNTyxHQUFHLEdBQUdQLE9BQU8sQ0FBQyxZQUFELENBQW5COztBQUNBLE1BQU1RLEVBQUUsR0FBR1IsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTTtBQUFFUyxFQUFBQSxhQUFGO0FBQWlCQyxFQUFBQTtBQUFqQixJQUFpQ1YsT0FBTyxDQUFDLGdCQUFELENBQTlDOztBQUNBLE1BQU1XLEdBQUcsR0FBRyxDQUFDO0FBQUNDLEVBQUFBLElBQUksR0FBRztBQUFSLENBQUQsS0FBeUI7QUFDcEM7QUFDQTtBQUVBO0FBQ0EsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JaLFFBQVEsQ0FBQyxFQUFELENBQWxDO0FBQ0EsUUFBTSxDQUFDYSxlQUFELEVBQWtCQyxrQkFBbEIsSUFBd0NkLFFBQVEsQ0FBQyxFQUFELENBQXREO0FBQ0EsTUFBSWUscUJBQXFCLEdBQUcsRUFBNUIsQ0FQb0MsQ0FRcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FkLEVBQUFBLFNBQVMsQ0FBQyxNQUFNO0FBRWYsUUFBSWUsTUFBTSxHQUFHLE1BQU07QUFDbEJULE1BQUFBLGFBQWEsQ0FBQ0csSUFBRCxDQUFiLENBQ0NPLElBREQsQ0FDT0MsR0FBRCxJQUFTO0FBQ2Q7QUFDQU4sUUFBQUEsUUFBUSxDQUFDTSxHQUFELENBQVI7QUFDQUMsUUFBQUEsR0FBRyxDQUFDRCxHQUFELENBQUg7QUFDQSxPQUxELEVBRGtCLENBT2xCO0FBQ0E7QUFDQTtBQUNBLEtBVkQ7O0FBV0FGLElBQUFBLE1BQU07QUFDTixHQWRRLEVBY04sRUFkTSxDQUFUOztBQWVBLFFBQU1HLEdBQUcsR0FBSUQsR0FBRCxJQUFTO0FBQ3BCO0FBQ0EsVUFBTUUsVUFBVSxHQUFHLEVBQW5COztBQUNBLFNBQUksSUFBSUMsR0FBUixJQUFlSCxHQUFmLEVBQW1CO0FBQ2xCRSxNQUFBQSxVQUFVLENBQUNFLElBQVgsQ0FBZ0JELEdBQWhCO0FBQ0E7O0FBQ0QsUUFBSUUsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzVCVCxNQUFBQSxxQkFBcUIsQ0FBQ08sSUFBdEIsQ0FBMkJKLEdBQUcsQ0FBQ08sSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQlQsR0FBRyxDQUFDVSxNQUEvQixDQUFELENBQTlCO0FBQ0E7O0FBQ0RkLElBQUFBLGtCQUFrQixDQUFDQyxxQkFBRCxDQUFsQjtBQUNBLEdBWEQ7O0FBWUMsTUFBSWMsSUFBSSxHQUFHaEIsZUFBZSxDQUFDaUIsR0FBaEIsQ0FBb0IsQ0FBQ0MsT0FBRCxFQUFTUCxDQUFULGtCQUM5QixvQkFBQyxJQUFEO0FBQU0sSUFBQSxHQUFHLEVBQUVBO0FBQVgsS0FDRU8sT0FBTyxDQUFDQyxFQURWLE9BQ2VELE9BQU8sQ0FBQ3JCLElBRHZCLE9BQzhCcUIsT0FBTyxDQUFDRSxLQUR0QyxPQUM4Q0YsT0FBTyxDQUFDRyxTQUR0RCxPQUNrRUgsT0FBTyxDQUFDSSxPQUQxRSxlQUVDLG9CQUFDLE9BQUQsT0FGRCxDQURVLENBQVg7QUFPRCxzQkFBUSxvQkFBQyxJQUFELFFBQU9OLElBQVAsQ0FBUjtBQUNBLENBckREOztBQXVEQU8sTUFBTSxDQUFDQyxPQUFQLEdBQWlCNUIsR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJ2luay10YWJsZScpXG5jb25zdCB7dXNlU3RhdGUsIHVzZUVmZmVjdH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY29uc3Qge1RleHQsIE5ld2xpbmV9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBjc3YgPSByZXF1aXJlKCdjc3YtcGFyc2VyJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHJlYWRDaGFyaXRpZXMsIHJlYWRQcm9maWxlIH0gPSByZXF1aXJlKFwiLi9yZWFkLWhlbHBlcnNcIik7XG5jb25zdCBBcHAgPSAoe25hbWUgPSBcIlN0cmFuZ2VyXCJ9KSA9PiB7XG5cdC8vIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdC8vIFx0Y29uc3QgdGVzdCA9IGF3YWl0IGltcG9ydCgnaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2RyaXZlL2ZvbGRlcnMvMWg1dWQxZGNBOGxxeGlGcjR0V3dXdGh6WmQwcE9xWWlUJylcblxuXHQvLyB9KVxuXHRjb25zdCBbcmFuZDUsIHNldFJhbmQ1XSA9IHVzZVN0YXRlKFtdKVxuXHRjb25zdCBbcmFuZG9tQ2hhcml0aWVzLCBzZXRSYW5kb21DaGFyaXRpZXNdID0gdXNlU3RhdGUoW10pXG5cdGxldCB0d2VsdmVSYW5kb21DaGFyaXRpZXMgPSBbXVxuXHQvLyBsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHQvLyBcdHJlYWRDaGFyaXRpZXMobmFtZSlcblx0Ly8gXHQudGhlbigocmVzKSA9PiB7XG5cdC8vIFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHQvLyBcdFx0c2V0UmFuZDUocmVzKVxuXHQvLyBcdH0pXG5cdC8vIFx0LnRoZW4oKCkgPT4ge1xuXHQvLyBcdFx0ZnVuKClcblx0Ly8gXHR9KVxuXHQvLyB9XG5cdHVzZUVmZmVjdCgoKSA9PiB7XG5cblx0XHRsZXQgbXlGdW5jID0gKCkgPT4ge1xuXHRcdFx0cmVhZENoYXJpdGllcyhuYW1lKVxuXHRcdFx0LnRoZW4oKHJlcykgPT4ge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0XHRcdGZ1bihyZXMpXG5cdFx0XHR9KVxuXHRcdFx0Ly8gLnRoZW4oKCkgPT4ge1xuXHRcdFx0Ly8gXHRmdW4oKVxuXHRcdFx0Ly8gfSlcblx0XHR9XG5cdFx0bXlGdW5jKClcblx0fSwgW10pXG5cdGNvbnN0IGZ1biA9IChyZXMpID0+IHtcblx0XHQvLyBjb25zb2xlLmxvZyhcIioqKioqKioqKioqXCIsIHJhbmQ1W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmQ1Lmxlbmd0aCldKVxuXHRcdGNvbnN0IHBhcnNlZERhdGEgPSBbXTtcblx0XHRmb3IobGV0IHJvdyBvZiByZXMpe1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvdylcblx0XHR9XG5cdFx0bGV0IHBpY2sxMiA9IFtdXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG5cdFx0XHR0d2VsdmVSYW5kb21DaGFyaXRpZXMucHVzaChyZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmVzLmxlbmd0aCldKVxuXHRcdH1cblx0XHRzZXRSYW5kb21DaGFyaXRpZXModHdlbHZlUmFuZG9tQ2hhcml0aWVzKVxuXHR9XG5cdFx0bGV0IHRlc3QgPSByYW5kb21DaGFyaXRpZXMubWFwKChjaGFyaXR5LGkpID0+IChcblx0XHRcdDxUZXh0IGtleT17aX0+XG5cdFx0XHRcdHtjaGFyaXR5LmlkfSB7Y2hhcml0eS5uYW1lfSB7Y2hhcml0eS5zdGF0ZX0ge2NoYXJpdHkuY2F0ZXJnb3J5fSB7Y2hhcml0eS5mZWF0dXJlfVxuXHRcdFx0XHQ8TmV3bGluZSAvPlxuXHRcdFx0PC9UZXh0PlxuXHRcdCkpXG5cdFx0XG5cdHJldHVybiAoPFRleHQ+e3Rlc3R9PC9UZXh0Pilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=