'use strict';

const React = require('react');

const {
  useState
} = require('react');

const axios = require('axios');

const {
  Text
} = require('ink');

const csv = require('csv-parser');

const fs = require('fs');

const {
  readCharities,
  readProfile
} = require("./read-helpers");

const App = ({
  name = "Stranger"
}) => {
  // React.useEffect(() => {
  // 	const test = await import('https://drive.google.com/drive/folders/1h5ud1dcA8lqxiFr4tWwWthzZd0pOqYiT')
  // })
  const [rand5, setRand5] = useState([]);

  let myFunc = async name => {
    let myArr = [];
    await readCharities(name).then(res => {
      // console.log(`res ${JSON.stringify(res)}`)
      myArr.push(res);
      setRand5(res);
    }).then(() => {
      fun();
    });
  };

  const fun = async () => {
    // console.log("***********", rand5[Math.floor(Math.random() * rand5.length)])
    console.log("^^^^^^^^^^^^^^^^^^^", typeof rand5);
    const parsedData = [];

    for (let row of rand5) {
      const rowItems = row.split(",");
      parsedData.push(rowItems[0].toString() + rowItems[1].toString());
      console.log(`row ${row}`);
      console.log(`rowItems ${rowItems}`);
      console.log(`parsedData ${parsedData}`);
    }
  };

  if (name) {
    myFunc(name); // console.log(`checking state ${Math.floor(Math.random() * rand5.length)}`)
  }

  return /*#__PURE__*/React.createElement(Text, null, "HERE ");
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiYXhpb3MiLCJUZXh0IiwiY3N2IiwiZnMiLCJyZWFkQ2hhcml0aWVzIiwicmVhZFByb2ZpbGUiLCJBcHAiLCJuYW1lIiwicmFuZDUiLCJzZXRSYW5kNSIsIm15RnVuYyIsIm15QXJyIiwidGhlbiIsInJlcyIsInB1c2giLCJmdW4iLCJjb25zb2xlIiwibG9nIiwicGFyc2VkRGF0YSIsInJvdyIsInJvd0l0ZW1zIiwic3BsaXQiLCJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDQyxFQUFBQTtBQUFELElBQWFELE9BQU8sQ0FBQyxPQUFELENBQTFCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFDRyxFQUFBQTtBQUFELElBQVNILE9BQU8sQ0FBQyxLQUFELENBQXRCOztBQUNBLE1BQU1JLEdBQUcsR0FBR0osT0FBTyxDQUFDLFlBQUQsQ0FBbkI7O0FBQ0EsTUFBTUssRUFBRSxHQUFHTCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNO0FBQUVNLEVBQUFBLGFBQUY7QUFBaUJDLEVBQUFBO0FBQWpCLElBQWlDUCxPQUFPLENBQUMsZ0JBQUQsQ0FBOUM7O0FBQ0EsTUFBTVEsR0FBRyxHQUFHLENBQUM7QUFBQ0MsRUFBQUEsSUFBSSxHQUFHO0FBQVIsQ0FBRCxLQUF5QjtBQUNwQztBQUNBO0FBRUE7QUFDQSxRQUFNLENBQUNDLEtBQUQsRUFBUUMsUUFBUixJQUFvQlYsUUFBUSxDQUFDLEVBQUQsQ0FBbEM7O0FBRUEsTUFBSVcsTUFBTSxHQUFHLE1BQU9ILElBQVAsSUFBZ0I7QUFDNUIsUUFBSUksS0FBSyxHQUFHLEVBQVo7QUFDQSxVQUFNUCxhQUFhLENBQUNHLElBQUQsQ0FBYixDQUNMSyxJQURLLENBQ0NDLEdBQUQsSUFBUztBQUNkO0FBQ0FGLE1BQUFBLEtBQUssQ0FBQ0csSUFBTixDQUFXRCxHQUFYO0FBQ0FKLE1BQUFBLFFBQVEsQ0FBQ0ksR0FBRCxDQUFSO0FBQ0EsS0FMSyxFQU1MRCxJQU5LLENBTUEsTUFBTTtBQUNYRyxNQUFBQSxHQUFHO0FBQ0gsS0FSSyxDQUFOO0FBU0EsR0FYRDs7QUFZQSxRQUFNQSxHQUFHLEdBQUcsWUFBWTtBQUN2QjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxxQkFBWixFQUFrQyxPQUFPVCxLQUF6QztBQUNBLFVBQU1VLFVBQVUsR0FBRyxFQUFuQjs7QUFDQSxTQUFJLElBQUlDLEdBQVIsSUFBZVgsS0FBZixFQUFxQjtBQUNwQixZQUFNWSxRQUFRLEdBQUdELEdBQUcsQ0FBQ0UsS0FBSixDQUFVLEdBQVYsQ0FBakI7QUFDQUgsTUFBQUEsVUFBVSxDQUFDSixJQUFYLENBQWdCTSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVlFLFFBQVosS0FBeUJGLFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWUUsUUFBWixFQUF6QztBQUNBTixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxPQUFNRSxHQUFJLEVBQXZCO0FBQ0FILE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFhLFlBQVdHLFFBQVMsRUFBakM7QUFDQUosTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsY0FBYUMsVUFBVyxFQUFyQztBQUNBO0FBQ0QsR0FYRDs7QUFZQSxNQUFHWCxJQUFILEVBQVE7QUFDUEcsSUFBQUEsTUFBTSxDQUFDSCxJQUFELENBQU4sQ0FETyxDQUVQO0FBQ0E7O0FBQ0Qsc0JBQU8sb0JBQUMsSUFBRCxnQkFBUDtBQUNBLENBcENEOztBQXNDQWdCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmxCLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3Qge3VzZVN0YXRlfSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5jb25zdCB7VGV4dH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IGNzdiA9IHJlcXVpcmUoJ2Nzdi1wYXJzZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHsgcmVhZENoYXJpdGllcywgcmVhZFByb2ZpbGUgfSA9IHJlcXVpcmUoXCIuL3JlYWQtaGVscGVyc1wiKTtcbmNvbnN0IEFwcCA9ICh7bmFtZSA9IFwiU3RyYW5nZXJcIn0pID0+IHtcblx0Ly8gUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0Ly8gXHRjb25zdCB0ZXN0ID0gYXdhaXQgaW1wb3J0KCdodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZHJpdmUvZm9sZGVycy8xaDV1ZDFkY0E4bHF4aUZyNHRXd1d0aHpaZDBwT3FZaVQnKVxuXG5cdC8vIH0pXG5cdGNvbnN0IFtyYW5kNSwgc2V0UmFuZDVdID0gdXNlU3RhdGUoW10pXG5cdFxuXHRsZXQgbXlGdW5jID0gYXN5bmMgKG5hbWUpID0+IHtcblx0XHRsZXQgbXlBcnIgPSBbXVxuXHRcdGF3YWl0IHJlYWRDaGFyaXRpZXMobmFtZSlcblx0XHQudGhlbigocmVzKSA9PiB7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhgcmVzICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKVxuXHRcdFx0bXlBcnIucHVzaChyZXMpXG5cdFx0XHRzZXRSYW5kNShyZXMpXG5cdFx0fSlcblx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRmdW4oKVxuXHRcdH0pXG5cdH1cblx0Y29uc3QgZnVuID0gYXN5bmMgKCkgPT4ge1xuXHRcdC8vIGNvbnNvbGUubG9nKFwiKioqKioqKioqKipcIiwgcmFuZDVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKV0pXG5cdFx0Y29uc29sZS5sb2coXCJeXl5eXl5eXl5eXl5eXl5eXl5eXCIsdHlwZW9mKHJhbmQ1KSlcblx0XHRjb25zdCBwYXJzZWREYXRhID0gW107XG5cdFx0Zm9yKGxldCByb3cgb2YgcmFuZDUpe1xuXHRcdFx0Y29uc3Qgcm93SXRlbXMgPSByb3cuc3BsaXQoXCIsXCIpO1xuXHRcdFx0cGFyc2VkRGF0YS5wdXNoKHJvd0l0ZW1zWzBdLnRvU3RyaW5nKCkgKyByb3dJdGVtc1sxXS50b1N0cmluZygpKTtcblx0XHRcdGNvbnNvbGUubG9nKGByb3cgJHtyb3d9YClcblx0XHRcdGNvbnNvbGUubG9nKGByb3dJdGVtcyAke3Jvd0l0ZW1zfWApXG5cdFx0XHRjb25zb2xlLmxvZyhgcGFyc2VkRGF0YSAke3BhcnNlZERhdGF9YClcblx0XHR9XG5cdH1cblx0aWYobmFtZSl7XG5cdFx0bXlGdW5jKG5hbWUpXG5cdFx0Ly8gY29uc29sZS5sb2coYGNoZWNraW5nIHN0YXRlICR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZDUubGVuZ3RoKX1gKVxuXHR9XG5cdHJldHVybiA8VGV4dD5IRVJFIDwvVGV4dD5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXX0=